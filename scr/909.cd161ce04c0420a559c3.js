"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[909],{4909:(n,e,t)=>{t.r(e),t.d(e,{default:()=>L});var o=t(4848),s=t(2296),c=t(8464),l=t(6540),i=t(6634),u=t(8977),C=t(4532),a=t(5731),r=t(6628),d=t(6399),p=t(7049);const V={Book:i.A,Bug:u.A,Curve:C.A,Cut:a.A,Delete:r.A};function y(){const[n,e]=l.useState([]);return(0,o.jsxs)("div",{children:[(0,o.jsx)(d.W,{value:n,onChange:e,label:"Special icons styles:",children:Object.keys(V).map((n=>{const e=V[n];return(0,o.jsx)(e,{},n)}))}),(0,o.jsx)(p.s,{display:"flex",justifyContent:"space-around",padding:"XL",fontSize:"500%",children:Object.keys(V).map((e=>{const t=V[e];return(0,o.jsx)(t,{type:n.includes(e)?"bold":"filled"},e)}))}),(0,o.jsx)(p.s,{display:"flex",justifyContent:"space-around",padding:"XL",fontSize:"500%",children:Object.keys(V).map((e=>{const t=V[e];return(0,o.jsx)(t,{type:n.includes(e)?"dual":"filled"},e)}))})]})}function k(){return(0,o.jsx)(s.A,{title:'import { ViewOptionsMultiple } from "@tolokoban/ui"',children:(0,o.jsx)(c.A,{description:"# Default usage\n",example:'import React from "react"\nimport {\n    ViewOptionsMultiple,\n    IconBook,\n    IconBug,\n    IconCurve,\n    IconCut,\n    IconDelete,\n    ViewPanel,\n    GenericIconProps,\n} from "@tolokoban/ui"\n\nconst ICONS: Record<string, React.FC<GenericIconProps>> = {\n    Book: IconBook,\n    Bug: IconBug,\n    Curve: IconCurve,\n    Cut: IconCut,\n    Delete: IconDelete,\n}\n\nexport default function Demo() {\n    const [values, setValues] = React.useState<string[]>([])\n    return (\n        <div>\n            <ViewOptionsMultiple\n                value={values}\n                onChange={setValues}\n                label="Special icons styles:"\n            >\n                {Object.keys(ICONS).map((key) => {\n                    const Icon = ICONS[key]\n                    return <Icon key={key} />\n                })}\n            </ViewOptionsMultiple>\n            <ViewPanel\n                display="flex"\n                justifyContent="space-around"\n                padding="XL"\n                fontSize="500%"\n            >\n                {Object.keys(ICONS).map((key) => {\n                    const Icon = ICONS[key]\n                    return (\n                        <Icon\n                            key={key}\n                            type={values.includes(key) ? "bold" : "filled"}\n                        />\n                    )\n                })}\n            </ViewPanel>\n            <ViewPanel\n                display="flex"\n                justifyContent="space-around"\n                padding="XL"\n                fontSize="500%"\n            >\n                {Object.keys(ICONS).map((key) => {\n                    const Icon = ICONS[key]\n                    return (\n                        <Icon\n                            key={key}\n                            type={values.includes(key) ? "dual" : "filled"}\n                        />\n                    )\n                })}\n            </ViewPanel>\n        </div>\n    )\n}\n',children:(0,o.jsx)(y,{})})})}function L(){return(0,o.jsx)(k,{})}},6634:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M21,5C19.89,4.65 18.67,4.5 17.5,4.5C15.55,4.5 13.45,4.9 12,6C10.55,4.9 8.45,4.5 6.5,4.5C4.55,4.5 2.45,4.9 1,6V20.65C1,20.9 1.25,21.15 1.5,21.15C1.6,21.15 1.65,21.1 1.75,21.1C3.1,20.45 5.05,20 6.5,20C8.45,20 10.55,20.4 12,21.5C13.35,20.65 15.8,20 17.5,20C19.15,20 20.85,20.3 22.25,21.05C22.35,21.1 22.4,21.1 22.5,21.1C22.75,21.1 23,20.85 23,20.6V6C22.4,5.55 21.75,5.25 21,5M21,18.5C19.9,18.15 18.7,18 17.5,18C15.8,18 13.35,18.65 12,19.5V8C13.35,7.15 15.8,6.5 17.5,6.5C18.7,6.5 19.9,6.65 21,7V18.5Z","IconBook")},8977:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M14,12H10V10H14M14,16H10V14H14M20,8H17.19C16.74,7.22 16.12,6.55 15.37,6.04L17,4.41L15.59,3L13.42,5.17C12.96,5.06 12.5,5 12,5C11.5,5 11.04,5.06 10.59,5.17L8.41,3L7,4.41L8.62,6.04C7.88,6.55 7.26,7.22 6.81,8H4V10H6.09C6.04,10.33 6,10.66 6,11V12H4V14H6V15C6,15.34 6.04,15.67 6.09,16H4V18H6.81C7.85,19.79 9.78,21 12,21C14.22,21 16.15,19.79 17.19,18H20V16H17.91C17.96,15.67 18,15.34 18,15V14H20V12H18V11C18,10.66 17.96,10.33 17.91,10H20V8Z","IconBug")},4532:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M4 19V20H22V22H2V2H4V17C7 17 10 15 12.1 11.4C15.1 6.4 18.4 4 22 4V6C19.2 6 16.5 8.1 13.9 12.5C11.3 16.6 7.7 19 4 19Z","IconCurve")},5731:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M19,3L13,9L15,11L22,4V3M12,12.5A0.5,0.5 0 0,1 11.5,12A0.5,0.5 0 0,1 12,11.5A0.5,0.5 0 0,1 12.5,12A0.5,0.5 0 0,1 12,12.5M6,20A2,2 0 0,1 4,18C4,16.89 4.9,16 6,16A2,2 0 0,1 8,18C8,19.11 7.1,20 6,20M6,8A2,2 0 0,1 4,6C4,4.89 4.9,4 6,4A2,2 0 0,1 8,6C8,7.11 7.1,8 6,8M9.64,7.64C9.87,7.14 10,6.59 10,6A4,4 0 0,0 6,2A4,4 0 0,0 2,6A4,4 0 0,0 6,10C6.59,10 7.14,9.87 7.64,9.64L10,12L7.64,14.36C7.14,14.13 6.59,14 6,14A4,4 0 0,0 2,18A4,4 0 0,0 6,22A4,4 0 0,0 10,18C10,17.41 9.87,16.86 9.64,16.36L12,14L19,21H22V20L9.64,7.64Z","IconCut")},6628:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19M8.46,11.88L9.87,10.47L12,12.59L14.12,10.47L15.53,11.88L13.41,14L15.53,16.12L14.12,17.53L12,15.41L9.88,17.53L8.47,16.12L10.59,14L8.46,11.88M15.5,4L14.5,3H9.5L8.5,4H5V6H19V4H15.5Z","IconDelete")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,