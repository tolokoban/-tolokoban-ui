"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[179],{1624:(n,e,t)=>{t.d(e,{A:()=>r});var o=t(1354),l=t.n(o),a=t(6314),i=t.n(a)()(l());i.push([n.id,".\\---lib-dist-view-InputText-InputText-module_InputText_gH580l {\n    font: inherit;\n    background: transparent;\n    width: 100%;\n    border: none;\n    padding: 0 0.5em;\n    line-height: 2em;\n    height: 2em;\n    color: inherit;\n    background-color: none;\n    border-bottom: 2px solid currentColor;\n    transition: all 0.2s;\n}\n\n.\\---lib-dist-view-InputText-InputText-module_InputText_gH580l:focus {\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n    border: none;\n    outline: none;\n}\n\n.\\---lib-dist-view-InputText-InputText-module_InputText_gH580l.\\---lib-dist-view-InputText-InputText-module_invalid_FGNLMM {\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/InputText/InputText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,gBAAgB;IAChB,WAAW;IACX,cAAc;IACd,sBAAsB;IACtB,qCAAqC;IACrC,oBAAoB;AACxB;;AAEA;IACI,0CAA0C;IAC1C,kCAAkC;IAClC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,0CAA0C;IAC1C,kCAAkC;AACtC",sourcesContent:[".InputText {\n    font: inherit;\n    background: transparent;\n    width: 100%;\n    border: none;\n    padding: 0 0.5em;\n    line-height: 2em;\n    height: 2em;\n    color: inherit;\n    background-color: none;\n    border-bottom: 2px solid currentColor;\n    transition: all 0.2s;\n}\n\n.InputText:focus {\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n    border: none;\n    outline: none;\n}\n\n.InputText.invalid {\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n}\n"],sourceRoot:""}]),i.locals={InputText:"---lib-dist-view-InputText-InputText-module_InputText_gH580l",invalid:"---lib-dist-view-InputText-InputText-module_invalid_FGNLMM"};const r=i},5036:(n,e,t)=>{t.d(e,{A:()=>r});var o=t(1354),l=t.n(o),a=t(6314),i=t.n(a)()(l());i.push([n.id,".\\---lib-dist-view-Label-Label-module_LabelContent_YYb190 {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.\\---lib-dist-view-Label-Label-module_Label_mUUrOO {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.5;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,YAAY;AAChB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.5;\n}\n"],sourceRoot:""}]),i.locals={LabelContent:"---lib-dist-view-Label-Label-module_LabelContent_YYb190",Label:"---lib-dist-view-Label-Label-module_Label_mUUrOO"};const r=i},7179:(n,e,t)=>{t.r(e),t.d(e,{default:()=>c});var o=t(4848),l=t(2296),a=t(5865),i=t(6540),r=t(5895),s=t(1323);function u(){const[n,e]=i.useState("Mr Bean");return(0,o.jsx)(r.a,{value:"What's your name?",title:"This is a tooltip...",children:(0,o.jsx)(s.H,{value:n,onChange:e})})}function A(){return(0,o.jsx)(l.A,{title:'import { ViewLabel } from "@tolokoban/ui"',children:(0,o.jsx)(a.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputText, ViewLabel } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [name, setName] = React.useState("Mr Bean")\n    return (\n        <ViewLabel value="What\'s your name?" title="This is a tooltip...">\n            <ViewInputText value={name} onChange={setName} />\n        </ViewLabel>\n    )\n}\n',children:(0,o.jsx)(u,{})})})}function c(){return(0,o.jsx)(A,{})}},1323:(n,e,t)=>{t.d(e,{H:()=>T});var o=t(4848),l=t(6540),a=t(9142),i=t(9494),r=t(5895),s=t(5072),u=t.n(s),A=t(7825),c=t.n(A),d=t(7659),p=t.n(d),b=t(5056),m=t.n(b),h=t(540),C=t.n(h),I=t(1113),v=t.n(I),x=t(1624),g={};g.styleTagTransform=v(),g.setAttributes=m(),g.insert=p().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=C(),u()(x.A,g);const f=x.A&&x.A.locals?x.A.locals:void 0,w=a.A.classNames;function T(n){const{className:e,placeholder:t,value:a="",label:s,autofocus:u=!1,onChange:A,onEnterKeyPressed:c,type:d="text",maxWidth:p,validator:b}=n,[m,h]=l.useState(!1),[C,I]=l.useState(a);l.useEffect((()=>{null==A||A(C)}),[A,C]);const v=Object.assign({},(0,i.S)(n));p&&(v.maxWidth=p);const x=(0,o.jsx)("input",{className:w.join(e,f.InputText,m&&f.invalid),style:v,autoFocus:u,placeholder:t,type:d,value:C,onChange:n=>{const e=n.target.value;if(h(!1),b)if(b instanceof RegExp){if(b.lastIndex=-1,!b.test(e))return void h(!0)}else"function"==typeof b&&h(!b(e));I(e)},onKeyDown:n=>{m||"Enter"===n.key&&(n.preventDefault(),n.stopPropagation(),null==c||c(C))}});return s?(0,o.jsx)(r.a,{value:s,children:x}):x}},5895:(n,e,t)=>{t.d(e,{a:()=>f});var o=t(4848),l=t(6540),a=t(9142),i=t(5072),r=t.n(i),s=t(7825),u=t.n(s),A=t(7659),c=t.n(A),d=t(5056),p=t.n(d),b=t(540),m=t.n(b),h=t(1113),C=t.n(h),I=t(5036),v={};v.styleTagTransform=C(),v.setAttributes=p(),v.insert=c().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=m(),r()(I.A,v);const x=I.A&&I.A.locals?I.A.locals:void 0,g=a.A.classNames;function f({color:n,className:e,value:t,title:a,children:i}){const r=`labelled/${l.useId()}`;if(!t)return(0,o.jsx)(o.Fragment,{children:i});const s={};return n&&(s.color=`var(--theme-color-${n})`),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("label",{htmlFor:r,title:a,className:g.join(e,x.Label),style:s,children:t}),i&&(0,o.jsx)("div",{id:r,className:x.LabelContent,children:i})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,