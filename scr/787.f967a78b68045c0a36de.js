"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[787],{6690:(o,e,n)=>{n.d(e,{A:()=>r});var t=n(1354),a=n.n(t),i=n(6314),l=n.n(i)()(a());l.push([o.id,".\\---lib-dist-view-Dialog-Dialog-module_Dialog_TlNDK8 {\n    display: inline-block;\n    --custom-color-header-text: var(--theme-color-on-neutral-4);\n    --custom-color-header-back: var(--theme-color-neutral-4);\n    --custom-color-main-text: var(--theme-color-on-neutral-4);\n    --custom-color-main-back: var(--theme-color-neutral-4);\n    --custom-color-footer-text: var(--theme-color-on-neutral-6);\n    --custom-color-footer-back: var(--theme-color-neutral-6);\n}\n\n.\\---lib-dist-view-Dialog-Dialog-module_Dialog_TlNDK8 > header.\\---lib-dist-view-Dialog-Dialog-module_header_nRi4Km {\n    padding: var(--theme-gap-S) var(--theme-gap-M);\n}\n\n.\\---lib-dist-view-Dialog-Dialog-module_Dialog_TlNDK8 > footer {\n    display: flex;\n    justify-content: space-around;\n    gap: 1em;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Dialog/Dialog.module.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,2DAA2D;IAC3D,wDAAwD;IACxD,yDAAyD;IACzD,sDAAsD;IACtD,2DAA2D;IAC3D,wDAAwD;AAC5D;;AAEA;IACI,8CAA8C;AAClD;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,QAAQ;AACZ",sourcesContent:[".Dialog {\n    display: inline-block;\n    --custom-color-header-text: var(--theme-color-on-neutral-4);\n    --custom-color-header-back: var(--theme-color-neutral-4);\n    --custom-color-main-text: var(--theme-color-on-neutral-4);\n    --custom-color-main-back: var(--theme-color-neutral-4);\n    --custom-color-footer-text: var(--theme-color-on-neutral-6);\n    --custom-color-footer-back: var(--theme-color-neutral-6);\n}\n\n.Dialog > header.header {\n    padding: var(--theme-gap-S) var(--theme-gap-M);\n}\n\n.Dialog > footer {\n    display: flex;\n    justify-content: space-around;\n    gap: 1em;\n}\n"],sourceRoot:""}]),l.locals={Dialog:"---lib-dist-view-Dialog-Dialog-module_Dialog_TlNDK8",header:"---lib-dist-view-Dialog-Dialog-module_header_nRi4Km"};const r=l},4708:(o,e,n)=>{n.d(e,{A:()=>r});var t=n(1354),a=n.n(t),i=n(6314),l=n.n(i)()(a());l.push([o.id,".\\---lib-dist-view-Strip-Strip-module_Strip_dxgrWS {\n    display: grid;\n    place-items: stretch;\n    padding: 0;\n    margin: 0;\n    gap: 0;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Strip/Strip.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,oBAAoB;IACpB,UAAU;IACV,SAAS;IACT,MAAM;AACV",sourcesContent:[".Strip {\n    display: grid;\n    place-items: stretch;\n    padding: 0;\n    margin: 0;\n    gap: 0;\n}\n"],sourceRoot:""}]),l.locals={Strip:"---lib-dist-view-Strip-Strip-module_Strip_dxgrWS"};const r=l},5787:(o,e,n)=>{n.r(e),n.d(e,{default:()=>T});var t=n(4848),a=n(2296),i=n(5865),l=n(9142),r=n(855),s=n(3439),c=n(9168),d=n(5072),u=n.n(d),m=n(7825),A=n.n(m),p=n(7659),g=n.n(p),h=n(5056),D=n.n(h),b=n(540),v=n.n(b),w=n(1113),x=n.n(w),C=n(6690),f={};f.styleTagTransform=x(),f.setAttributes=D(),f.insert=g().bind(null,"head"),f.domAPI=A(),f.insertStyleElement=v(),u()(C.A,f);const y=C.A&&C.A.locals?C.A.locals:void 0,j=l.A.classNames;function k({className:o,buttonCancel:e,buttonValidate:n,title:a,headColor:i="primary-3",bodyColor:l="neutral-6",footColor:d="neutral-4",children:u}){const m=I("Cancel",e,{variant:"text"}),A=I("Validate",n);return(0,t.jsxs)(c.U,{className:j.join(o,y.Dialog),orientation:"column",template:"-1",children:[a&&(0,t.jsx)("header",{className:y.header,style:(0,r.B)({color:i}),children:a}),(0,t.jsx)("main",{style:(0,r.B)({color:l}),children:u}),(m||A)&&(0,t.jsxs)("footer",{style:(0,r.B)({color:d}),children:[m&&(0,t.jsx)(s.y,Object.assign({},m)),A&&(0,t.jsx)(s.y,Object.assign({},A))]})]})}function I(o,e,n){return e&&e.onClick?Object.assign(Object.assign({children:o},e),n):null}function _(){return(0,t.jsxs)("div",{children:[(0,t.jsxs)("p",{children:["A ",(0,t.jsx)("b",{children:"Dialog"})," looks like a window with a potential header and button in the footer:"]}),(0,t.jsx)(k,{children:(0,t.jsx)("p",{children:"Are you sure you want to destroy your computer with an atomic explosion?"})})]})}function S(){return(0,t.jsx)(a.A,{title:'import { ViewDialog } from "@tolokoban/ui"',children:(0,t.jsx)(i.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewDialog } from "@tolokoban/ui"\n\nexport default function Demo() {\n    return (\n        <div>\n            <p>\n                A <b>Dialog</b> looks like a window with a potential header and\n                button in the footer:\n            </p>\n            <ViewDialog>\n                <p>\n                    Are you sure you want to destroy your computer with an\n                    atomic explosion?\n                </p>\n            </ViewDialog>\n        </div>\n    )\n}\n',children:(0,t.jsx)(_,{})})})}function T(){return(0,t.jsx)(S,{})}},9168:(o,e,n)=>{n.d(e,{U:()=>f});var t=n(4848),a=n(9142),i=n(3088),l=n(3357),r=n(6166),s=n(5072),c=n.n(s),d=n(7825),u=n.n(d),m=n(7659),A=n.n(m),p=n(5056),g=n.n(p),h=n(540),D=n.n(h),b=n(1113),v=n.n(b),w=n(4708),x={};x.styleTagTransform=v(),x.setAttributes=g(),x.insert=A().bind(null,"head"),x.domAPI=u(),x.insertStyleElement=D(),c()(w.A,x);const C=w.A&&w.A.locals?w.A.locals:void 0;function f(o){const{orientation:e="column",template:n="-1"}=o,s=Object.assign(Object.assign(Object.assign({},(0,i._)(o)),(0,l.r)(o)),(0,r.G)(o)),c=n.split("").map((o=>"123456789".includes(o)?`minmax(0, ${o}fr)`:"auto")).join(" ");return"row"===e?(s.gridTemplateColumns=c,s.gridAutoColumns="auto",s.gridTemplateRows="minmax(0, 1fr)"):(s.gridTemplateRows=c,s.gridAutoRows="auto",s.gridTemplateColumns="minmax(0, 1fr)"),(0,t.jsx)("div",{className:a.A.classNames.join(o.className,C.Strip,C[e]),style:s,children:o.children})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,