"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[321],{711:(e,n,o)=>{o.d(n,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([e.id,".src-app-view-CodeHighlighter-demo-Default-Default-module_symbol_Y_bBtG {\n    font-weight: bolder;\n    color: #f80;\n}\n","",{version:3,sources:["webpack://./src/app/view/CodeHighlighter/demo/Default/Default.module.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,WAAW;AACf",sourcesContent:[".symbol {\n    font-weight: bolder;\n    color: #f80;\n}\n"],sourceRoot:""}]),l.locals={symbol:"src-app-view-CodeHighlighter-demo-Default-Default-module_symbol_Y_bBtG"};const s=l},3514:(e,n,o)=>{o.d(n,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([e.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),l.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const s=l},6630:(e,n,o)=>{o.d(n,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([e.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),l.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const s=l},7599:(e,n,o)=>{o.d(n,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([e.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),l.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const s=l},3714:(e,n,o)=>{o.d(n,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([e.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),l.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const s=l},9968:(e,n,o)=>{o.d(n,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([e.id,".\\---lib-dist-view-CodeHighlighter-CodeHighlighter-module_CodeHighlighter_BOpAMI {\n    \n}","",{version:3,sources:["webpack://./../lib/dist/view/CodeHighlighter/CodeHighlighter.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".CodeHighlighter {\n    \n}"],sourceRoot:""}]),l.locals={CodeHighlighter:"---lib-dist-view-CodeHighlighter-CodeHighlighter-module_CodeHighlighter_BOpAMI"};const s=l},5321:(e,n,o)=>{o.r(n),o.d(n,{default:()=>B});var i=o(4848),t=o(2296),r=o(8464),l=o(6540),s=o(6781),a=o(5072),c=o.n(a),m=o(7825),h=o.n(m),d=o(7659),A=o.n(d),g=o(5056),u=o.n(g),C=o(540),p=o.n(C),v=o(1113),w=o.n(v),y=o(9968),b={};b.styleTagTransform=w(),b.setAttributes=u(),b.insert=A().bind(null,"head"),b.domAPI=h(),b.insertStyleElement=p(),c()(y.A,b);const f=y.A&&y.A.locals?y.A.locals:void 0,H=s.Sx.classNames;function x({className:e,children:n,grammar:o}){const[t,r]=l.useState([n]);return l.useEffect((()=>{r([n])}),[n,o]),(0,i.jsx)("div",{className:H.join(e,f.CodeHighlighter),children:t.map(I)})}function I(e,n){return"string"==typeof e?e:(0,i.jsx)("span",{className:e.className,children:e.children.map(I)},`Code.${n}`)}var _=o(711),j={};j.styleTagTransform=w(),j.setAttributes=u(),j.insert=A().bind(null,"head"),j.domAPI=h(),j.insertStyleElement=p(),c()(_.A,j);const V=_.A&&_.A.locals?_.A.locals:void 0;function k(){return(0,i.jsx)(x,{grammar:{lexer:{space:/^[ \t\n\t]+/,symbol:'=,|()[]{}<>:"'.split("")},scanner:[{token:"symbol",className:V.symbol}]},children:'type MyRecord = Record<string, number | number[]>\nfunction addElement<ValueType>(dic: Record<string, ValueType>, key: string, value: ValueType) {\n    dic[key] = value\n}\n\nconst dic: Record<string, { name: string }> = {}\naddElement(dic, "you", { name: "Harry" })'})}function D(){return(0,i.jsx)(t.A,{title:'import { ViewCodeHighlighter } from "@tolokoban/ui"',children:(0,i.jsx)(r.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewCodeHighlighter } from "@tolokoban/ui"\nimport Style from "./Default.module.css"\n\nexport default function Demo() {\n    const code = `type MyRecord = Record<string, number | number[]>\nfunction addElement<ValueType>(dic: Record<string, ValueType>, key: string, value: ValueType) {\n    dic[key] = value\n}\n\nconst dic: Record<string, { name: string }> = {}\naddElement(dic, "you", { name: "Harry" })`\n    return (\n        <ViewCodeHighlighter\n            grammar={{\n                lexer: {\n                    space: /^[ \\t\\n\\t]+/,\n                    symbol: \'=,|()[]{}<>:"\'.split(""),\n                },\n                scanner: [\n                    {\n                        token: "symbol",\n                        className: Style.symbol,\n                    },\n                ],\n            }}\n        >\n            {code}\n        </ViewCodeHighlighter>\n    )\n}\n',children:(0,i.jsx)(k,{})})})}function B(){return(0,i.jsx)(D,{})}},9327:(e,n,o)=>{o.d(n,{f:()=>b});var i=o(4848),t=o(9309);function r(e,n="    ",o=-1){const i="".padEnd(Math.max(0,o)*n.length,n);return"string"==typeof e?`${i}${e}`:e.map((e=>r(e,n,o+1))).join("\n")}var l=o(5072),s=o.n(l),a=o(7825),c=o.n(a),m=o(7659),h=o.n(m),d=o(5056),A=o.n(d),g=o(540),u=o.n(g),C=o(1113),p=o.n(C),v=o(6630),w={};w.styleTagTransform=p(),w.setAttributes=A(),w.insert=h().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=u(),s()(v.A,w);const y=v.A&&v.A.locals?v.A.locals:void 0;function b(e){var n;return(0,i.jsx)(t.A,{className:f(e),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:r(null!==(n=e.children)&&void 0!==n?n:"")})}function f({className:e}){const n=[y.Highlight];return e&&n.push(e),n.join(" ")}},8464:(e,n,o)=>{o.d(n,{A:()=>R});var i=o(4848),t=o(6781),r=o(7049),l=o(6540),s=o(9550),a=o(2182),c=o(5726),m=o(9327),h=o(5072),d=o.n(h),A=o(7825),g=o.n(A),u=o(7659),C=o.n(u),p=o(5056),v=o.n(p),w=o(540),y=o.n(w),b=o(1113),f=o.n(b),H=o(3514),x={};x.styleTagTransform=f(),x.setAttributes=v(),x.insert=C().bind(null,"head"),x.domAPI=g(),x.insertStyleElement=y(),d()(H.A,x);const I=H.A&&H.A.locals?H.A.locals:void 0,_=t.Sx.classNames;function j({className:e,children:n}){const[o,t]=l.useState(!1);return(0,i.jsxs)("div",{className:_.join(e,I.Code),children:[(0,i.jsxs)(s.y,{variant:"text",onClick:()=>t(!o),children:[o?(0,i.jsx)(a.A,{}):(0,i.jsx)(c.A,{}),(0,i.jsx)("div",{children:"Example's code:"})]}),o&&(0,i.jsx)(m.f,{children:n})]})}var V=o(7599),k={};k.styleTagTransform=f(),k.setAttributes=v(),k.insert=C().bind(null,"head"),k.domAPI=g(),k.insertStyleElement=y(),d()(V.A,k);const D=V.A&&V.A.locals?V.A.locals:void 0,B=t.Sx.classNames;function R({className:e,example:n,children:o}){return(0,i.jsxs)(r.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,i.jsx)("div",{className:B.join(e,D.ViewDemo),children:o}),(0,i.jsx)("hr",{}),(0,i.jsx)(j,{children:n})]})}},2296:(e,n,o)=>{o.d(n,{A:()=>f});var i=o(4848),t=o(6781),r=o(7049),l=o(5072),s=o.n(l),a=o(7825),c=o.n(a),m=o(7659),h=o.n(m),d=o(5056),A=o.n(d),g=o(540),u=o.n(g),C=o(1113),p=o.n(C),v=o(3714),w={};w.styleTagTransform=p(),w.setAttributes=A(),w.insert=h().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=u(),s()(v.A,w);const y=v.A&&v.A.locals?v.A.locals:void 0,b=t.Sx.classNames;function f({className:e,title:n,children:o}){return(0,i.jsxs)("div",{className:b.join(e,y.ViewDocumentation),children:[(0,i.jsx)(r.s,{margin:0,padding:"M",color:"primary-2",children:n}),(0,i.jsx)(r.s,{margin:0,padding:"M",overflow:"auto",children:o})]})}},2182:(e,n,o)=>{o.d(n,{A:()=>i});const i=(0,o(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(e,n,o)=>{o.d(n,{A:()=>i});const i=(0,o(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,