"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[321],{711:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([e.id,".src-app-view-CodeHighlighter-demo-Default-Default-module_symbol_Y_bBtG {\n    font-weight: bolder;\n    color: #f80;\n}\n","",{version:3,sources:["webpack://./src/app/view/CodeHighlighter/demo/Default/Default.module.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,WAAW;AACf",sourcesContent:[".symbol {\n    font-weight: bolder;\n    color: #f80;\n}\n"],sourceRoot:""}]),r.locals={symbol:"src-app-view-CodeHighlighter-demo-Default-Default-module_symbol_Y_bBtG"};const s=r},9968:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([e.id,".\\---lib-dist-view-CodeHighlighter-CodeHighlighter-module_CodeHighlighter_BOpAMI {\n    \n}","",{version:3,sources:["webpack://./../lib/dist/view/CodeHighlighter/CodeHighlighter.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".CodeHighlighter {\n    \n}"],sourceRoot:""}]),r.locals={CodeHighlighter:"---lib-dist-view-CodeHighlighter-CodeHighlighter-module_CodeHighlighter_BOpAMI"};const s=r},5321:(e,n,t)=>{t.r(n),t.d(n,{default:()=>j});var o=t(4848),i=t(2296),l=t(5865),r=t(6540),s=t(9142),a=t(5072),d=t.n(a),c=t(7825),u=t.n(c),m=t(7659),g=t.n(m),h=t(5056),p=t.n(h),A=t(540),y=t.n(A),f=t(1113),b=t.n(f),C=t(9968),H={};H.styleTagTransform=b(),H.setAttributes=p(),H.insert=g().bind(null,"head"),H.domAPI=u(),H.insertStyleElement=y(),d()(C.A,H);const v=C.A&&C.A.locals?C.A.locals:void 0,k=s.A.classNames;function w({className:e,children:n,grammar:t}){const[i,l]=r.useState([n]);return r.useEffect((()=>{l([n])}),[n,t]),(0,o.jsx)("div",{className:k.join(e,v.CodeHighlighter),children:i.map(_)})}function _(e,n){return"string"==typeof e?e:(0,o.jsx)("span",{className:e.className,children:e.children.map(_)},`Code.${n}`)}var x=t(711),R={};R.styleTagTransform=b(),R.setAttributes=p(),R.insert=g().bind(null,"head"),R.domAPI=u(),R.insertStyleElement=y(),d()(x.A,R);const T=x.A&&x.A.locals?x.A.locals:void 0;function V(){return(0,o.jsx)(w,{grammar:{lexer:{space:/^[ \t\n\t]+/,symbol:'=,|()[]{}<>:"'.split("")},scanner:[{token:"symbol",className:T.symbol}]},children:'type MyRecord = Record<string, number | number[]>\nfunction addElement<ValueType>(dic: Record<string, ValueType>, key: string, value: ValueType) {\n    dic[key] = value\n}\n\nconst dic: Record<string, { name: string }> = {}\naddElement(dic, "you", { name: "Harry" })'})}function D(){return(0,o.jsx)(i.A,{title:'import { ViewCodeHighlighter } from "@tolokoban/ui"',children:(0,o.jsx)(l.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewCodeHighlighter } from "@tolokoban/ui"\nimport Style from "./Default.module.css"\n\nexport default function Demo() {\n    const code = `type MyRecord = Record<string, number | number[]>\nfunction addElement<ValueType>(dic: Record<string, ValueType>, key: string, value: ValueType) {\n    dic[key] = value\n}\n\nconst dic: Record<string, { name: string }> = {}\naddElement(dic, "you", { name: "Harry" })`\n    return (\n        <ViewCodeHighlighter\n            grammar={{\n                lexer: {\n                    space: /^[ \\t\\n\\t]+/,\n                    symbol: \'=,|()[]{}<>:"\'.split(""),\n                },\n                scanner: [\n                    {\n                        token: "symbol",\n                        className: Style.symbol,\n                    },\n                ],\n            }}\n        >\n            {code}\n        </ViewCodeHighlighter>\n    )\n}\n',children:(0,o.jsx)(V,{})})})}function j(){return(0,o.jsx)(D,{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,