"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[201],{201:(n,e,o)=>{o.r(e),o.d(e,{default:()=>s});var t=o(4848),i=o(2296),l=o(5865),r=o(4118);function u(){return(0,t.jsx)(r.e,{onLoad:()=>{console.log("onLoad()")},children:"Import file"})}function a(){return(0,t.jsx)(i.A,{title:'import { ViewInputFile } from "@tolokoban/ui"',children:(0,t.jsx)(l.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputFile } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const handleLoad = () => {\n        console.log("onLoad()")\n    }\n    return <ViewInputFile onLoad={handleLoad}>Import file</ViewInputFile>\n}\n',children:(0,t.jsx)(u,{})})})}function s(){return(0,t.jsx)(a,{})}},4118:(n,e,o)=>{o.d(e,{e:()=>r});var t=o(4848),i=o(6540),l=o(3439);function r(n){const e=i.useRef(null);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.y,Object.assign({},n,{onClick:()=>{const n=e.current;n&&n.click()}})),(0,t.jsx)("input",{style:{display:"none"},ref:e,type:"file"})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyLzIwMS4wYzExMjIxMTBiZDNhNDM3OWEzNS5qcyIsIm1hcHBpbmdzIjoic0xBR2UsU0FBU0EsSUFJcEIsT0FBTyxTQUFDLElBQWEsQ0FBQ0MsT0FISCxLQUNmQyxRQUFRQyxJQUFJLFdBQVcsRUFFYSx3QkFDNUMsQ0NLZSxTQUFTQyxJQUNwQixPQUFPLFNBQUNDLEVBQUEsRUFBaUIsQ0FBQ0MsTUFBTSxnREFBK0MsVUFDM0UsU0FBQ0MsRUFBQSxFQUFRLENBQ0xDLFlBQWEsb0JBRWJDLFFBQVMsdVFBQTRRLFVBRXJSLFNBQUNULEVBQVcsT0FHeEIsQ0NaZSxTQUFTVSxJQUNwQixPQUFPLFNBQUMsRUFBYSxHQUN6QixDLG9FQ1ZPLFNBQVNDLEVBQWNDLEdBQzFCLE1BQU1DLEVBQU0sU0FBYSxNQU96QixPQUFRLFVBQU0sV0FBVyxDQUFFQyxTQUFVLEVBQUMsU0FBSyxJQUFZQyxPQUFPQyxPQUFPLENBQUMsRUFBR0osRUFBTyxDQUFFSyxRQU45RCxLQUNoQixNQUFNQyxFQUFRTCxFQUFJTSxRQUNiRCxHQUVMQSxFQUFNRSxPQUFPLE1BRTJGLFNBQUssUUFBUyxDQUFFQyxNQUFPLENBQUVDLFFBQVMsUUFBVVQsSUFBS0EsRUFBS1UsS0FBTSxXQUM1SyxDIiwic291cmNlcyI6WyIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2RvYy9zcmMvYXBwL3ZpZXcvSW5wdXRGaWxlL2RlbW8vRGVmYXVsdC9EZWZhdWx0LnRzeCIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvZG9jL3NyYy9hcHAvdmlldy9JbnB1dEZpbGUvSW5wdXRGaWxlLnRzeCIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvZG9jL3NyYy9hcHAvdmlldy9JbnB1dEZpbGUvcGFnZS50c3giLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3ZpZXcvSW5wdXRGaWxlL0lucHV0RmlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IFZpZXdJbnB1dEZpbGUgfSBmcm9tIFwiQHRvbG9rb2Jhbi91aVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlbW8oKSB7XG4gICAgY29uc3QgaGFuZGxlTG9hZCA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvbkxvYWQoKVwiKVxuICAgIH1cbiAgICByZXR1cm4gPFZpZXdJbnB1dEZpbGUgb25Mb2FkPXtoYW5kbGVMb2FkfT5JbXBvcnQgZmlsZTwvVmlld0lucHV0RmlsZT5cbn1cbiIsIi8qKlxuICogMjAyNC0wNS0xNFQxMjowODowOS42OTlaXG4gKlxuICogVGhpcyBmaWxlIGhhcyBiZWVuIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHdpdGg6XG4gKiBucG0gcnVuIGdlbmVyYXRlXG4gKiBcbiAqIFBsZWFzZSBkbyBub3QgbW9kaWZ5IGl0IG1hbnVhbGx5LlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBWaWV3RG9jdW1lbnRhdGlvbiBmcm9tIFwiQC92aWV3L1ZpZXdEb2N1bWVudGF0aW9uXCJcbmltcG9ydCBWaWV3RGVtbyBmcm9tIFwiQC92aWV3L1ZpZXdEZW1vXCJcbmltcG9ydCBEZW1vRGVmYXVsdCBmcm9tIFwiLi9kZW1vL0RlZmF1bHRcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbnB1dEZpbGVEb2N1bWVudGF0aW9uKCkge1xuICAgIHJldHVybiA8Vmlld0RvY3VtZW50YXRpb24gdGl0bGU9J2ltcG9ydCB7IFZpZXdJbnB1dEZpbGUgfSBmcm9tIFwiQHRvbG9rb2Jhbi91aVwiJz5cbiAgICAgICAgPFZpZXdEZW1vXG4gICAgICAgICAgICBkZXNjcmlwdGlvbj17XCIjIERlZmF1bHQgdXNhZ2VcXG5cIn1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmdcbiAgICAgICAgICAgIGV4YW1wbGU9e1wiaW1wb3J0IFJlYWN0IGZyb20gXFxcInJlYWN0XFxcIlxcbmltcG9ydCB7IFZpZXdJbnB1dEZpbGUgfSBmcm9tIFxcXCJAdG9sb2tvYmFuL3VpXFxcIlxcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlbW8oKSB7XFxuICAgIGNvbnN0IGhhbmRsZUxvYWQgPSAoKSA9PiB7XFxuICAgICAgICBjb25zb2xlLmxvZyhcXFwib25Mb2FkKClcXFwiKVxcbiAgICB9XFxuICAgIHJldHVybiA8Vmlld0lucHV0RmlsZSBvbkxvYWQ9e2hhbmRsZUxvYWR9PkltcG9ydCBmaWxlPC9WaWV3SW5wdXRGaWxlPlxcbn1cXG5cIn1cbiAgICAgICAgPlxuICAgICAgICAgICAgPERlbW9EZWZhdWx0IC8+XG4gICAgICAgIDwvVmlld0RlbW8+XG4gICAgPC9WaWV3RG9jdW1lbnRhdGlvbj5cbn0iLCIvKipcbiAqIDIwMjQtMDUtMTRUMTI6MDg6MDkuNjk5WlxuICpcbiAqIFRoaXMgZmlsZSBoYXMgYmVlbiBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCB3aXRoOlxuICogbnBtIHJ1biBnZW5lcmF0ZVxuICogXG4gKiBQbGVhc2UgZG8gbm90IG1vZGlmeSBpdCBtYW51YWxseS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgVmlld0lucHV0RmlsZSBmcm9tIFwiLi9JbnB1dEZpbGVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYWdlVmlld0lucHV0RmlsZSgpIHtcbiAgICByZXR1cm4gPFZpZXdJbnB1dEZpbGUgLz5cbn1cbiIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFZpZXdCdXR0b24gfSBmcm9tIFwiLi4vQnV0dG9uL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gVmlld0lucHV0RmlsZShwcm9wcykge1xuICAgIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSByZWYuY3VycmVudDtcbiAgICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaW5wdXQuY2xpY2soKTtcbiAgICB9O1xuICAgIHJldHVybiAoX2pzeHMoX0ZyYWdtZW50LCB7IGNoaWxkcmVuOiBbX2pzeChWaWV3QnV0dG9uLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgeyBvbkNsaWNrOiBoYW5kbGVDbGljayB9KSksIF9qc3goXCJpbnB1dFwiLCB7IHN0eWxlOiB7IGRpc3BsYXk6IFwibm9uZVwiIH0sIHJlZjogcmVmLCB0eXBlOiBcImZpbGVcIiB9KV0gfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pU1c1d2RYUkdhV3hsTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDNacFpYY3ZTVzV3ZFhSR2FXeGxMMGx1Y0hWMFJtbHNaUzUwYzNnaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJMRTlCUVU4c1MwRkJTeXhOUVVGTkxFOUJRVThzUTBGQlFUdEJRVVY2UWl4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGdFFpeE5RVUZOTEc5Q1FVRnZRaXhEUVVGQk8wRkJUV2hGTEUxQlFVMHNWVUZCVlN4aFFVRmhMRU5CUVVNc1MwRkJlVUk3U1VGRGJrUXNUVUZCVFN4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQk1FSXNTVUZCU1N4RFFVRkRMRU5CUVVFN1NVRkRka1FzVFVGQlRTeFhRVUZYTEVkQlFVY3NSMEZCUnl4RlFVRkZPMUZCUTNKQ0xFMUJRVTBzUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVFN1VVRkRla0lzU1VGQlNTeERRVUZETEV0QlFVczdXVUZCUlN4UFFVRk5PMUZCUld4Q0xFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUVR0SlFVTnFRaXhEUVVGRExFTkJRVUU3U1VGRFJDeFBRVUZQTEVOQlEwZ3NPRUpCUTBrc1MwRkJReXhWUVVGVkxHOUNRVUZMTEV0QlFVc3NTVUZCUlN4UFFVRlBMRVZCUVVVc1YwRkJWeXhKUVVGSkxFVkJReTlETEdkQ1FVRlBMRXRCUVVzc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlF5eE5RVUZOTEVkQlFVY3NTVUZETlVRc1EwRkRUaXhEUVVGQk8wRkJRMHdzUTBGQlF5SjkiXSwibmFtZXMiOlsiRGVtbyIsIm9uTG9hZCIsImNvbnNvbGUiLCJsb2ciLCJJbnB1dEZpbGVEb2N1bWVudGF0aW9uIiwiVmlld0RvY3VtZW50YXRpb24iLCJ0aXRsZSIsIlZpZXdEZW1vIiwiZGVzY3JpcHRpb24iLCJleGFtcGxlIiwiUGFnZVZpZXdJbnB1dEZpbGUiLCJWaWV3SW5wdXRGaWxlIiwicHJvcHMiLCJyZWYiLCJjaGlsZHJlbiIsIk9iamVjdCIsImFzc2lnbiIsIm9uQ2xpY2siLCJpbnB1dCIsImN1cnJlbnQiLCJjbGljayIsInN0eWxlIiwiZGlzcGxheSIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9