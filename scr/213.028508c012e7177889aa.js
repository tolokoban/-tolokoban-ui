"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[213],{2874:(n,e,t)=>{t.d(e,{A:()=>r});var i=t(1354),o=t.n(i),a=t(6314),l=t.n(a)()(o());l.push([n.id,".\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx {\n    display: grid;\n    gap: 0;\n    place-items: stretch;\n    grid-template-rows: auto 1fr;\n    box-shadow: var(--theme-shadow-1);\n    margin: 2px;\n}\n\n.\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx > input {\n    border: none;\n    height: 2em;\n    line-height: 2em;\n    padding: 0 0.5em;\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n}\n\n.\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx > div {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    color: var(--theme-color-on-primary-5);\n    background: var(--theme-color-primary-5);\n    overflow: hidden;\n    border-radius: 0 0 0.25em 0.25em;\n}\n\n.\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx > div > button {\n    all: inherit;\n    flex: 1 1 auto;\n    min-width: 3em;\n    cursor: pointer;\n    display: grid;\n    place-items: center;\n    position: relative;\n    padding: 0;\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/InputMultiText/InputMultiText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,MAAM;IACN,oBAAoB;IACpB,4BAA4B;IAC5B,iCAAiC;IACjC,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,gBAAgB;IAChB,gBAAgB;IAChB,0CAA0C;IAC1C,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,eAAe;IACf,6BAA6B;IAC7B,oBAAoB;IACpB,sCAAsC;IACtC,wCAAwC;IACxC,gBAAgB;IAChB,gCAAgC;AACpC;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,cAAc;IACd,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,SAAS;AACb",sourcesContent:[".InputMultiText {\n    display: grid;\n    gap: 0;\n    place-items: stretch;\n    grid-template-rows: auto 1fr;\n    box-shadow: var(--theme-shadow-1);\n    margin: 2px;\n}\n\n.InputMultiText > input {\n    border: none;\n    height: 2em;\n    line-height: 2em;\n    padding: 0 0.5em;\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n}\n\n.InputMultiText > div {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    color: var(--theme-color-on-primary-5);\n    background: var(--theme-color-primary-5);\n    overflow: hidden;\n    border-radius: 0 0 0.25em 0.25em;\n}\n\n.InputMultiText > div > button {\n    all: inherit;\n    flex: 1 1 auto;\n    min-width: 3em;\n    cursor: pointer;\n    display: grid;\n    place-items: center;\n    position: relative;\n    padding: 0;\n    margin: 0;\n}\n"],sourceRoot:""}]),l.locals={InputMultiText:"---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx"};const r=l},9213:(n,e,t)=>{t.r(e),t.d(e,{default:()=>y});var i=t(4848),o=t(2296),a=t(5865),l=t(6540),r=t(9142),u=t(5013),s=t(3357),A=t(6166),c=t(5072),d=t.n(c),p=t(7825),g=t.n(p),m=t(7659),C=t.n(m),h=t(5056),I=t.n(h),x=t(540),f=t.n(x),v=t(1113),b=t.n(v),w=t(2874),M={};M.styleTagTransform=b(),M.setAttributes=I(),M.insert=C().bind(null,"head"),M.domAPI=g(),M.insertStyleElement=f(),d()(w.A,M);const T=w.A&&w.A.locals?w.A.locals:void 0;function B(n){const{value:e,onChange:t,onLangChange:o,renderLang:a=((n,e)=>e?(0,i.jsx)("b",{children:n}):(0,i.jsx)("span",{children:n}))}=n,[c,d,p]=function({value:n,onChange:e,lang:t,onLangChange:i}){var o;const a=Object.keys(n);l.useEffect((()=>{0===a.length&&e({[navigator.language]:""})}),[n,e,a.length]);const r=function(n,e){if(0!==n.length){if(n.includes(e))return e;for(const t of n)if(t.startsWith(e))return t;for(const t of n)if(t.toLowerCase().startsWith(e.toLowerCase()))return t;return n[0]}}(a,t);return l.useEffect((()=>{r&&r!==t&&i(r)}),[r,i,t]),[a,null!=r?r:"",null!==(o=n[null!=r?r:""])&&void 0!==o?o:""]}(n),g=Object.assign(Object.assign(Object.assign({},(0,u._)(n)),(0,s.r)(n)),(0,A.G)(n));return(0,i.jsxs)("div",{className:r.A.classNames.join(n.className,T.InputMultiText),style:g,children:[(0,i.jsx)("input",{value:p,onChange:n=>{const i=n.target.value;t(Object.assign(Object.assign({},e),{[d]:i}))}}),(0,i.jsx)("div",{children:c.map((n=>(0,i.jsx)("button",{onClick:()=>o(n),children:a(n,n===d)},n)))})]})}function j(){const[n,e]=l.useState("en"),[t,o]=l.useState({en:"Hello world!",fr:"Salut le monde !",it:"Ciao mondo!"});return(0,i.jsx)("div",{children:(0,i.jsx)(B,{lang:n,onLangChange:e,value:t,onChange:o})})}function k(){return(0,i.jsx)(o.A,{title:'import { ViewInputMultiText } from "@tolokoban/ui"',children:(0,i.jsx)(a.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputMultiText } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [lang, setLang] = React.useState("en")\n    const [value, setValue] = React.useState<Record<string, string>>({\n        en: "Hello world!",\n        fr: "Salut le monde !",\n        it: "Ciao mondo!",\n    })\n    return (\n        <div>\n            <ViewInputMultiText\n                lang={lang}\n                onLangChange={setLang}\n                value={value}\n                onChange={setValue}\n            />\n        </div>\n    )\n}\n',children:(0,i.jsx)(j,{})})})}function y(){return(0,i.jsx)(k,{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,