"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[123],{2932:(e,n,l)=>{l.d(n,{A:()=>o});var t=l(1354),i=l.n(t),r=l(6314),a=l.n(r)()(i());a.push([e.id,".\\---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix {\n    display: flex;\n    gap: 0.5em;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n}\n\n.\\---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix > input {\n    flex: 1 1 auto;\n}\n\n.\\---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix > div {\n    flex: 0 0 auto;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Slider/Slider.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,UAAU;IACV,2BAA2B;IAC3B,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".Slider {\n    display: flex;\n    gap: 0.5em;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n}\n\n.Slider > input {\n    flex: 1 1 auto;\n}\n\n.Slider > div {\n    flex: 0 0 auto;\n}\n"],sourceRoot:""}]),a.locals={Slider:"---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix"};const o=a},6123:(e,n,l)=>{l.r(n),l.d(n,{default:()=>y});var t=l(4848),i=l(2296),r=l(5865),a=l(6540),o=l(9142),s=l(9870),u=l(5072),d=l.n(u),c=l(7825),A=l.n(c),m=l(7659),f=l.n(m),v=l(5056),x=l.n(v),p=l(540),S=l.n(p),C=l(1113),b=l.n(C),g=l(2932),h={};h.styleTagTransform=b(),h.setAttributes=x(),h.insert=f().bind(null,"head"),h.domAPI=A(),h.insertStyleElement=S(),d()(g.A,h);const w=g.A&&g.A.locals?g.A.locals:void 0,I=o.A.classNames;function _({min:e,max:n,step:l,className:i,wide:r,text:a,value:o,onChange:u}){const[d,c]=(0,s.H)({value:o,onChange:u});return(0,t.jsxs)("div",{className:I.join(i,w.Slider,r?"wide":""),children:[(0,t.jsx)("input",{type:"range",min:null!=e?e:0,max:null!=n?n:0,step:null!=l?l:1,onChange:e=>c(parseFloat(e.target.value))}),a&&(0,t.jsx)("div",{children:j(a,d)})]})}function j(e,n){return"string"==typeof e?e:"number"==typeof e?`${e}`:e(n)}function B(){const[e,n]=a.useState(.5);return(0,t.jsx)(_,{value:e,onChange:n})}function k(){return(0,t.jsx)(i.A,{title:'import { ViewSlider } from "@tolokoban/ui"',children:(0,t.jsx)(r.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewSlider } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [value, setValue] = React.useState(0.5)\n    return <ViewSlider value={value} onChange={setValue} />\n}\n',children:(0,t.jsx)(B,{})})})}function y(){return(0,t.jsx)(k,{})}},9870:(e,n,l)=>{l.d(n,{H:()=>i});var t=l(6540);function i(e){const[n,l]=t.useState(e.value);return t.useEffect((()=>{l(e.value)}),[e.value]),[n,n=>{var t;l(n),null===(t=e.onChange)||void 0===t||t.call(e,n)}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,