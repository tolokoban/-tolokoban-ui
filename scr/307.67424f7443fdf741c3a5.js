"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[307],{1704:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),l=t.n(o),i=t(6314),r=t.n(i)()(l());r.push([e.id,".\\---lib-dist-view-Stack-Stack-module_stack_TsBGZT {\n    position: relative;\n}\n\ndiv.\\---lib-dist-view-Stack-Stack-module_stack_TsBGZT > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Stack/Stack.module.css"],names:[],mappings:"AAAA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,WAAW;IACX,YAAY;IACZ,SAAS;AACb",sourcesContent:[".stack {\n    position: relative;\n}\n\ndiv.stack > * {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n}\n"],sourceRoot:""}]),r.locals={stack:"---lib-dist-view-Stack-Stack-module_stack_TsBGZT"};const s=r},7307:(e,n,t)=>{t.r(n),t.d(n,{default:()=>P});var o=t(4848),l=t(2296),i=t(8464),r=t(6540),s=t(7049),a=t(6399),c=t(6781),d=t(1635),u=t(5072),h=t.n(u),A=t(7825),k=t.n(A),p=t(7659),v=t.n(p),w=t(5056),g=t.n(w),f=t(540),b=t.n(f),m=t(1113),y=t.n(m),x=t(1704),S={};S.styleTagTransform=y(),S.setAttributes=g(),S.insert=v().bind(null,"head"),S.domAPI=k(),S.insertStyleElement=b(),h()(x.A,S);const C=x.A&&x.A.locals?x.A.locals:void 0,j=c.Sx.classNames;function B(e){const{value:n,children:t}=e,l=Object.assign({},(0,d.$)(e)),i=r.useMemo((()=>{const e=new Set(n?Array.isArray(n)?n:[n]:[]);return(o=t,void 0===o?[]:Array.isArray(o)?o:[o]).filter((n=>!n.key||e.has(n.key)));var o}),[t,n]);return(0,o.jsx)("div",{className:j.join(e.className,C.stack,(0,d.p)(e)),style:l,children:i})}const I={red:0,green:120,blue:240};function M(){const[e,n]=r.useState(["red","green","blue"]);return(0,o.jsxs)(s.s,{display:"flex",flexDirection:"column",alignItems:"center",gap:"M",padding:"M",color:"neutral-9",children:[(0,o.jsxs)(a.W,{value:e,onChange:n,label:"Select/unselect a color",children:[(0,o.jsx)("div",{children:"Red"},"red"),(0,o.jsx)("div",{children:"Green"},"green"),(0,o.jsx)("div",{children:"Blue"},"blue")]}),(0,o.jsxs)(B,{value:e,width:"240px",height:"240px",children:[(0,o.jsx)(V,{color:"red"},"red"),(0,o.jsx)(V,{color:"green"},"green"),(0,o.jsx)(V,{color:"blue"},"blue")]})]})}function V({color:e}){return(0,o.jsx)("svg",{width:"240",height:"240",xmlns:"http://www.w3.org/2000/svg",viewBox:"-120 -120 240 240",children:(0,o.jsx)("path",{transform:`rotate(${I[e]})`,d:"M120,0 A120,120 0 0 0 -120,0 A120,60 0 0 0 120,0",stroke:"none",fill:e,"fill-opacity":"0.25"})})}function _(){return(0,o.jsx)(l.A,{title:'import { ViewStack } from "@tolokoban/ui"',children:(0,o.jsx)(i.A,{description:"# Default usage\n\n`ViewStack` has an array of elements as `children` and can display only a subset of them thanks to the attribute `value`.\n\nChildren without a key will always be rendered. `value` can be the key of the only child to be rendered, or an array of keys to display several children.\n",example:'import React from "react"\nimport { ViewOptionsMultiple, ViewPanel, ViewStack } from "@tolokoban/ui"\n\nconst ANGLES = {\n    red: 0,\n    green: 120,\n    blue: 240,\n}\n\ntype Color = keyof typeof ANGLES\n\nexport default function Demo() {\n    const [colors, setColors] = React.useState<Color[]>([\n        "red",\n        "green",\n        "blue",\n    ])\n    return (\n        <ViewPanel\n            display="flex"\n            flexDirection="column"\n            alignItems="center"\n            gap="M"\n            padding="M"\n            color="neutral-9"\n        >\n            <ViewOptionsMultiple\n                value={colors}\n                onChange={setColors}\n                label="Select/unselect a color"\n            >\n                <div key="red">Red</div>\n                <div key="green">Green</div>\n                <div key="blue">Blue</div>\n            </ViewOptionsMultiple>\n            <ViewStack value={colors} width="240px" height="240px">\n                <Pie key="red" color="red" />\n                <Pie key="green" color="green" />\n                <Pie key="blue" color="blue" />\n            </ViewStack>\n        </ViewPanel>\n    )\n}\n\nfunction Pie({ color }: { color: Color }) {\n    return (\n        <svg\n            width="240"\n            height="240"\n            xmlns="http://www.w3.org/2000/svg"\n            viewBox="-120 -120 240 240"\n        >\n            <path\n                transform={`rotate(${ANGLES[color]})`}\n                d="M120,0 A120,120 0 0 0 -120,0 A120,60 0 0 0 120,0"\n                stroke="none"\n                fill={color}\n                fill-opacity="0.25"\n            />\n        </svg>\n    )\n}\n',children:(0,o.jsx)(M,{})})})}function P(){return(0,o.jsx)(_,{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,