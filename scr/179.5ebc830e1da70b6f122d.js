"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[179],{3514:(e,n,o)=>{o.d(n,{A:()=>r});var a=o(1354),s=o.n(a),t=o(6314),i=o.n(t)()(s());i.push([e.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),i.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const r=i},7599:(e,n,o)=>{o.d(n,{A:()=>r});var a=o(1354),s=o.n(a),t=o(6314),i=o.n(t)()(s());i.push([e.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),i.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const r=i},3714:(e,n,o)=>{o.d(n,{A:()=>r});var a=o(1354),s=o.n(a),t=o(6314),i=o.n(t)()(s());i.push([e.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),i.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const r=i},7179:(e,n,o)=>{o.r(n),o.d(n,{default:()=>A});var a=o(4848),s=o(2296),t=o(8464),i=o(6540),r=o(7049),l=o(5895),c=o(1323),u=o(3770);function m(){const[e,n]=i.useState(""),[o,s]=i.useState(0);return(0,a.jsxs)("div",{children:[(0,a.jsxs)(r.s,{display:"grid",gridTemplateColumns:"auto 1fr",gap:"M",placeItems:"center start",maxWidth:"480px",children:[(0,a.jsx)(l.a,{value:"What's your name?",title:"This is a tooltip...",children:(0,a.jsx)(c.H,{value:e,onChange:n,placeholder:"Please enter your name here"})}),(0,a.jsx)(l.a,{value:"How old are you?",children:(0,a.jsx)(u.D,{value:o,onChange:s,placeholder:"Please enter your age here"})})]}),e.trim()&&(0,a.jsxs)("p",{children:["Nice to meet you, ",(0,a.jsx)("b",{children:e}),"!"]})]})}function d(){return(0,a.jsx)(s.A,{title:'import { ViewLabel } from "@tolokoban/ui"',children:(0,a.jsx)(t.A,{description:"# Default usage\n",example:'import React from "react"\nimport {\n    ViewInputNumber,\n    ViewInputText,\n    ViewLabel,\n    ViewPanel,\n} from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [name, setName] = React.useState("")\n    const [age, setAge] = React.useState(0)\n    return (\n        <div>\n            <ViewPanel\n                display="grid"\n                gridTemplateColumns="auto 1fr"\n                gap="M"\n                placeItems="center start"\n                maxWidth="480px"\n            >\n                <ViewLabel\n                    value="What\'s your name?"\n                    title="This is a tooltip..."\n                >\n                    <ViewInputText\n                        value={name}\n                        onChange={setName}\n                        placeholder="Please enter your name here"\n                    />\n                </ViewLabel>\n                <ViewLabel value="How old are you?">\n                    <ViewInputNumber\n                        value={age}\n                        onChange={setAge}\n                        placeholder="Please enter your age here"\n                    />\n                </ViewLabel>\n            </ViewPanel>\n            {name.trim() && (\n                <p>\n                    Nice to meet you, <b>{name}</b>!\n                </p>\n            )}\n        </div>\n    )\n}\n',children:(0,a.jsx)(m,{})})})}function A(){return(0,a.jsx)(d,{})}},8464:(e,n,o)=>{o.d(n,{A:()=>_});var a=o(4848),s=o(6781),t=o(7049),i=o(6540),r=o(9550),l=o(2182),c=o(5726),u=o(9327),m=o(5072),d=o.n(m),A=o(7825),h=o.n(A),p=o(7659),v=o.n(p),w=o(5056),x=o.n(w),g=o(540),b=o.n(g),V=o(1113),C=o.n(V),j=o(3514),D={};D.styleTagTransform=C(),D.setAttributes=x(),D.insert=v().bind(null,"head"),D.domAPI=h(),D.insertStyleElement=b(),d()(j.A,D);const N=j.A&&j.A.locals?j.A.locals:void 0,y=s.Sx.classNames;function f({className:e,children:n}){const[o,s]=i.useState(!1);return(0,a.jsxs)("div",{className:y.join(e,N.Code),children:[(0,a.jsxs)(r.y,{variant:"text",onClick:()=>s(!o),children:[o?(0,a.jsx)(l.A,{}):(0,a.jsx)(c.A,{}),(0,a.jsx)("div",{children:"Example's code:"})]}),o&&(0,a.jsx)(u.f,{children:n})]})}var I=o(7599),k={};k.styleTagTransform=C(),k.setAttributes=x(),k.insert=v().bind(null,"head"),k.domAPI=h(),k.insertStyleElement=b(),d()(I.A,k);const S=I.A&&I.A.locals?I.A.locals:void 0,T=s.Sx.classNames;function _({className:e,example:n,children:o}){return(0,a.jsxs)(t.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,a.jsx)("div",{className:T.join(e,S.ViewDemo),children:o}),(0,a.jsx)("hr",{}),(0,a.jsx)(f,{children:n})]})}},2296:(e,n,o)=>{o.d(n,{A:()=>C});var a=o(4848),s=o(6781),t=o(7049),i=o(5072),r=o.n(i),l=o(7825),c=o.n(l),u=o(7659),m=o.n(u),d=o(5056),A=o.n(d),h=o(540),p=o.n(h),v=o(1113),w=o.n(v),x=o(3714),g={};g.styleTagTransform=w(),g.setAttributes=A(),g.insert=m().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=p(),r()(x.A,g);const b=x.A&&x.A.locals?x.A.locals:void 0,V=s.Sx.classNames;function C({className:e,title:n,children:o}){return(0,a.jsxs)("div",{className:V.join(e,b.ViewDocumentation),children:[(0,a.jsx)(t.s,{margin:0,padding:"M",color:"primary-2",children:n}),(0,a.jsx)(t.s,{margin:0,padding:"M",overflow:"auto",children:o})]})}},3770:(e,n,o)=>{o.d(n,{D:()=>t});var a=o(4848),s=o(1323);function t(e){var n,o;const t=null!==(n=e.min)&&void 0!==n?n:Number.NEGATIVE_INFINITY,i=null!==(o=e.max)&&void 0!==o?o:Number.POSITIVE_INFINITY,r=Object.assign(Object.assign({},e),{value:`${e.value}`,onChange:n=>{const o=Number(n);Number.isFinite(o)&&e.onChange(o)},type:"number",validator:e=>{const n=Number(e);return Number.isFinite(n)&&n>=t&&n<=i}});return(0,a.jsx)(s.H,Object.assign({},r))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,