"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[695],{5036:(n,e,o)=>{o.d(e,{A:()=>a});var i=o(1354),t=o.n(i),l=o(6314),s=o.n(l)()(t());s.push([n.id,".\\---lib-dist-view-Label-Label-module_LabelContent_YYb190 {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.\\---lib-dist-view-Label-Label-module_Label_mUUrOO {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.5;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,YAAY;AAChB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.5;\n}\n"],sourceRoot:""}]),s.locals={LabelContent:"---lib-dist-view-Label-Label-module_LabelContent_YYb190",Label:"---lib-dist-view-Label-Label-module_Label_mUUrOO"};const a=s},9536:(n,e,o)=>{o.d(e,{A:()=>a});var i=o(1354),t=o.n(i),l=o(6314),s=o.n(l)()(t());s.push([n.id,".\\---lib-dist-view-Options-Options-module_Options_z10WmO {\n    display: inline-block;\n    box-shadow: var(--theme-shadow-2);\n    overflow: hidden;\n    border-radius: 0.5rem;\n}\n\n.\\---lib-dist-view-Options-Options-module_OptionsWide_DufCyS {\n    display: block;\n}\n\n.\\---lib-dist-view-Options-Options-module_OptionsWide_DufCyS div.options {\n    display: flex;\n    background-color: var(--theme-color-primary-5);\n    color: var(--theme-color-on-primary-5);\n}\n\n.\\---lib-dist-view-Options-Options-module_Options_z10WmO div.options {\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-items: stretch;\n    border-radius: 0.5rem;\n    overflow: hidden;\n}\n\n.\\---lib-dist-view-Options-Options-module_Options_z10WmO div.options > .button {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.\\---lib-dist-view-Options-Options-module_Options_z10WmO div.options > .button.selected {\n    font-weight: 900;\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.\\---lib-dist-view-Options-Options-module_Options_z10WmO div.options > .button.not-selected {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Options/Options.module.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,iCAAiC;IACjC,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IAEI,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,2BAA2B;IAC3B,oBAAoB;IACpB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,SAAS;IACT,wBAAwB;IACxB,cAAc;IACd,gCAAgC;IAChC,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,8CAA8C;IAC9C,sCAAsC;AAC1C",sourcesContent:[".Options {\n    display: inline-block;\n    box-shadow: var(--theme-shadow-2);\n    overflow: hidden;\n    border-radius: 0.5rem;\n}\n\n.OptionsWide {\n    composes: Options;\n    display: block;\n}\n\n.OptionsWide :global(div.options) {\n    display: flex;\n    background-color: var(--theme-color-primary-5);\n    color: var(--theme-color-on-primary-5);\n}\n\n.Options :global(div.options) {\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-items: stretch;\n    border-radius: 0.5rem;\n    overflow: hidden;\n}\n\n.Options :global(div.options) > :global(.button) {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.Options :global(div.options) > :global(.button.selected) {\n    font-weight: 900;\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.Options :global(div.options) > :global(.button.not-selected) {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n"],sourceRoot:""}]),s.locals={Options:"---lib-dist-view-Options-Options-module_Options_z10WmO",OptionsWide:"---lib-dist-view-Options-Options-module_OptionsWide_DufCyS ---lib-dist-view-Options-Options-module_Options_z10WmO"};const a=s},7872:(n,e,o)=>{o.d(e,{A:()=>a});var i=o(1354),t=o.n(i),l=o(6314),s=o.n(l)()(t());s.push([n.id,".\\---lib-dist-view-Touchable-Touchable-module_Touchable_Fygs2c {\n    display: contents;\n    cursor: pointer;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Touchable/Touchable.module.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,eAAe;AACnB",sourcesContent:[".Touchable {\n    display: contents;\n    cursor: pointer;\n}\n"],sourceRoot:""}]),s.locals={Touchable:"---lib-dist-view-Touchable-Touchable-module_Touchable_Fygs2c"};const a=s},9695:(n,e,o)=>{o.r(e),o.d(e,{default:()=>j});var i=o(4848),t=o(2296),l=o(5865),s=o(6540),a=o(9870),r=o(5895),d=o(6516),A=o(5072),c=o.n(A),p=o(7825),u=o.n(p),m=o(7659),b=o.n(m),v=o(5056),h=o.n(v),C=o(540),g=o.n(C),O=o(1113),w=o.n(O),f=o(9536),y={};y.styleTagTransform=w(),y.setAttributes=h(),y.insert=b().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=g(),c()(f.A,y);const B=f.A&&f.A.locals?f.A.locals:void 0;function I(n){const{label:e,children:o}=n,[t,l]=(0,a.H)(n);return(0,i.jsx)("div",{className:x(n),children:(0,i.jsx)(r.a,{value:e,children:(0,i.jsx)("div",{className:"options theme-shadow-button",children:o.map((n=>{var e;const o="number"==typeof t?parseFloat(`${null!==(e=n.key)&&void 0!==e?e:"0"}`):n.key;return o===t?(0,i.jsx)("div",{className:"button selected theme-color-accent-light",children:n},o):(0,i.jsx)(d.t,{className:"button not-selected theme-color-primary",onClick:()=>l(o),children:n},o)}))})})})}function x(n){const e=[B.Options];return"string"==typeof n.className&&e.push(n.className),!0===n.wide&&e.push(B.OptionsWide),e.join(" ")}function _(){const[n,e]=s.useState("M");return(0,i.jsxs)(I,{label:"Select a size",value:n,onChange:e,children:[(0,i.jsx)("div",{children:"Extra Small"},"S"),(0,i.jsx)("div",{children:"Small"},"S"),(0,i.jsx)("div",{children:"Medium"},"M"),(0,i.jsx)("div",{children:"Large"},"L"),(0,i.jsx)("div",{children:"Extra Large"},"XL")]})}function k(){return(0,i.jsx)(t.A,{title:'import { ViewOptions } from "@tolokoban/ui"',children:(0,i.jsx)(l.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewOptions } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [value, setValue] = React.useState("M")\n    return (\n        <ViewOptions label="Select a size" value={value} onChange={setValue}>\n            <div key="S">Extra Small</div>\n            <div key="S">Small</div>\n            <div key="M">Medium</div>\n            <div key="L">Large</div>\n            <div key="XL">Extra Large</div>\n        </ViewOptions>\n    )\n}\n',children:(0,i.jsx)(_,{})})})}function j(){return(0,i.jsx)(k,{})}},9870:(n,e,o)=>{o.d(e,{H:()=>t});var i=o(6540);function t(n){const[e,o]=i.useState(n.value);return i.useEffect((()=>{o(n.value)}),[n.value]),[e,e=>{var i;o(e),null===(i=n.onChange)||void 0===i||i.call(n,e)}]}},5895:(n,e,o)=>{o.d(e,{a:()=>f});var i=o(4848),t=o(6540),l=o(9142),s=o(5072),a=o.n(s),r=o(7825),d=o.n(r),A=o(7659),c=o.n(A),p=o(5056),u=o.n(p),m=o(540),b=o.n(m),v=o(1113),h=o.n(v),C=o(5036),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=c().bind(null,"head"),g.domAPI=d(),g.insertStyleElement=b(),a()(C.A,g);const O=C.A&&C.A.locals?C.A.locals:void 0,w=l.A.classNames;function f({color:n,className:e,value:o,title:l,children:s}){const a=`labelled/${t.useId()}`;if(!o)return(0,i.jsx)(i.Fragment,{children:s});const r={};return n&&(r.color=`var(--theme-color-${n})`),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("label",{htmlFor:a,title:l,className:w.join(e,O.Label),style:r,children:o}),s&&(0,i.jsx)("div",{id:a,className:O.LabelContent,children:s})]})}},6516:(n,e,o)=>{o.d(e,{t:()=>w});var i=o(4848),t=o(9142),l=o(5072),s=o.n(l),a=o(7825),r=o.n(a),d=o(7659),A=o.n(d),c=o(5056),p=o.n(c),u=o(540),m=o.n(u),b=o(1113),v=o.n(b),h=o(7872),C={};C.styleTagTransform=v(),C.setAttributes=p(),C.insert=A().bind(null,"head"),C.domAPI=r(),C.insertStyleElement=m(),s()(h.A,C);const g=h.A&&h.A.locals?h.A.locals:void 0,O=t.A.classNames;function w({className:n,children:e,tag:o,tooltip:t,onClick:l}){return l?(0,i.jsx)("div",{className:O.join(n,g.Touchable),title:t,onClick:()=>l(o),children:e}):(0,i.jsx)(i.Fragment,{children:e})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,