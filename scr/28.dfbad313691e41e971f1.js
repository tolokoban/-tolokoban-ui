"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[28],{3514:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),a=i.n(t),o=i(6314),r=i.n(o)()(a());r.push([e.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),r.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const s=r},6630:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),a=i.n(t),o=i(6314),r=i.n(o)()(a());r.push([e.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),r.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const s=r},7599:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),a=i.n(t),o=i(6314),r=i.n(o)()(a());r.push([e.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),r.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const s=r},3714:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),a=i.n(t),o=i(6314),r=i.n(o)()(a());r.push([e.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),r.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const s=r},3906:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),a=i.n(t),o=i(6314),r=i.n(o)()(a());r.push([e.id,"div.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 {\n    display: grid;\n    grid-template-columns: 1fr min(50vw, 360px) min(50vw, 360px) 1fr;\n    justify-content: center;\n    align-items: stretch;\n}\n\ndiv.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > * {\n    grid-column: 2/4;\n}\n\ndiv.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > *.full {\n    grid-column: 1/5;\n}\n\ndiv.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > *.left {\n    grid-column: 1/3;\n    place-content: start stretch;\n}\n\ndiv.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > *.right {\n    grid-column: 3/5;\n    place-content: start stretch;\n}\n\n@media (max-width: 800px) {\n    div.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > *,\n    div.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > *.left,\n    div.\\---lib-dist-view-Read-Read-module_Read_mLeWs1 > *.right {\n        grid-column: 1/5;\n    }\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Read/Read.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,gEAAgE;IAChE,uBAAuB;IACvB,oBAAoB;AACxB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI;;;QAGI,gBAAgB;IACpB;AACJ",sourcesContent:["div.Read {\n    display: grid;\n    grid-template-columns: 1fr min(50vw, 360px) min(50vw, 360px) 1fr;\n    justify-content: center;\n    align-items: stretch;\n}\n\ndiv.Read > * {\n    grid-column: 2/4;\n}\n\ndiv.Read > :global(*.full) {\n    grid-column: 1/5;\n}\n\ndiv.Read > :global(*.left) {\n    grid-column: 1/3;\n    place-content: start stretch;\n}\n\ndiv.Read > :global(*.right) {\n    grid-column: 3/5;\n    place-content: start stretch;\n}\n\n@media (max-width: 800px) {\n    div.Read > *,\n    div.Read > :global(*.left),\n    div.Read > :global(*.right) {\n        grid-column: 1/5;\n    }\n}\n"],sourceRoot:""}]),r.locals={Read:"---lib-dist-view-Read-Read-module_Read_mLeWs1"};const s=r},7028:(e,n,i)=>{i.r(n),i.d(n,{default:()=>B});var t=i(4848),a=i(2296),o=i(8464),r=i(6781),s=i(5072),l=i.n(s),u=i(7825),c=i.n(u),m=i(7659),d=i.n(m),A=i(5056),h=i.n(A),g=i(540),p=i.n(g),v=i(1113),C=i.n(v),w=i(3906),b={};b.styleTagTransform=C(),b.setAttributes=h(),b.insert=d().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=p(),l()(w.A,b);const x=w.A&&w.A.locals?w.A.locals:void 0,f=r.Sx.classNames;function I({className:e,children:n}){return(0,t.jsx)("div",{className:f.join(e,x.Read),children:n})}function R(){return(0,t.jsxs)(I,{children:[(0,t.jsx)("p",{children:"Corporis eos consequuntur sed voluptatibus velit. Et ipsam repudiandae voluptatum dolorem in. Odio saepe in iure consequatur voluptatem incidunt. Libero et omnis ut et nobis et. Voluptatum ab laborum nam ut accusantium sunt veniam vitae."}),(0,t.jsx)("p",{children:"In quia voluptatem qui architecto perferendis pariatur aut. Architecto sed non nihil ex. Commodi inventore accusantium velit quibusdam dicta assumenda. Est doloribus ipsam excepturi dignissimos consequatur rerum a sit. Veritatis dolores praesentium facilis praesentium pariatur repellat nisi quam. Quis quia temporibus eligendi aut."}),(0,t.jsx)("p",{children:"Cumque autem esse quia asperiores nam facere et rerum. Tempora et pariatur iure sint ab aut ipsa. Ipsa totam ut sapiente vel occaecati officia atque sed. Sunt ut minima dolorem repellat. Mollitia ut aut perferendis autem ut qui totam."}),(0,t.jsx)("p",{children:"Aliquid aspernatur aut velit ipsum alias culpa architecto id. Minus quisquam earum ut incidunt eveniet sint consequatur. Similique eaque in explicabo veritatis quia. Voluptatem ipsam iusto et eos eaque. Eum sunt et perspiciatis assumenda expedita."})]})}function _(){return(0,t.jsx)(a.A,{title:'import { ViewRead } from "@tolokoban/ui"',children:(0,t.jsx)(o.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewRead } from "@tolokoban/ui"\n\nexport default function Demo() {\n    return (\n        <ViewRead>\n            <p>\n                Corporis eos consequuntur sed voluptatibus velit. Et ipsam\n                repudiandae voluptatum dolorem in. Odio saepe in iure\n                consequatur voluptatem incidunt. Libero et omnis ut et nobis et.\n                Voluptatum ab laborum nam ut accusantium sunt veniam vitae.\n            </p>\n            <p>\n                In quia voluptatem qui architecto perferendis pariatur aut.\n                Architecto sed non nihil ex. Commodi inventore accusantium velit\n                quibusdam dicta assumenda. Est doloribus ipsam excepturi\n                dignissimos consequatur rerum a sit. Veritatis dolores\n                praesentium facilis praesentium pariatur repellat nisi quam.\n                Quis quia temporibus eligendi aut.\n            </p>\n            <p>\n                Cumque autem esse quia asperiores nam facere et rerum. Tempora\n                et pariatur iure sint ab aut ipsa. Ipsa totam ut sapiente vel\n                occaecati officia atque sed. Sunt ut minima dolorem repellat.\n                Mollitia ut aut perferendis autem ut qui totam.\n            </p>\n            <p>\n                Aliquid aspernatur aut velit ipsum alias culpa architecto id.\n                Minus quisquam earum ut incidunt eveniet sint consequatur.\n                Similique eaque in explicabo veritatis quia. Voluptatem ipsam\n                iusto et eos eaque. Eum sunt et perspiciatis assumenda expedita.\n            </p>\n        </ViewRead>\n    )\n}\n',children:(0,t.jsx)(R,{})})})}function B(){return(0,t.jsx)(_,{})}},9327:(e,n,i)=>{i.d(n,{f:()=>x});var t=i(4848),a=i(9309);function o(e,n="    ",i=-1){const t="".padEnd(Math.max(0,i)*n.length,n);return"string"==typeof e?`${t}${e}`:e.map((e=>o(e,n,i+1))).join("\n")}var r=i(5072),s=i.n(r),l=i(7825),u=i.n(l),c=i(7659),m=i.n(c),d=i(5056),A=i.n(d),h=i(540),g=i.n(h),p=i(1113),v=i.n(p),C=i(6630),w={};w.styleTagTransform=v(),w.setAttributes=A(),w.insert=m().bind(null,"head"),w.domAPI=u(),w.insertStyleElement=g(),s()(C.A,w);const b=C.A&&C.A.locals?C.A.locals:void 0;function x(e){var n;return(0,t.jsx)(a.A,{className:f(e),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:o(null!==(n=e.children)&&void 0!==n?n:"")})}function f({className:e}){const n=[b.Highlight];return e&&n.push(e),n.join(" ")}},8464:(e,n,i)=>{i.d(n,{A:()=>E});var t=i(4848),a=i(6781),o=i(7049),r=i(6540),s=i(9550),l=i(2182),u=i(5726),c=i(9327),m=i(5072),d=i.n(m),A=i(7825),h=i.n(A),g=i(7659),p=i.n(g),v=i(5056),C=i.n(v),w=i(540),b=i.n(w),x=i(1113),f=i.n(x),I=i(3514),R={};R.styleTagTransform=f(),R.setAttributes=C(),R.insert=p().bind(null,"head"),R.domAPI=h(),R.insertStyleElement=b(),d()(I.A,R);const _=I.A&&I.A.locals?I.A.locals:void 0,B=a.Sx.classNames;function j({className:e,children:n}){const[i,a]=r.useState(!1);return(0,t.jsxs)("div",{className:B.join(e,_.Code),children:[(0,t.jsxs)(s.y,{variant:"text",onClick:()=>a(!i),children:[i?(0,t.jsx)(l.A,{}):(0,t.jsx)(u.A,{}),(0,t.jsx)("div",{children:"Example's code:"})]}),i&&(0,t.jsx)(c.f,{children:n})]})}var y=i(7599),H={};H.styleTagTransform=f(),H.setAttributes=C(),H.insert=p().bind(null,"head"),H.domAPI=h(),H.insertStyleElement=b(),d()(y.A,H);const q=y.A&&y.A.locals?y.A.locals:void 0,V=a.Sx.classNames;function E({className:e,example:n,children:i}){return(0,t.jsxs)(o.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,t.jsx)("div",{className:V.join(e,q.ViewDemo),children:i}),(0,t.jsx)("hr",{}),(0,t.jsx)(j,{children:n})]})}},2296:(e,n,i)=>{i.d(n,{A:()=>f});var t=i(4848),a=i(6781),o=i(7049),r=i(5072),s=i.n(r),l=i(7825),u=i.n(l),c=i(7659),m=i.n(c),d=i(5056),A=i.n(d),h=i(540),g=i.n(h),p=i(1113),v=i.n(p),C=i(3714),w={};w.styleTagTransform=v(),w.setAttributes=A(),w.insert=m().bind(null,"head"),w.domAPI=u(),w.insertStyleElement=g(),s()(C.A,w);const b=C.A&&C.A.locals?C.A.locals:void 0,x=a.Sx.classNames;function f({className:e,title:n,children:i}){return(0,t.jsxs)("div",{className:x.join(e,b.ViewDocumentation),children:[(0,t.jsx)(o.s,{margin:0,padding:"M",color:"primary-2",children:n}),(0,t.jsx)(o.s,{margin:0,padding:"M",overflow:"auto",children:i})]})}},2182:(e,n,i)=>{i.d(n,{A:()=>t});const t=(0,i(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(e,n,i)=>{i.d(n,{A:()=>t});const t=(0,i(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,