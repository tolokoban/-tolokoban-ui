"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[144],{3514:(n,e,i)=>{i.d(e,{A:()=>r});var o=i(1354),l=i.n(o),s=i(6314),t=i.n(s)()(l());t.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),t.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const r=t},6630:(n,e,i)=>{i.d(e,{A:()=>r});var o=i(1354),l=i.n(o),s=i(6314),t=i.n(s)()(l());t.push([n.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),t.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const r=t},7599:(n,e,i)=>{i.d(e,{A:()=>r});var o=i(1354),l=i.n(o),s=i(6314),t=i.n(s)()(l());t.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),t.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const r=t},3714:(n,e,i)=>{i.d(e,{A:()=>r});var o=i(1354),l=i.n(o),s=i(6314),t=i.n(s)()(l());t.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),t.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const r=t},8286:(n,e,i)=>{i.d(e,{A:()=>r});var o=i(1354),l=i.n(o),s=i(6314),t=i.n(s)()(l());t.push([n.id,".\\---lib-dist-view-Chip-Chip-module_main_T6RXnH {\n    font: inherit;\n    border: none;\n    box-shadow: none;\n    text-decoration: none;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin: 0.25rem;\n    cursor: pointer;\n    border-radius: 200vmax;\n    font-size: 80%;\n    padding: 0;\n    line-height: 1.5;\n    max-height: 1.5em;\n    overflow: hidden;\n}\n\n.\\---lib-dist-view-Chip-Chip-module_main_T6RXnH.\\---lib-dist-view-Chip-Chip-module_outline_v5pSqQ {\n    border: 1px solid currentColor;\n}\n\n.\\---lib-dist-view-Chip-Chip-module_main_T6RXnH > svg {\n    width: 1.5em;\n    height: 1.5em;\n}\n\n.\\---lib-dist-view-Chip-Chip-module_main_T6RXnH > div.\\---lib-dist-view-Chip-Chip-module_thumbnail_fWCBPl {\n    overflow: hidden;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n}\n\n.\\---lib-dist-view-Chip-Chip-module_main_T6RXnH > div.\\---lib-dist-view-Chip-Chip-module_label_Okk_sc {\n    margin: 0 0.5em;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Chip/Chip.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,qBAAqB;IACrB,oBAAoB;IACpB,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,cAAc;IACd,UAAU;IACV,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,eAAe;AACnB",sourcesContent:[".main {\n    font: inherit;\n    border: none;\n    box-shadow: none;\n    text-decoration: none;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    margin: 0.25rem;\n    cursor: pointer;\n    border-radius: 200vmax;\n    font-size: 80%;\n    padding: 0;\n    line-height: 1.5;\n    max-height: 1.5em;\n    overflow: hidden;\n}\n\n.main.outline {\n    border: 1px solid currentColor;\n}\n\n.main > svg {\n    width: 1.5em;\n    height: 1.5em;\n}\n\n.main > div.thumbnail {\n    overflow: hidden;\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n}\n\n.main > div.label {\n    margin: 0 0.5em;\n}\n"],sourceRoot:""}]),t.locals={main:"---lib-dist-view-Chip-Chip-module_main_T6RXnH",outline:"---lib-dist-view-Chip-Chip-module_outline_v5pSqQ",thumbnail:"---lib-dist-view-Chip-Chip-module_thumbnail_fWCBPl",label:"---lib-dist-view-Chip-Chip-module_label_Okk_sc"};const r=t},4144:(n,e,i)=>{i.r(e),i.d(e,{default:()=>H});var o=i(4848),l=i(2296),s=i(8464),t=i(6781),r=i(855),a=i(5072),h=i.n(a),A=i(7825),d=i.n(A),c=i(7659),m=i.n(c),C=i(5056),g=i.n(C),u=i(540),p=i.n(u),v=i(1113),b=i.n(v),w=i(8286),x={};x.styleTagTransform=b(),x.setAttributes=g(),x.insert=m().bind(null,"head"),x.domAPI=d(),x.insertStyleElement=p(),h()(w.A,x);const f=w.A&&w.A.locals?w.A.locals:void 0,B={XXS:25,XS:50,S:70,M:80,L:100,XL:200,XXL:400};function I(n){const{thumbnail:e,label:i,removable:l,tag:s,outline:a,size:h="M",onClick:A,onRemove:d}=n;return(0,o.jsxs)("button",{className:t.Sx.classNames.join(n.className,f.main,a&&f.outline),style:Object.assign(Object.assign({},(0,r.B)(n)),{fontSize:`${B[h]}%`}),onClick:()=>{A&&A(s)},children:[e&&(0,o.jsx)("div",{className:f.thumbnail,children:e}),(0,o.jsx)("div",{className:f.label,children:i}),!0===l&&(0,o.jsx)("svg",{viewBox:"0 0 24 24",onClick:n=>{d&&(n.preventDefault(),n.stopPropagation(),d(s))},children:(0,o.jsx)("path",{fill:"currentColor",d:"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z"})})]})}function j(){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{children:[(0,o.jsx)(I,{label:"Default Chip"}),(0,o.jsx)(I,{label:"Removable Chip",removable:!0}),(0,o.jsx)(I,{label:"Colored Chip",color:"primary-5"}),(0,o.jsx)(I,{label:"Shadowed Chip",color:"secondary-5",shadow:3}),(0,o.jsx)(I,{label:"Disabled Chip",enabled:!1}),(0,o.jsx)(I,{label:"Outlined Chip",outline:!0})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)(I,{label:"XXS sized Chip",size:"XXS"}),(0,o.jsx)(I,{label:"XS sized Chip",size:"XS"}),(0,o.jsx)(I,{label:"S sized Chip",size:"S"}),(0,o.jsx)(I,{label:"M sized Chip",size:"M"}),(0,o.jsx)(I,{label:"L sized Chip",size:"L"}),(0,o.jsx)(I,{label:"XL sized Chip",size:"XL"}),(0,o.jsx)(I,{label:"XXL sized Chip",size:"XXL"})]})]})}function _(){return(0,o.jsx)(l.A,{title:'import { ViewChip } from "@tolokoban/ui"',children:(0,o.jsx)(s.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewChip } from "@tolokoban/ui"\n\nexport default function Demo() {\n    return (\n        <>\n            <div>\n                <ViewChip label="Default Chip" />\n                <ViewChip label="Removable Chip" removable />\n                <ViewChip label="Colored Chip" color="primary-5" />\n                <ViewChip\n                    label="Shadowed Chip"\n                    color="secondary-5"\n                    shadow={3}\n                />\n                <ViewChip label="Disabled Chip" enabled={false} />\n                <ViewChip label="Outlined Chip" outline />\n            </div>\n            <div>\n                <ViewChip label="XXS sized Chip" size="XXS" />\n                <ViewChip label="XS sized Chip" size="XS" />\n                <ViewChip label="S sized Chip" size="S" />\n                <ViewChip label="M sized Chip" size="M" />\n                <ViewChip label="L sized Chip" size="L" />\n                <ViewChip label="XL sized Chip" size="XL" />\n                <ViewChip label="XXL sized Chip" size="XXL" />\n            </div>\n        </>\n    )\n}\n',children:(0,o.jsx)(j,{})})})}function H(){return(0,o.jsx)(_,{})}},9327:(n,e,i)=>{i.d(e,{f:()=>x});var o=i(4848),l=i(9309);function s(n,e="    ",i=-1){const o="".padEnd(Math.max(0,i)*e.length,e);return"string"==typeof n?`${o}${n}`:n.map((n=>s(n,e,i+1))).join("\n")}var t=i(5072),r=i.n(t),a=i(7825),h=i.n(a),A=i(7659),d=i.n(A),c=i(5056),m=i.n(c),C=i(540),g=i.n(C),u=i(1113),p=i.n(u),v=i(6630),b={};b.styleTagTransform=p(),b.setAttributes=m(),b.insert=d().bind(null,"head"),b.domAPI=h(),b.insertStyleElement=g(),r()(v.A,b);const w=v.A&&v.A.locals?v.A.locals:void 0;function x(n){var e;return(0,o.jsx)(l.A,{className:f(n),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:s(null!==(e=n.children)&&void 0!==e?e:"")})}function f({className:n}){const e=[w.Highlight];return n&&e.push(n),e.join(" ")}},8464:(n,e,i)=>{i.d(e,{A:()=>k});var o=i(4848),l=i(6781),s=i(7049),t=i(6540),r=i(9550),a=i(2182),h=i(5726),A=i(9327),d=i(5072),c=i.n(d),m=i(7825),C=i.n(m),g=i(7659),u=i.n(g),p=i(5056),v=i.n(p),b=i(540),w=i.n(b),x=i(1113),f=i.n(x),B=i(3514),I={};I.styleTagTransform=f(),I.setAttributes=v(),I.insert=u().bind(null,"head"),I.domAPI=C(),I.insertStyleElement=w(),c()(B.A,I);const j=B.A&&B.A.locals?B.A.locals:void 0,_=l.Sx.classNames;function H({className:n,children:e}){const[i,l]=t.useState(!1);return(0,o.jsxs)("div",{className:_.join(n,j.Code),children:[(0,o.jsxs)(r.y,{variant:"text",onClick:()=>l(!i),children:[i?(0,o.jsx)(a.A,{}):(0,o.jsx)(h.A,{}),(0,o.jsx)("div",{children:"Example's code:"})]}),i&&(0,o.jsx)(A.f,{children:e})]})}var y=i(7599),V={};V.styleTagTransform=f(),V.setAttributes=v(),V.insert=u().bind(null,"head"),V.domAPI=C(),V.insertStyleElement=w(),c()(y.A,V);const X=y.A&&y.A.locals?y.A.locals:void 0,z=l.Sx.classNames;function k({className:n,example:e,children:i}){return(0,o.jsxs)(s.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,o.jsx)("div",{className:z.join(n,X.ViewDemo),children:i}),(0,o.jsx)("hr",{}),(0,o.jsx)(H,{children:e})]})}},2296:(n,e,i)=>{i.d(e,{A:()=>f});var o=i(4848),l=i(6781),s=i(7049),t=i(5072),r=i.n(t),a=i(7825),h=i.n(a),A=i(7659),d=i.n(A),c=i(5056),m=i.n(c),C=i(540),g=i.n(C),u=i(1113),p=i.n(u),v=i(3714),b={};b.styleTagTransform=p(),b.setAttributes=m(),b.insert=d().bind(null,"head"),b.domAPI=h(),b.insertStyleElement=g(),r()(v.A,b);const w=v.A&&v.A.locals?v.A.locals:void 0,x=l.Sx.classNames;function f({className:n,title:e,children:i}){return(0,o.jsxs)("div",{className:x.join(n,w.ViewDocumentation),children:[(0,o.jsx)(s.s,{margin:0,padding:"M",color:"primary-2",children:e}),(0,o.jsx)(s.s,{margin:0,padding:"M",overflow:"auto",children:i})]})}},2182:(n,e,i)=>{i.d(e,{A:()=>o});const o=(0,i(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(n,e,i)=>{i.d(e,{A:()=>o});const o=(0,i(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,