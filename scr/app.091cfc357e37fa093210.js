(()=>{"use strict";var e,t,n,i={9165:(e,t,n)=>{n.d(t,{A:()=>r});var i=n(1354),a=n.n(i),o=n(6314),l=n.n(o)()(a());l.push([e.id,'html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B",sourcesContent:['html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n'],sourceRoot:""}]);const r=l},1864:(e,t,n)=>{n.d(t,{A:()=>r});var i=n(1354),a=n.n(i),o=n(6314),l=n.n(o)()(a());l.push([e.id,".src-view-Link-Link-module_Link_IxAcjz,\n.src-view-Link-Link-module_Link_IxAcjz:visited {\n    all: inherit;\n    display: inline-block;\n    line-height: 2;\n    padding: 0 0.5em;\n    text-align: left;\n    background-color: var(--theme-color-secondary-4);\n    color: var(--theme-color-on-secondary-4);\n    transition: all 0.2s;\n    cursor: pointer;\n    margin: 0.125em;\n    font-weight: bold;\n}\n\n.src-view-Link-Link-module_Link_IxAcjz:hover {\n    background-color: var(--theme-color-secondary-6);\n    color: var(--theme-color-on-secondary-6);\n}\n","",{version:3,sources:["webpack://./src/view/Link/Link.module.css"],names:[],mappings:"AAAA;;IAEI,YAAY;IACZ,qBAAqB;IACrB,cAAc;IACd,gBAAgB;IAChB,gBAAgB;IAChB,gDAAgD;IAChD,wCAAwC;IACxC,oBAAoB;IACpB,eAAe;IACf,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,gDAAgD;IAChD,wCAAwC;AAC5C",sourcesContent:[".Link,\n.Link:visited {\n    all: inherit;\n    display: inline-block;\n    line-height: 2;\n    padding: 0 0.5em;\n    text-align: left;\n    background-color: var(--theme-color-secondary-4);\n    color: var(--theme-color-on-secondary-4);\n    transition: all 0.2s;\n    cursor: pointer;\n    margin: 0.125em;\n    font-weight: bold;\n}\n\n.Link:hover {\n    background-color: var(--theme-color-secondary-6);\n    color: var(--theme-color-on-secondary-6);\n}\n"],sourceRoot:""}]),l.locals={Link:"src-view-Link-Link-module_Link_IxAcjz"};const r=l},3926:(e,t,n)=>{n.d(t,{A:()=>r});var i=n(1354),a=n.n(i),o=n(6314),l=n.n(o)()(a());l.push([e.id,'* {\n    box-sizing: border-box;\n}\n\nb {\n    margin: 0 0.3em;\n}\n\n/**\n * Aspect ratio\n * Example: <div style="--custom-aspect-ratio=16/9">...</div>\n */\n[style*="--custom-aspect-ratio"] > :first-child {\n    width: 100%;\n}\n[style*="--custom-aspect-ratio"] > img {\n    height: auto;\n}\n@supports (--custom: property) {\n    [style*="--custom-aspect-ratio"] {\n        position: relative;\n    }\n    [style*="--custom-aspect-ratio"]::before {\n        content: "";\n        display: block;\n        padding-bottom: calc(100% / (var(--custom-aspect-ratio)));\n    }\n    [style*="--custom-aspect-ratio"] > :first-child {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n    }\n}\n',"",{version:3,sources:["webpack://./../lib/dist/theme/theme.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;;;EAGE;AACF;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;AACA;IACI;QACI,kBAAkB;IACtB;IACA;QACI,WAAW;QACX,cAAc;QACd,yDAAyD;IAC7D;IACA;QACI,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,YAAY;IAChB;AACJ",sourcesContent:['* {\n    box-sizing: border-box;\n}\n\nb {\n    margin: 0 0.3em;\n}\n\n/**\n * Aspect ratio\n * Example: <div style="--custom-aspect-ratio=16/9">...</div>\n */\n[style*="--custom-aspect-ratio"] > :first-child {\n    width: 100%;\n}\n[style*="--custom-aspect-ratio"] > img {\n    height: auto;\n}\n@supports (--custom: property) {\n    [style*="--custom-aspect-ratio"] {\n        position: relative;\n    }\n    [style*="--custom-aspect-ratio"]::before {\n        content: "";\n        display: block;\n        padding-bottom: calc(100% / (var(--custom-aspect-ratio)));\n    }\n    [style*="--custom-aspect-ratio"] > :first-child {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n    }\n}\n'],sourceRoot:""}]);const r=l},6380:(e,t,n)=>{n.d(t,{A:()=>r});var i=n(1354),a=n.n(i),o=n(6314),l=n.n(o)()(a());l.push([e.id,".\\---lib-dist-view-Panel-Panel-module_Panel_hjkVuc {\n    margin: 0;\n    padding: 0;\n}\n\n.\\---lib-dist-view-Panel-Panel-module_Panel_hjkVuc > *.flex-0 {\n    flex: 0 0 auto;\n}\n\n.\\---lib-dist-view-Panel-Panel-module_Panel_hjkVuc > *.flex-1 {\n    flex: 1 1 auto;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Panel/Panel.module.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".Panel {\n    margin: 0;\n    padding: 0;\n}\n\n.Panel > :global(*.flex-0) {\n    flex: 0 0 auto;\n}\n\n.Panel > :global(*.flex-1) {\n    flex: 1 1 auto;\n}\n"],sourceRoot:""}]),l.locals={Panel:"---lib-dist-view-Panel-Panel-module_Panel_hjkVuc"};const r=l},299:(e,t,n)=>{var i=n(4848),a=n(6540),o=n(5338),l=n(9142);const r={"/":["/"],"/test":["/test"],"/view":["/view"],"/view/Button":["/view/Button"],"/view/CodeHighlighter":["/view/CodeHighlighter"],"/view/Dialog":["/view/Dialog"],"/view/FloatingButton":["/view/FloatingButton"],"/view/InputColor":["/view/InputColor"],"/view/InputFile":["/view/InputFile"],"/view/InputImage":["/view/InputImage"],"/view/InputMultiText":["/view/InputMultiText"],"/view/InputText":["/view/InputText"],"/view/Label":["/view/Label"],"/view/Options":["/view/Options"],"/view/Panel":["/view/Panel"],"/view/Read":["/view/Read"],"/view/Scroll":["/view/Scroll"],"/view/Slider":["/view/Slider"],"/view/Spinner":["/view/Spinner"],"/view/Strip":["/view/Strip"],"/view/Switch":["/view/Switch"],"/view/Tabs":["/view/Tabs"],"/view/Touchable":["/view/Touchable"]};function s(e,t){if(!t)return null;let n=e;const i={};for(let e=0;e<t.length;e++){if(n.length<1)return null;const a=t[e];if(a.startsWith("[")){const e=a.substring(1,a.length-1),[t,o]=c(n);i[e]=t,n=o}else{if(!n.startsWith(a))return null;n=n.substring(a.length+1)}}return{path:e,route:t.join("/"),params:i,distance:n.length}}function c(e){const t=e.indexOf("/");return t<0?[e,""]:[e.substring(0,t),e.substring(t+1)]}const h=new class{constructor(){this.listeners=new Set,this._value=null,this._hash="",this.handleHashChange=e=>{const t=this.extractHash(e.oldURL),n=this.extractHash(e.newURL),i=this.ensureAbsoluteHash(n,t);i!==n&&history.replaceState({},"",`#${i}`),this.setHash(i)},this.nonEmpty=e=>"string"==typeof e&&e.trim().length>0,this.setHash(this.extractHash(window.location.href)),window.addEventListener("hashchange",this.handleHashChange)}addListener(e){this.listeners.add(e)}removeListener(e){this.listeners.delete(e)}get value(){return this._value}setHash(e){if(this._hash===e)return;this._hash=e;const t=function(e){let t=null;for(const n of Object.values(r)){const i=s(e,n);if(i){if(0===i.distance)return i;(!t||i.distance<t.distance)&&(t=i)}}return t}(e);this._value=t,this.listeners.forEach((e=>e(t)))}extractHash(e){const t=new URL(e).hash;return t?t.startsWith("#")?t.substring(1):t:"/"}ensureAbsoluteHash(e,t){if(e.startsWith("/"))return e;let n=e;for(;n.startsWith("./");)n=n.substring(2);const i=t.split("/").filter(this.nonEmpty);for(const t of e.split("/"))".."===t?i.length>0&&i.pop():i.push(t);return`/${i.filter(this.nonEmpty).join("/")}`}};var d=n(7049),u=n(3991);function p({children:e}){return(0,i.jsxs)(d.s,{display:"flex",alignItems:"stretch",height:"100%",children:[(0,i.jsxs)(d.s,{display:"flex",flexDirection:"column",alignItems:"stretch",padding:"M",overflow:"auto",color:"primary-2",children:[(0,i.jsx)(u.A,{hash:"/view/Button",children:"Button"}),(0,i.jsx)(u.A,{hash:"/view/CodeHighlighter",children:"CodeHighlighter"}),(0,i.jsx)(u.A,{hash:"/view/Dialog",children:"Dialog"}),(0,i.jsx)(u.A,{hash:"/view/FloatingButton",children:"FloatingButton"}),(0,i.jsx)(u.A,{hash:"/view/InputColor",children:"InputColor"}),(0,i.jsx)(u.A,{hash:"/view/InputFile",children:"InputFile"}),(0,i.jsx)(u.A,{hash:"/view/InputImage",children:"InputImage"}),(0,i.jsx)(u.A,{hash:"/view/InputMultiText",children:"InputMultiText"}),(0,i.jsx)(u.A,{hash:"/view/InputText",children:"InputText"}),(0,i.jsx)(u.A,{hash:"/view/Label",children:"Label"}),(0,i.jsx)(u.A,{hash:"/view/Options",children:"Options"}),(0,i.jsx)(u.A,{hash:"/view/Panel",children:"Panel"}),(0,i.jsx)(u.A,{hash:"/view/Read",children:"Read"}),(0,i.jsx)(u.A,{hash:"/view/Scroll",children:"Scroll"}),(0,i.jsx)(u.A,{hash:"/view/Slider",children:"Slider"}),(0,i.jsx)(u.A,{hash:"/view/Spinner",children:"Spinner"}),(0,i.jsx)(u.A,{hash:"/view/Strip",children:"Strip"}),(0,i.jsx)(u.A,{hash:"/view/Switch",children:"Switch"}),(0,i.jsx)(u.A,{hash:"/view/Tabs",children:"Tabs"}),(0,i.jsx)(u.A,{hash:"/view/Touchable",children:"Touchable"})]}),(0,i.jsx)(d.s,{color:"neutral-5",flex:"1 1 auto",children:e})]})}const f=a.lazy((()=>n.e(582).then(n.bind(n,8582)))),m=a.lazy((()=>n.e(833).then(n.bind(n,8833)))),g=a.lazy((()=>n.e(248).then(n.bind(n,6248)))),A=a.lazy((()=>Promise.all([n.e(352),n.e(571)]).then(n.bind(n,7571)))),v=a.lazy((()=>Promise.all([n.e(352),n.e(321)]).then(n.bind(n,5321)))),b=a.lazy((()=>Promise.all([n.e(352),n.e(787)]).then(n.bind(n,5787)))),w=a.lazy((()=>Promise.all([n.e(352),n.e(178)]).then(n.bind(n,8178)))),x=a.lazy((()=>Promise.all([n.e(352),n.e(25)]).then(n.bind(n,9025)))),y=a.lazy((()=>Promise.all([n.e(352),n.e(201)]).then(n.bind(n,201)))),j=a.lazy((()=>Promise.all([n.e(352),n.e(161)]).then(n.bind(n,7702)))),k=a.lazy((()=>Promise.all([n.e(352),n.e(213)]).then(n.bind(n,9213)))),C=a.lazy((()=>Promise.all([n.e(352),n.e(765)]).then(n.bind(n,4765)))),I=a.lazy((()=>Promise.all([n.e(352),n.e(179)]).then(n.bind(n,7179)))),S=a.lazy((()=>Promise.all([n.e(352),n.e(695)]).then(n.bind(n,9695)))),P=a.lazy((()=>Promise.all([n.e(352),n.e(859)]).then(n.bind(n,5859)))),B=a.lazy((()=>Promise.all([n.e(352),n.e(28)]).then(n.bind(n,7028)))),$=a.lazy((()=>Promise.all([n.e(352),n.e(416)]).then(n.bind(n,1416)))),L=a.lazy((()=>Promise.all([n.e(352),n.e(123)]).then(n.bind(n,6123)))),T=a.lazy((()=>Promise.all([n.e(352),n.e(660)]).then(n.bind(n,8660)))),D=a.lazy((()=>Promise.all([n.e(352),n.e(572)]).then(n.bind(n,5572)))),O=a.lazy((()=>Promise.all([n.e(352),n.e(70)]).then(n.bind(n,4070)))),R=a.lazy((()=>Promise.all([n.e(352),n.e(226)]).then(n.bind(n,9226)))),E=a.lazy((()=>Promise.all([n.e(352),n.e(694)]).then(n.bind(n,7694))));function z({lang:e}){const t=(0,i.jsx)("div",{children:"Loading..."}),n=f,a=m,o=p,l=g,r=A,s=v,c=b,h=w,d=x,u=y,z=j,M=k,G=C,H=I,X=S,F=P,W=B,N=$,V=L,Y=T,Q=D,U=O,q=R,Z=E;return(0,i.jsxs)(_,{path:"/",Page:n,fallback:t,children:[(0,i.jsx)(_,{path:"/test",Page:a,fallback:t}),(0,i.jsxs)(_,{path:"/view",Page:l,Layout:o,fallback:t,children:[(0,i.jsx)(_,{path:"/view/Button",Page:r,fallback:t,children:(0,i.jsx)(_,{path:"/view/Button/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Button/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/CodeHighlighter",Page:s,fallback:t,children:(0,i.jsx)(_,{path:"/view/CodeHighlighter/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/CodeHighlighter/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Dialog",Page:c,fallback:t,children:(0,i.jsx)(_,{path:"/view/Dialog/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Dialog/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/FloatingButton",Page:h,fallback:t,children:(0,i.jsx)(_,{path:"/view/FloatingButton/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/FloatingButton/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/InputColor",Page:d,fallback:t,children:(0,i.jsx)(_,{path:"/view/InputColor/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/InputColor/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/InputFile",Page:u,fallback:t,children:(0,i.jsx)(_,{path:"/view/InputFile/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/InputFile/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/InputImage",Page:z,fallback:t,children:(0,i.jsx)(_,{path:"/view/InputImage/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/InputImage/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/InputMultiText",Page:M,fallback:t,children:(0,i.jsx)(_,{path:"/view/InputMultiText/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/InputMultiText/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/InputText",Page:G,fallback:t,children:(0,i.jsx)(_,{path:"/view/InputText/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/InputText/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Label",Page:H,fallback:t,children:(0,i.jsx)(_,{path:"/view/Label/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Label/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Options",Page:X,fallback:t,children:(0,i.jsx)(_,{path:"/view/Options/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Options/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Panel",Page:F,fallback:t,children:(0,i.jsx)(_,{path:"/view/Panel/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Panel/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Read",Page:W,fallback:t,children:(0,i.jsx)(_,{path:"/view/Read/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Read/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Scroll",Page:N,fallback:t,children:(0,i.jsx)(_,{path:"/view/Scroll/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Scroll/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Slider",Page:V,fallback:t,children:(0,i.jsx)(_,{path:"/view/Slider/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Slider/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Spinner",Page:Y,fallback:t,children:(0,i.jsx)(_,{path:"/view/Spinner/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Spinner/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Strip",Page:Q,fallback:t,children:(0,i.jsx)(_,{path:"/view/Strip/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Strip/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Switch",Page:U,fallback:t,children:(0,i.jsx)(_,{path:"/view/Switch/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Switch/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Tabs",Page:q,fallback:t,children:(0,i.jsx)(_,{path:"/view/Tabs/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Tabs/demo/Default",fallback:t})})}),(0,i.jsx)(_,{path:"/view/Touchable",Page:Z,fallback:t,children:(0,i.jsx)(_,{path:"/view/Touchable/demo",fallback:t,children:(0,i.jsx)(_,{path:"/view/Touchable/demo/Default",fallback:t})})})]})]})}function _({path:e,fallback:t,children:n,Page:o,Layout:l,Template:c,access:d}){const[u,p]=a.useState(!1),f=function(){const[e,t]=a.useState(h.value);return a.useEffect((()=>{const e=e=>{t(e)};return h.addListener(e),()=>h.removeListener(e)}),[]),e}(),m=f&&s(f.path,r[e]);if(a.useEffect((()=>{f&&m&&(d?(p(void 0),d(f).then(p).catch((e=>{console.error("Error in access() function:",e),p(!1)}))):p(!0))}),[d,f]),!m)return null;if(!u)return t;if(0===m.distance){if(!o)return null;const e=c?(0,i.jsx)(c,{params:m.params,children:(0,i.jsx)(o,{params:m.params})}):(0,i.jsx)(o,{params:m.params});return l?(0,i.jsx)(l,{params:m.params,children:(0,i.jsx)(a.Suspense,{fallback:t,children:e})}):(0,i.jsx)(a.Suspense,{fallback:t,children:e})}return l?(0,i.jsx)(l,{params:m.params,children:n}):(0,i.jsx)(i.Fragment,{children:n})}var M=n(5072),G=n.n(M),H=n(7825),X=n.n(H),F=n(7659),W=n.n(F),N=n(5056),V=n.n(N),Y=n(540),Q=n.n(Y),U=n(1113),q=n.n(U),Z=n(9165),J={};J.styleTagTransform=q(),J.setAttributes=V(),J.insert=W().bind(null,"head"),J.domAPI=X(),J.insertStyleElement=Q(),G()(Z.A,J),Z.A&&Z.A.locals&&Z.A.locals,console.log("@tolokoban/ui","0.15.0"),function(){console.log("VERSION",a.version),new l.A({}).apply();const e=document.getElementById("root");(0,o.H)(e).render((0,i.jsx)(a.StrictMode,{children:(0,i.jsx)(z,{})})),function(){const e=document.getElementById("tgd-logo");e&&(e.classList.add("vanish"),window.setTimeout((()=>{const t=e.parentNode;t&&t.removeChild(e)}),900))}()}()},3991:(e,t,n)=>{n.d(t,{A:()=>b});var i=n(4848),a=n(5072),o=n.n(a),l=n(7825),r=n.n(l),s=n(7659),c=n.n(s),h=n(5056),d=n.n(h),u=n(540),p=n.n(u),f=n(1113),m=n.n(f),g=n(1864),A={};A.styleTagTransform=m(),A.setAttributes=d(),A.insert=c().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=p(),o()(g.A,A);const v=g.A&&g.A.locals?g.A.locals:void 0;function b(e){return(0,i.jsx)("a",{href:`#${e.hash}`,className:v.Link,children:e.children})}},6166:(e,t,n)=>{function i({flex:e,flexGrow:t,flexShrink:n,flexBasis:i,gridRow:a,gridColumn:o,alignSelf:l,justifySelf:r}){const s={};return e&&(s.flex=e),t&&(s.flexGrow=t),n&&(s.flexShrink=n),i&&(s.flexBasis=i),void 0!==a&&(s.gridRow=a),void 0!==o&&(s.gridColumn=o),void 0!==l&&(s.alignSelf=l),void 0!==r&&(s.justifySelf=r),s}n.d(t,{G:()=>i})},855:(e,t,n)=>{function i({color:e,textColor:t,backColor:n,shadow:i},a={}){const o={};return e||t||n||(e=a.color,t=a.textColor,n=a.backColor),e&&(o.color=`var(--theme-color-on-${e})`,o.backgroundColor=`var(--theme-color-${e})`),t&&(o.color=`var(--theme-color-${t})`),n&&(o.backgroundColor=`var(--theme-color-${n})`),i&&(o.boxShadow=`var(--theme-shadow-${i}, none)`),o}n.d(t,{B:()=>i})},3088:(e,t,n)=>{function i({width:e,height:t,maxWidth:n="100vw",maxHeight:i,minWidth:a,minHeight:o,fullsize:l=!1,fullwidth:r=!1,fullheight:s=!1}){const c={width:e,height:t,maxWidth:n,maxHeight:i,minWidth:a,minHeight:o};return(l||r)&&(c.width="100%"),(l||s)&&(c.height="100%"),c}n.d(t,{_:()=>i})},4670:(e,t,n)=>{n.d(t,{i:()=>a});var i=n(2884);function a(e){const{display:t}=e;return t?"flex"===t||"inline-flex"===t?function({display:e,gap:t,rowGap:n,columnGap:i,justifyContent:a,alignItems:l,flexDirection:r,flexWrap:s}){const c=Object.assign({display:e},o({gap:t,rowGap:n,columnGap:i}));return c.justifyContent=a,c.alignItems=l,c.flexWrap=s,c.flexDirection=r,c}(e):"grid"===t||"inline-grid"===t?function({display:e,gap:t,rowGap:n,columnGap:i,gridTemplateRows:a,gridTemplateColumns:l,gridAutoRows:r,gridAutoColumns:s,justifyContent:c,alignItems:h,placeItems:d}){const u=Object.assign({display:e},o({gap:t,rowGap:n,columnGap:i}));return u.gridTemplateRows=a,u.gridTemplateColumns=l,u.gridAutoRows=r,u.gridAutoColumns=s,u.justifyContent=c,u.alignItems=h,u.placeItems=d,u}(e):{display:t}:{}}function o({gap:e,columnGap:t,rowGap:n}){const a={};return e&&(a.gap=(0,i.O3)(e)),n&&(a.rowGap=(0,i.O3)(n)),t&&(a.columnGap=(0,i.O3)(t)),a}},3357:(e,t,n)=>{function i({position:e,left:t,top:n,right:i,bottom:a,zIndex:o}){return{position:e,left:t,top:n,right:i,bottom:a,zIndex:o}}n.d(t,{r:()=>i})},9494:(e,t,n)=>{n.d(t,{S:()=>a});var i=n(2884);function a({borderRadius:e,margin:t,padding:n}){const a={};return e&&(a.borderRadius=(0,i.O3)(e)),t&&(a.margin=(0,i.O3)(t)),n&&(a.padding=(0,i.O3)(n)),a}},2884:(e,t,n)=>{function i(e,t=1){return t<=0?"transparent":t>=1?`var(--theme-color-${e})`:`var(--theme-color-${e}-${function(e){const t=Math.round(10*e);return t<1?"1":t>9?"9":`${t}`}(t)})`}function a(e){return`var(--theme-color-on-${e})`}function o(e,t="em"){return Array.isArray(e)?e.map((e=>l(e,t))).join(" "):l(e,t)}function l(e,t="em"){if("number"==typeof e)return`${e}${t}`;switch(e){case"XXS":case"XS":case"S":case"M":case"L":case"XL":case"XXL":return`var(--theme-gap-${e})`;default:return e}}n.d(t,{O3:()=>o,S9:()=>i,rU:()=>a})},9142:(e,t,n)=>{n.d(t,{A:()=>y});const i=document.createElement("canvas");i.width=1,i.height=1;class a{static get ctx(){if(!a._ctx){const e=document.createElement("canvas");e.width=1,e.height=1;const t=e.getContext("2d");if(!t)throw Error("[Color] Unable to create CanvasRenderingContext2D!");a._ctx=t}return a._ctx}static makeGradient(e,...t){const n=[],i=1/(e-1);for(let o=0;o<e;o++)n.push(a.mix(o*i,...t));return n}static mix(e,...t){const n=t.map((e=>new a(e))),i=n.length-1;if(i<0)return new a("#000");if(0===i)return n[0];const o=Math.min(Math.floor(e*i),i-1),l=n[o+1],r=n[o],s=1-i*(e-o/i);return new a(`color-mix(in lch, ${l.toString()}, ${r.toString()} ${100*s}%)`)}static isLight(e){return new a(e).isLight()}static isDark(e){return new a(e).isDark()}constructor(e){this.R=0,this.G=0,this.B=0,this.A=0,this.from(e)}from(e){if("string"==typeof e){const t=a.ctx;t.clearRect(0,0,1,1),t.fillStyle=e,t.fillRect(0,0,1,1);const n=t.getImageData(0,0,1,1),[i,o,l,r]=n.data,s=1/255;this.R=i*s,this.G=o*s,this.B=l*s,this.A=r*s}else this.R=e.R,this.G=e.G,this.B=e.B,this.A=e.A;return this}toString(){const e=e=>Math.floor(255*e).toString(16).padStart(2,"0");return`#${e(this.R)}${e(this.G)}${e(this.B)}${e(this.A)}`}get luminance(){return.2126*this.sRgbToLinear(this.R)+.7152*this.sRgbToLinear(this.G)+.0722*this.sRgbToLinear(this.B)}get perceivedLightness(){const e=this.luminance;return.01*(e<=216/24389?e*(24389/27):116*Math.pow(e,1/3)-16)}sRgbToLinear(e){return e<.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}isLight(){return!this.isDark()}isDark(){return this.perceivedLightness<.5}}a._ctx=null;const o=a;var l=n(5072),r=n.n(l),s=n(7825),c=n.n(s),h=n(7659),d=n.n(h),u=n(5056),p=n.n(u),f=n(540),m=n.n(f),g=n(1113),A=n.n(g),v=n(3926),b={};b.styleTagTransform=A(),b.setAttributes=p(),b.insert=d().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=m(),r()(v.A,b),v.A&&v.A.locals&&v.A.locals;const w=["hsl(0 0% 50%)","hsl(0 0% 100%)"];class x{constructor(e={}){var t,n,i,a,o,l,r,s,c,h,d;this.vars=[];const u=null!==(t=e.colors)&&void 0!==t?t:{},p=null!==(n=e.gap)&&void 0!==n?n:{XS:".25rem",S:".5rem",M:"1rem",L:"2rem",XL:"4rem"};this.add("gap-none","0"),this.add("gap-XS",p.XS),this.add("gap-S",p.S),this.add("gap-M",p.M),this.add("gap-L",p.L),this.add("gap-XL",p.XL),this.add("color-text-light",null!==(i=u.textLight)&&void 0!==i?i:"#fffe"),this.add("color-text-dark",null!==(a=u.textDark)&&void 0!==a?a:"#000e"),this.addColor("input",null!==(o=u.input)&&void 0!==o?o:"#fff"),this.addColor("error",null!==(l=u.error)&&void 0!==l?l:"#d00"),this.addColor("valid",null!==(r=u.valid)&&void 0!==r?r:"#0f0"),this.addColorVars("primary",j(null!==(s=u.primary)&&void 0!==s?s:"hsl(215 80% 50%)")),this.addColorVars("secondary",j(null!==(c=u.secondary)&&void 0!==c?c:"hsl(60 80% 50%)")),this.addColorVars("tertiary",j(null!==(h=u.tertiary)&&void 0!==h?h:"hsl(100 80% 50%)")),this.addColorVars("neutral",j(null!==(d=u.neutral)&&void 0!==d?d:w));for(let e=0;e<10;e++){const t=e;this.add(`shadow-${e}`,`0 ${t}px ${2*t}px #000e`)}}add(e,t,n=1){let i=t;if(n<=0)i="transparent";else if(n<1){const e=new o(t);e.A=n,i=e.toString()}this.vars.push([e,i])}addColor(e,t){this.add(`color-${e}`,t),this.add(`color-on-${e}`,`var(--theme-color-text-${o.isLight(t)?"dark":"light"})`)}addColorVars(e,t){let n=1;for(const i of t){this.add(`color-${e}-${n}`,i);for(let t=1;t<10;t++)this.add(`color-${e}-${n}-${t}`,i,t/10);this.add(`color-on-${e}-${n}`,`var(--theme-color-text-${o.isLight(i)?"dark":"light"})`),n++}this.add(`color-${e}`,`var(--theme-color-${e}-5)`)}apply(e){var t;const n=null!=e?e:null===(t=globalThis.window)||void 0===t?void 0:t.document.body;if(n)for(const[e,t]of this.vars)n.style.setProperty(`--theme-${e}`,t)}}x.classNames=new class{constructor(){this.signature=`${Date.now().toString(36)}-Theme-`,this.colorPrimary=(e=5)=>this.cls(`color-primary-${e}`),this.colorSecondary=(e=5)=>this.cls(`color-secondary-${e}`),this.colorTertiary=(e=5)=>this.cls(`color-tertiary-${e}`),this.colorNeutral=(e=5)=>this.cls(`color-neutral-${e}`),this.init=()=>{if(!document.head)return void window.setTimeout(this.init,200);const e=[`.${this.cls("display-flex")} { display: flex; justify-content: space-between; align-items: center; gap: var(--theme-gap-S); }`,`.${this.cls("display-inline-flex")} { display: inline-flex; justify-content: space-between; align-items: center; gap: var(--theme-gap-S); }`];for(const t of["none","XS","S","M","L","XL"])for(const n of["none","XS","S","M","L","XL"])e.push(`.${this.cls(`padding-${t}-${n}`)} { padding: var(--theme-gap-${t}) var(--theme-gap-${n}); }`),e.push(`.${this.cls(`margin-${t}-${n}`)} { margin: var(--theme-gap-${t}) var(--theme-gap-${n}); }`);for(const t of["primary","secondary","tertiary","neutral"])for(let n=1;n<10;n++)e.push(`.${this.cls(`color-${t}-${n}`)} {`,`  color: var(--theme-color-on-${t}-${n});`,`  background-color: var(--theme-color-${t}-${n});`,"}");const t=document.createElement("style");t.textContent=e.join("\n"),document.head.appendChild(t)},this.init()}join(...e){return e.filter((e=>"string"==typeof e)).join(" ")}padding(...e){let[t,n]=e;return t||(t="none"),n||(n=t),this.cls(`padding-${t}-${n}`)}margin(...e){let[t,n]=e;return t||(t="none"),n||(n=t),this.cls(`margin-${t}-${n}`)}display(e){return[this.cls(`display-${e}`)].join(" ")}cls(e){return`${this.signature}${e}`}};const y=x;function j(e){const t=Array.isArray(e)?e:[e];return 0===t.length&&t.push("#fff"),1===t.length&&function(e){const[t]=e,n=new o(t),i=new o(t);n.R*=.3,n.G*=.3,n.B*=.3,i.R=1-.2*(1-i.R),i.G=1-.2*(1-i.G),i.B=1-.2*(1-i.B),e.unshift(n),e.push(i)}(t),o.makeGradient(9,...t).map((e=>e.toString()))}},7049:(e,t,n)=>{n.d(t,{s:()=>P});var i=n(4848),a=n(9142),o=n(6166),l=n(855),r=n(3088),s=n(4670),c=n(3357),h=n(9494),d=n(2884),u=n(5072),p=n.n(u),f=n(7825),m=n.n(f),g=n(7659),A=n.n(g),v=n(5056),b=n.n(v),w=n(540),x=n.n(w),y=n(1113),j=n.n(y),k=n(6380),C={};C.styleTagTransform=j(),C.setAttributes=b(),C.insert=A().bind(null,"head"),C.domAPI=m(),C.insertStyleElement=x(),p()(k.A,C);const I=k.A&&k.A.locals?k.A.locals:void 0,S=a.A.classNames;function P(e){const{className:t,children:n,borderRadius:a,fontSize:u,aspectRatio:p=0}=e,f=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({fontSize:u},(0,l.B)(e)),(0,h.S)(e)),(0,r._)(e)),function({overflow:e,overflowX:t,overflowY:n}){const i={};if(e){if("string"==typeof e)return i.overflow=e,i;const[t,n]=e;return i.overflowX=t,i.overflowY=n,i}return t&&(i.overflowX=t),n&&(i.overflowY=n),i}(e)),(0,s.i)(e)),(0,c.r)(e)),(0,o.G)(e));return p>0&&(f["--custom-aspect-ratio"]=p),a&&(f.borderRadius=(0,d.O3)(a)),(0,i.jsx)("div",{className:S.join(t,I.Panel),style:f,children:n})}}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={id:e,exports:{}};return i[e](n,n.exports,o),n.exports}o.m=i,e=[],o.O=(t,n,i,a)=>{if(!n){var l=1/0;for(h=0;h<e.length;h++){for(var[n,i,a]=e[h],r=!0,s=0;s<n.length;s++)(!1&a||l>=a)&&Object.keys(o.O).every((e=>o.O[e](n[s])))?n.splice(s--,1):(r=!1,a<l&&(l=a));if(r){e.splice(h--,1);var c=i();void 0!==c&&(t=c)}}return t}a=a||0;for(var h=e.length;h>0&&e[h-1][2]>a;h--)e[h]=e[h-1];e[h]=[n,i,a]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](e,t),t)),[])),o.u=e=>"scr/"+e+"."+{25:"5b24e9d2304a7be62873",28:"fcd3fddad0aca1307e1a",70:"d79f22fc2f52b3797b01",123:"dc5b1ff7074e6d353f4a",161:"d6054acb249653cfb473",178:"dc9f656b0d80f73a118d",179:"eecf845a6df9b55f2bee",201:"82ca46a8b7e88e36f5b0",213:"ae718961797364e49b9f",226:"8c7e1c549114abef539c",248:"feb52547bbeddac9e556",321:"0023b9917d9f912ab4aa",352:"6e801cac346975fadafb",416:"1742ccfe61990523b07d",571:"9c9aa969a59b0956b88b",572:"43707548dd03c120b779",582:"966049ec8081ec54afb4",660:"1dbfc9e3481686c73d7a",694:"0b1ee28bdc3f50348501",695:"35ded9e209493c5410da",765:"1e5069951353c62cdd85",787:"f967a78b68045c0a36de",833:"a46a42c23e0ee325567d",859:"cf2c51ae3daaa792ba49"}[e]+".js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),t={},n="@tolokoban/ui:",o.l=(e,i,a,l)=>{if(t[e])t[e].push(i);else{var r,s;if(void 0!==a)for(var c=document.getElementsByTagName("script"),h=0;h<c.length;h++){var d=c[h];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==n+a){r=d;break}}r||(s=!0,(r=document.createElement("script")).charset="utf-8",r.timeout=120,o.nc&&r.setAttribute("nonce",o.nc),r.setAttribute("data-webpack",n+a),r.src=e),t[e]=[i];var u=(n,i)=>{r.onerror=r.onload=null,clearTimeout(p);var a=t[e];if(delete t[e],r.parentNode&&r.parentNode.removeChild(r),a&&a.forEach((e=>e(i))),n)return n(i)},p=setTimeout(u.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=u.bind(null,r.onerror),r.onload=u.bind(null,r.onload),s&&document.head.appendChild(r)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var i=n.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=n[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e+"../"})(),(()=>{var e={524:0};o.f.j=(t,n)=>{var i=o.o(e,t)?e[t]:void 0;if(0!==i)if(i)n.push(i[2]);else{var a=new Promise(((n,a)=>i=e[t]=[n,a]));n.push(i[2]=a);var l=o.p+o.u(t),r=new Error;o.l(l,(n=>{if(o.o(e,t)&&(0!==(i=e[t])&&(e[t]=void 0),i)){var a=n&&("load"===n.type?"missing":n.type),l=n&&n.target&&n.target.src;r.message="Loading chunk "+t+" failed.\n("+a+": "+l+")",r.name="ChunkLoadError",r.type=a,r.request=l,i[1](r)}}),"chunk-"+t,t)}},o.O.j=t=>0===e[t];var t=(t,n)=>{var i,a,[l,r,s]=n,c=0;if(l.some((t=>0!==e[t]))){for(i in r)o.o(r,i)&&(o.m[i]=r[i]);if(s)var h=s(o)}for(t&&t(n);c<l.length;c++)a=l[c],o.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return o.O(h)},n=self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),o.nc=void 0;var l=o.O(void 0,[446],(()=>o(299)));l=o.O(l)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,