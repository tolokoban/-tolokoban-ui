"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[571],{5036:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),o=i.n(t),l=i(6314),a=i.n(l)()(o());a.push([e.id,".\\---lib-dist-view-Label-Label-module_LabelContent_YYb190 {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.\\---lib-dist-view-Label-Label-module_Label_mUUrOO {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,cAAc;IACd,mBAAmB;AACvB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n"],sourceRoot:""}]),a.locals={LabelContent:"---lib-dist-view-Label-Label-module_LabelContent_YYb190",Label:"---lib-dist-view-Label-Label-module_Label_mUUrOO"};const s=a},9536:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),o=i.n(t),l=i(6314),a=i.n(l)()(o());a.push([e.id,".\\---lib-dist-view-Options-Options-module_Options_z10WmO {\n    box-shadow: var(--theme-shadow-2);\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    gap: 1px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    background-color: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n}\n\n.\\---lib-dist-view-Options-Options-module_button_HIcyv7 {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.\\---lib-dist-view-Options-Options-module_button_HIcyv7.\\---lib-dist-view-Options-Options-module_selected_IbVd9x {\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.\\---lib-dist-view-Options-Options-module_button_HIcyv7.\\---lib-dist-view-Options-Options-module_unselected_LfCiiB {\n    opacity: 0.667;\n    background-color: var(--theme-color-primary-4);\n    color: var(--theme-color-on-primary-4);\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Options/Options.module.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,oBAAoB;IACpB,eAAe;IACf,6BAA6B;IAC7B,oBAAoB;IACpB,QAAQ;IACR,qBAAqB;IACrB,gBAAgB;IAChB,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,SAAS;IACT,wBAAwB;IACxB,cAAc;IACd,gCAAgC;IAChC,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,cAAc;IACd,8CAA8C;IAC9C,sCAAsC;AAC1C",sourcesContent:[".Options {\n    box-shadow: var(--theme-shadow-2);\n    display: inline-flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    gap: 1px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n    background-color: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n}\n\n.button {\n    margin: 0;\n    padding: 0.125rem 0.5rem;\n    flex: 1 1 auto;\n    box-shadow: 0 0 1px currentColor;\n    display: grid;\n    place-items: center;\n}\n\n.button.selected {\n    background-color: var(--theme-color-primary-6);\n    color: var(--theme-color-on-primary-6);\n}\n\n.button.unselected {\n    opacity: 0.667;\n    background-color: var(--theme-color-primary-4);\n    color: var(--theme-color-on-primary-4);\n}\n"],sourceRoot:""}]),a.locals={Options:"---lib-dist-view-Options-Options-module_Options_z10WmO",button:"---lib-dist-view-Options-Options-module_button_HIcyv7",selected:"---lib-dist-view-Options-Options-module_selected_IbVd9x",unselected:"---lib-dist-view-Options-Options-module_unselected_LfCiiB"};const s=a},7872:(e,n,i)=>{i.d(n,{A:()=>s});var t=i(1354),o=i.n(t),l=i(6314),a=i.n(l)()(o());a.push([e.id,".\\---lib-dist-view-Touchable-Touchable-module_Touchable_Fygs2c {\n    display: contents;\n    cursor: pointer;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Touchable/Touchable.module.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,eAAe;AACnB",sourcesContent:[".Touchable {\n    display: contents;\n    cursor: pointer;\n}\n"],sourceRoot:""}]),a.locals={Touchable:"---lib-dist-view-Touchable-Touchable-module_Touchable_Fygs2c"};const s=a},7571:(e,n,i)=>{i.r(n),i.d(n,{default:()=>p});var t=i(4848),o=i(2296),l=i(8464),a=i(6540),s=i(7049),r=i(797),c=i(2842),d=i(9550),u=i(8836),v=i(1791);function A(){const[e,n]=a.useState("elevated"),[i,o]=a.useState("primary"),[l,A]=a.useState("5"),[h,p]=a.useState(!0),[m,b]=a.useState(!1),[C,w]=a.useState(!1),[y,f]=a.useState(!1);return(0,t.jsx)("div",{children:(0,t.jsxs)(s.s,{display:"flex",flexDirection:"column",gap:"S",children:[(0,t.jsxs)(r.s,{label:"Button variant",value:e,onChange:n,children:[(0,t.jsx)("div",{children:"elevated"},"elevated"),(0,t.jsx)("div",{children:"filled"},"filled"),(0,t.jsx)("div",{children:"outlined"},"outlined"),(0,t.jsx)("div",{children:"text"},"text")]}),(0,t.jsxs)(r.s,{label:"Color base",value:i,onChange:o,children:[(0,t.jsx)("div",{children:"neutral"},"neutral"),(0,t.jsx)("div",{children:"primary"},"primary"),(0,t.jsx)("div",{children:"secondary"},"secondary"),(0,t.jsx)("div",{children:"tertiary"},"tertiary")]}),(0,t.jsxs)(r.s,{label:"Color level",value:l,onChange:A,children:[(0,t.jsx)("div",{children:"1"},"1"),(0,t.jsx)("div",{children:"2"},"2"),(0,t.jsx)("div",{children:"3"},"3"),(0,t.jsx)("div",{children:"4"},"4"),(0,t.jsx)("div",{children:"5"},"5"),(0,t.jsx)("div",{children:"6"},"6"),(0,t.jsx)("div",{children:"7"},"7"),(0,t.jsx)("div",{children:"8"},"8"),(0,t.jsx)("div",{children:"9"},"9")]}),(0,t.jsxs)(s.s,{display:"flex",justifyContent:"space-between",flexWrap:"wrap",children:[(0,t.jsx)(c.m,{value:h,onChange:p,children:"Enabled"}),(0,t.jsx)(c.m,{value:C,onChange:w,children:"Left icon"}),(0,t.jsx)(c.m,{value:y,onChange:f,children:"Right icon"}),(0,t.jsx)(c.m,{value:m,onChange:b,children:"Waiting"})]}),(0,t.jsx)("hr",{}),(0,t.jsxs)(s.s,{display:"flex",justifyContent:"space-around",children:[(0,t.jsx)(d.y,{variant:e,enabled:h,waiting:m,icon:C?u.A:void 0,iconRight:y?v.A:void 0,color:`${i}-${l}`,onClick:()=>alert("You dared... Unbelivable!!!"),children:"Click me, if you dare!"}),(0,t.jsx)(d.y,{variant:e,enabled:h,waiting:m,icon:C?u.A:void 0,iconRight:y?v.A:void 0,color:`${i}-${l}`,onClick:"#/view",children:"Click me, if you dare!"})]})]})})}function h(){return(0,t.jsx)(o.A,{title:'import { ViewButton } from "@tolokoban/ui"',children:(0,t.jsx)(l.A,{description:"# Default usage\n",example:'import React from "react"\nimport {\n    IconChevronDoubleLeft,\n    IconChevronDoubleRight,\n    IconFly,\n    IconGear,\n    ViewButton,\n    ViewButtonProps,\n    ViewPanel,\n    ViewOptions,\n    ViewSwitch,\n} from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [variant, setVariant] =\n        React.useState<ViewButtonProps["variant"]>("elevated")\n    const [colorBase, setColorBase] = React.useState<\n        "neutral" | "primary" | "secondary" | "tertiary"\n    >("primary")\n    const [colorLevel, setColorLevel] = React.useState<\n        "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"\n    >("5")\n    const [enabled, setEnabled] = React.useState(true)\n    const [waiting, setWaiting] = React.useState(false)\n    const [leftIcon, setLeftIcon] = React.useState(false)\n    const [rightIcon, setRightIcon] = React.useState(false)\n    return (\n        <div>\n            <ViewPanel display="flex" flexDirection="column" gap="S">\n                <ViewOptions\n                    label="Button variant"\n                    value={variant}\n                    onChange={setVariant}\n                >\n                    <div key="elevated">elevated</div>\n                    <div key="filled">filled</div>\n                    <div key="outlined">outlined</div>\n                    <div key="text">text</div>\n                </ViewOptions>\n                <ViewOptions\n                    label="Color base"\n                    value={colorBase}\n                    onChange={setColorBase}\n                >\n                    <div key="neutral">neutral</div>\n                    <div key="primary">primary</div>\n                    <div key="secondary">secondary</div>\n                    <div key="tertiary">tertiary</div>\n                </ViewOptions>\n                <ViewOptions\n                    label="Color level"\n                    value={colorLevel}\n                    onChange={setColorLevel}\n                >\n                    <div key="1">1</div>\n                    <div key="2">2</div>\n                    <div key="3">3</div>\n                    <div key="4">4</div>\n                    <div key="5">5</div>\n                    <div key="6">6</div>\n                    <div key="7">7</div>\n                    <div key="8">8</div>\n                    <div key="9">9</div>\n                </ViewOptions>\n                <ViewPanel\n                    display="flex"\n                    justifyContent="space-between"\n                    flexWrap="wrap"\n                >\n                    <ViewSwitch value={enabled} onChange={setEnabled}>\n                        Enabled\n                    </ViewSwitch>\n                    <ViewSwitch value={leftIcon} onChange={setLeftIcon}>\n                        Left icon\n                    </ViewSwitch>\n                    <ViewSwitch value={rightIcon} onChange={setRightIcon}>\n                        Right icon\n                    </ViewSwitch>\n                    <ViewSwitch value={waiting} onChange={setWaiting}>\n                        Waiting\n                    </ViewSwitch>\n                </ViewPanel>\n                <hr />\n                <ViewPanel display="flex" justifyContent="space-around">\n                    <ViewButton\n                        variant={variant}\n                        enabled={enabled}\n                        waiting={waiting}\n                        icon={leftIcon ? IconChevronDoubleLeft : undefined}\n                        iconRight={\n                            rightIcon ? IconChevronDoubleRight : undefined\n                        }\n                        color={`${colorBase}-${colorLevel}`}\n                        onClick={() => alert("You dared... Unbelivable!!!")}\n                    >\n                        Click me, if you dare!\n                    </ViewButton>\n                    <ViewButton\n                        variant={variant}\n                        enabled={enabled}\n                        waiting={waiting}\n                        icon={leftIcon ? IconChevronDoubleLeft : undefined}\n                        iconRight={\n                            rightIcon ? IconChevronDoubleRight : undefined\n                        }\n                        color={`${colorBase}-${colorLevel}`}\n                        onClick="#/view"\n                    >\n                        Click me, if you dare!\n                    </ViewButton>\n                </ViewPanel>\n            </ViewPanel>\n        </div>\n    )\n}\n',children:(0,t.jsx)(A,{})})})}function p(){return(0,t.jsx)(h,{})}},9870:(e,n,i)=>{i.d(n,{H:()=>o});var t=i(6540);function o(e){const[n,i]=t.useState(e.value);return t.useEffect((()=>{i(e.value)}),[e.value]),[n,n=>{var t;i(n),null===(t=e.onChange)||void 0===t||t.call(e,n)}]}},5895:(e,n,i)=>{i.d(n,{a:()=>x});var t=i(4848),o=i(6540),l=i(6781),a=i(5072),s=i.n(a),r=i(7825),c=i.n(r),d=i(7659),u=i.n(d),v=i(5056),A=i.n(v),h=i(540),p=i.n(h),m=i(1113),b=i.n(m),C=i(5036),w={};w.styleTagTransform=b(),w.setAttributes=A(),w.insert=u().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=p(),s()(C.A,w);const y=C.A&&C.A.locals?C.A.locals:void 0;var f=i(7049);const g=l.Sx.classNames;function x({color:e,className:n,value:i,title:l,box:a="column",fullwidth:s,children:r}){const c=`labelled/${o.useId()}`;if(!i)return(0,t.jsx)(t.Fragment,{children:r});const d={};e&&(d.color=`var(--theme-color-${e})`);const u=(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("label",{htmlFor:c,title:l,className:g.join(n,y.Label),style:d,children:i}),r&&(0,t.jsx)("div",{ref:e=>{if(!e)return;const n=e.querySelector("input,textarea,button,meter,output,progress,select");n&&n.setAttribute("id",c)},className:y.LabelContent,children:r})]});switch(a){case"row":return(0,t.jsx)(f.s,{display:s?"flex":"inline-flex",flexDirection:"row",alignItems:"center",gap:"1em",children:u});case"column":return(0,t.jsx)(f.s,{display:s?"flex":"inline-flex",flexDirection:"column",alignItems:"stretch",gap:"0",children:u});default:return u}}},797:(e,n,i)=>{i.d(n,{s:()=>j});var t=i(4848),o=i(9870),l=i(5895),a=i(6516),s=i(6781),r=i(1635),c=i(855),d=i(5072),u=i.n(d),v=i(7825),A=i.n(v),h=i(7659),p=i.n(h),m=i(5056),b=i.n(m),C=i(540),w=i.n(C),y=i(1113),f=i.n(y),g=i(9536),x={};x.styleTagTransform=f(),x.setAttributes=b(),x.insert=p().bind(null,"head"),x.domAPI=A(),x.insertStyleElement=w(),u()(g.A,x);const I=g.A&&g.A.locals?g.A.locals:void 0,B=s.Sx.classNames;function j(e){const{label:n,children:i}=e,[s,d]=(0,o.H)(e);return(0,t.jsx)(l.a,{value:n,fullwidth:e.fullwidth,children:(0,t.jsx)("div",{className:B.join(I.Options,e.className,(0,r.p)(e)),style:Object.assign(Object.assign({},(0,r.$)(e)),(0,c.B)(e)),children:i.map((n=>{var i;const o="number"==typeof s?parseFloat(`${null!==(i=n.key)&&void 0!==i?i:"0"}`):n.key;return o===s?(0,t.jsx)("div",{className:B.join(I.button,I.selected),style:(0,c.B)({color:e.colorSelection}),children:n},o):(0,t.jsx)(a.t,{className:B.join(I.button,I.unselected),style:(0,c.B)({color:e.color}),onClick:()=>d(o),children:n},o)}))})})}},6516:(e,n,i)=>{i.d(n,{t:()=>f});var t=i(4848),o=i(6781),l=i(5072),a=i.n(l),s=i(7825),r=i.n(s),c=i(7659),d=i.n(c),u=i(5056),v=i.n(u),A=i(540),h=i.n(A),p=i(1113),m=i.n(p),b=i(7872),C={};C.styleTagTransform=m(),C.setAttributes=v(),C.insert=d().bind(null,"head"),C.domAPI=r(),C.insertStyleElement=h(),a()(b.A,C);const w=b.A&&b.A.locals?b.A.locals:void 0,y=o.Sx.classNames;function f({className:e,children:n,tag:i,style:o,tooltip:l,onClick:a}){return a?(0,t.jsx)("div",{className:y.join(e,w.Touchable),title:l,onClick:()=>a(i),style:o,children:n}):(0,t.jsx)(t.Fragment,{children:n})}},8836:(e,n,i)=>{i.d(n,{A:()=>t});const t=(0,i(8471).B)("M18.41,7.41L17,6L11,12L17,18L18.41,16.59L13.83,12L18.41,7.41M12.41,7.41L11,6L5,12L11,18L12.41,16.59L7.83,12L12.41,7.41Z","IconChevronDoubleLeft")},1791:(e,n,i)=>{i.d(n,{A:()=>t});const t=(0,i(8471).B)("M5.59,7.41L7,6L13,12L7,18L5.59,16.59L10.17,12L5.59,7.41M11.59,7.41L13,6L19,12L13,18L11.59,16.59L16.17,12L11.59,7.41Z","IconChevronDoubleRight")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,