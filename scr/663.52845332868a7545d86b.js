"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[663],{3514:(n,o,e)=>{e.d(o,{A:()=>a});var t=e(1354),i=e.n(t),r=e(6314),l=e.n(r)()(i());l.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),l.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const a=l},6630:(n,o,e)=>{e.d(o,{A:()=>a});var t=e(1354),i=e.n(t),r=e(6314),l=e.n(r)()(i());l.push([n.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),l.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const a=l},7599:(n,o,e)=>{e.d(o,{A:()=>a});var t=e(1354),i=e.n(t),r=e(6314),l=e.n(r)()(i());l.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),l.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const a=l},3714:(n,o,e)=>{e.d(o,{A:()=>a});var t=e(1354),i=e.n(t),r=e(6314),l=e.n(r)()(i());l.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),l.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const a=l},4718:(n,o,e)=>{e.d(o,{A:()=>a});var t=e(1354),i=e.n(t),r=e(6314),l=e.n(r)()(i());l.push([n.id,".\\---lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_vEda8U {\n    --custom-color-back: #7df;\n    --custom-color-text: #000;\n    --custom-color-hover-back: 0;\n    --custom-color-hover-text: 0;\n    --custom-shadow: var(--theme-shadow-3);\n    all: inherit;\n    position: initial;\n    overflow: hidden;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    border-radius: 50%;\n    width: 2em;\n    height: 2em;\n    background-color: var(--custom-color-back);\n    color: var(--custom-color-text);\n    transition: 0.2s all;\n    box-shadow: var(--custom-shadow);\n}\n\n.\\---lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_vEda8U:hover {\n    background-color: var(--custom-color-hover-back);\n    color: var(--custom-color-hover-text);\n}\n\nbutton.\\---lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_vEda8U:active {\n    transform: translateY(0.25em);\n    box-shadow: var(--theme-shadow-1);\n}\n\nbutton.\\---lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_vEda8U[disabled] {\n    pointer-events: none;\n    box-shadow: none;\n    filter: grayscale(100%);\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/FloatingButton/FloatingButton.module.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,yBAAyB;IACzB,4BAA4B;IAC5B,4BAA4B;IAC5B,sCAAsC;IACtC,YAAY;IACZ,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;IACV,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,0CAA0C;IAC1C,+BAA+B;IAC/B,oBAAoB;IACpB,gCAAgC;AACpC;;AAEA;IACI,gDAAgD;IAChD,qCAAqC;AACzC;;AAEA;IACI,6BAA6B;IAC7B,iCAAiC;AACrC;;AAEA;IACI,oBAAoB;IACpB,gBAAgB;IAChB,uBAAuB;AAC3B",sourcesContent:[".FloatingButton {\n    --custom-color-back: #7df;\n    --custom-color-text: #000;\n    --custom-color-hover-back: 0;\n    --custom-color-hover-text: 0;\n    --custom-shadow: var(--theme-shadow-3);\n    all: inherit;\n    position: initial;\n    overflow: hidden;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0;\n    border-radius: 50%;\n    width: 2em;\n    height: 2em;\n    background-color: var(--custom-color-back);\n    color: var(--custom-color-text);\n    transition: 0.2s all;\n    box-shadow: var(--custom-shadow);\n}\n\n.FloatingButton:hover {\n    background-color: var(--custom-color-hover-back);\n    color: var(--custom-color-hover-text);\n}\n\nbutton.FloatingButton:active {\n    transform: translateY(0.25em);\n    box-shadow: var(--theme-shadow-1);\n}\n\nbutton.FloatingButton[disabled] {\n    pointer-events: none;\n    box-shadow: none;\n    filter: grayscale(100%);\n}\n"],sourceRoot:""}]),l.locals={FloatingButton:"---lib-dist-view-FloatingButton-FloatingButton-module_FloatingButton_vEda8U"};const a=l},3663:(n,o,e)=>{e.r(o),e.d(o,{default:()=>D});var t=e(4848),i=e(2296),r=e(8464),l=e(7049),a=e(6781),s=e(6166),c=e(5072),A=e.n(c),m=e(7825),d=e.n(m),h=e(7659),u=e.n(h),g=e(5056),C=e.n(g),v=e(540),w=e.n(v),B=e(1113),p=e.n(B),I=e(4718),b={};b.styleTagTransform=p(),b.setAttributes=C(),b.insert=u().bind(null,"head"),b.domAPI=d(),b.insertStyleElement=w(),A()(I.A,b);const x=I.A&&I.A.locals?I.A.locals:void 0,y={XXS:.5,XS:1,S:1.5,M:2,L:3,XL:4,XXL:8};function f(n){var o;const{color:e="secondary-5",colorHover:i=(null!==(o=n.color)&&void 0!==o?o:"secondary-6"),size:r="M",enabled:l=!0}=n,c=function(n){var o;return null!==(o=y[n])&&void 0!==o?o:y.M}(r),A=Object.assign(Object.assign({},(0,s.G)(n)),{width:`${c}em`,height:`${c}em`});e&&(A["--custom-color-back"]=`var(--theme-color-${e})`,A["--custom-color-text"]=`var(--theme-color-on-${e})`),i&&(A["--custom-color-hover-back"]=`var(--theme-color-${i})`,A["--custom-color-hover-text"]=`var(--theme-color-on-${i})`);const m=n.icon,d=Object.assign(Object.assign({},n),{size:.75*c+"em"});return delete d.color,delete d.textColor,delete d.onClick,(0,t.jsx)("button",{className:a.Sx.classNames.join(n.className,x.FloatingButton),disabled:!l,type:"button",onClick:n.onClick,style:A,children:(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(m,Object.assign({},d))})})}var V=e(9856),j=e(646),H=e(6956),k=e(8838);function F(){return(0,t.jsxs)(l.s,{display:"flex",justifyContent:"space-around",alignItems:"center",flexWrap:"wrap",gap:"M",children:[(0,t.jsx)(f,{color:"primary-1",icon:V.A}),(0,t.jsx)(f,{color:"primary-3",icon:V.A}),(0,t.jsx)(f,{color:"primary-5",icon:V.A}),(0,t.jsx)(f,{color:"primary-7",icon:V.A}),(0,t.jsx)(f,{color:"primary-9",icon:V.A}),(0,t.jsx)(f,{enabled:!1,color:"primary-1",icon:V.A}),(0,t.jsx)(f,{enabled:!1,color:"primary-3",icon:V.A}),(0,t.jsx)(f,{enabled:!1,color:"primary-5",icon:V.A}),(0,t.jsx)(f,{enabled:!1,color:"primary-7",icon:V.A}),(0,t.jsx)(f,{enabled:!1,color:"primary-9",icon:V.A}),(0,t.jsx)(f,{icon:j.A,color:"secondary-5"}),(0,t.jsx)(f,{icon:H.A,animate:!0}),(0,t.jsx)(f,{size:"XS",icon:k.A}),(0,t.jsx)(f,{size:"S",icon:k.A}),(0,t.jsx)(f,{size:"M",icon:k.A}),(0,t.jsx)(f,{size:"L",icon:k.A}),(0,t.jsx)(f,{size:"XL",icon:k.A})]})}function _(){return(0,t.jsx)(i.A,{title:'import { ViewFloatingButton } from "@tolokoban/ui"',children:(0,t.jsx)(r.A,{description:"# Default usage\n",example:'import React from "react"\nimport {\n    IconChevronDown,\n    IconFly,\n    IconGear,\n    IconPassword,\n    ViewFloatingButton,\n    ViewPanel,\n} from "@tolokoban/ui"\n\nexport default function Demo() {\n    return (\n        <ViewPanel\n            display="flex"\n            justifyContent="space-around"\n            alignItems="center"\n            flexWrap="wrap"\n            gap="M"\n        >\n            <ViewFloatingButton color="primary-1" icon={IconChevronDown} />\n            <ViewFloatingButton color="primary-3" icon={IconChevronDown} />\n            <ViewFloatingButton color="primary-5" icon={IconChevronDown} />\n            <ViewFloatingButton color="primary-7" icon={IconChevronDown} />\n            <ViewFloatingButton color="primary-9" icon={IconChevronDown} />\n            <ViewFloatingButton\n                enabled={false}\n                color="primary-1"\n                icon={IconChevronDown}\n            />\n            <ViewFloatingButton\n                enabled={false}\n                color="primary-3"\n                icon={IconChevronDown}\n            />\n            <ViewFloatingButton\n                enabled={false}\n                color="primary-5"\n                icon={IconChevronDown}\n            />\n            <ViewFloatingButton\n                enabled={false}\n                color="primary-7"\n                icon={IconChevronDown}\n            />\n            <ViewFloatingButton\n                enabled={false}\n                color="primary-9"\n                icon={IconChevronDown}\n            />\n            <ViewFloatingButton icon={IconFly} color="secondary-5" />\n            <ViewFloatingButton icon={IconGear} animate />\n            <ViewFloatingButton size="XS" icon={IconPassword} />\n            <ViewFloatingButton size="S" icon={IconPassword} />\n            <ViewFloatingButton size="M" icon={IconPassword} />\n            <ViewFloatingButton size="L" icon={IconPassword} />\n            <ViewFloatingButton size="XL" icon={IconPassword} />\n        </ViewPanel>\n    )\n}\n',children:(0,t.jsx)(F,{})})})}function D(){return(0,t.jsx)(_,{})}},9327:(n,o,e)=>{e.d(o,{f:()=>I});var t=e(4848),i=e(9309);function r(n,o="    ",e=-1){const t="".padEnd(Math.max(0,e)*o.length,o);return"string"==typeof n?`${t}${n}`:n.map((n=>r(n,o,e+1))).join("\n")}var l=e(5072),a=e.n(l),s=e(7825),c=e.n(s),A=e(7659),m=e.n(A),d=e(5056),h=e.n(d),u=e(540),g=e.n(u),C=e(1113),v=e.n(C),w=e(6630),B={};B.styleTagTransform=v(),B.setAttributes=h(),B.insert=m().bind(null,"head"),B.domAPI=c(),B.insertStyleElement=g(),a()(w.A,B);const p=w.A&&w.A.locals?w.A.locals:void 0;function I(n){var o;return(0,t.jsx)(i.A,{className:b(n),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:r(null!==(o=n.children)&&void 0!==o?o:"")})}function b({className:n}){const o=[p.Highlight];return n&&o.push(n),o.join(" ")}},8464:(n,o,e)=>{e.d(o,{A:()=>D});var t=e(4848),i=e(6781),r=e(7049),l=e(6540),a=e(9550),s=e(2182),c=e(5726),A=e(9327),m=e(5072),d=e.n(m),h=e(7825),u=e.n(h),g=e(7659),C=e.n(g),v=e(5056),w=e.n(v),B=e(540),p=e.n(B),I=e(1113),b=e.n(I),x=e(3514),y={};y.styleTagTransform=b(),y.setAttributes=w(),y.insert=C().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=p(),d()(x.A,y);const f=x.A&&x.A.locals?x.A.locals:void 0,V=i.Sx.classNames;function j({className:n,children:o}){const[e,i]=l.useState(!1);return(0,t.jsxs)("div",{className:V.join(n,f.Code),children:[(0,t.jsxs)(a.y,{variant:"text",onClick:()=>i(!e),children:[e?(0,t.jsx)(s.A,{}):(0,t.jsx)(c.A,{}),(0,t.jsx)("div",{children:"Example's code:"})]}),e&&(0,t.jsx)(A.f,{children:o})]})}var H=e(7599),k={};k.styleTagTransform=b(),k.setAttributes=w(),k.insert=C().bind(null,"head"),k.domAPI=u(),k.insertStyleElement=p(),d()(H.A,k);const F=H.A&&H.A.locals?H.A.locals:void 0,_=i.Sx.classNames;function D({className:n,example:o,children:e}){return(0,t.jsxs)(r.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,t.jsx)("div",{className:_.join(n,F.ViewDemo),children:e}),(0,t.jsx)("hr",{}),(0,t.jsx)(j,{children:o})]})}},2296:(n,o,e)=>{e.d(o,{A:()=>b});var t=e(4848),i=e(6781),r=e(7049),l=e(5072),a=e.n(l),s=e(7825),c=e.n(s),A=e(7659),m=e.n(A),d=e(5056),h=e.n(d),u=e(540),g=e.n(u),C=e(1113),v=e.n(C),w=e(3714),B={};B.styleTagTransform=v(),B.setAttributes=h(),B.insert=m().bind(null,"head"),B.domAPI=c(),B.insertStyleElement=g(),a()(w.A,B);const p=w.A&&w.A.locals?w.A.locals:void 0,I=i.Sx.classNames;function b({className:n,title:o,children:e}){return(0,t.jsxs)("div",{className:I.join(n,p.ViewDocumentation),children:[(0,t.jsx)(r.s,{margin:0,padding:"M",color:"primary-2",children:o}),(0,t.jsx)(r.s,{margin:0,padding:"M",overflow:"auto",children:e})]})}},2182:(n,o,e)=>{e.d(o,{A:()=>t});const t=(0,e(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(n,o,e)=>{e.d(o,{A:()=>t});const t=(0,e(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")},9856:(n,o,e)=>{e.d(o,{A:()=>t});const t=(0,e(8471).B)("M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z","IconChevronDown")},646:(n,o,e)=>{e.d(o,{A:()=>t});const t=(0,e(8471).B)("M5,7H9A2,2,0,0,1,11,9V15A2,2,0,0,1,9,17H5V15H9V13H6V11H9V9H5V7M13,7H16A3,3,0,0,1,19,10V14A3,3,0,0,1,16,17H13V7M16,15A1,1,0,0,0,17,14V10A1,1,0,0,0,16,9H15V15H16Z","IconFly")},8838:(n,o,e)=>{e.d(o,{A:()=>t});const t=(0,e(8471).B)("M12,8A1,1 0 0,1 13,9A1,1 0 0,1 12,10A1,1 0 0,1 11,9A1,1 0 0,1 12,8M21,11C21,16.55 17.16,21.74 12,23C6.84,21.74 3,16.55 3,11V5L12,1L21,5V11M12,6A3,3 0 0,0 9,9C9,10.31 9.83,11.42 11,11.83V18H13V16H15V14H13V11.83C14.17,11.42 15,10.31 15,9A3,3 0 0,0 12,6Z","IconPassword")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,