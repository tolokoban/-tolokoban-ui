"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[551],{3514:(n,e,i)=>{i.d(e,{A:()=>l});var a=i(1354),t=i.n(a),o=i(6314),s=i.n(o)()(t());s.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),s.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const l=s},7599:(n,e,i)=>{i.d(e,{A:()=>l});var a=i(1354),t=i.n(a),o=i(6314),s=i.n(o)()(t());s.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),s.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const l=s},3714:(n,e,i)=>{i.d(e,{A:()=>l});var a=i(1354),t=i.n(a),o=i(6314),s=i.n(o)()(t());s.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),s.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const l=s},1320:(n,e,i)=>{i.d(e,{A:()=>l});var a=i(1354),t=i.n(a),o=i(6314),s=i.n(o)()(t());s.push([n.id,".\\---lib-dist-view-Rating-Rating-module_main_wTDD7l {\n    vertical-align: middle;\n}\n\n.\\---lib-dist-view-Rating-Rating-module_main_wTDD7l.\\---lib-dist-view-Rating-Rating-module_readOnly_GDXjfX {\n    pointer-events: none;\n}\n\n.\\---lib-dist-view-Rating-Rating-module_main_wTDD7l > label {\n    position: relative;\n    display: inline-block;\n    transition: transform 0.2s;\n    transform: scale(1);\n    cursor: pointer;\n    vertical-align: inherit;\n}\n\n.\\---lib-dist-view-Rating-Rating-module_main_wTDD7l > label:hover,\n.\\---lib-dist-view-Rating-Rating-module_main_wTDD7l > label:focus {\n    transform: scale(1.2);\n}\n\n.\\---lib-dist-view-Rating-Rating-module_main_wTDD7l .\\---lib-dist-view-Rating-Rating-module_hidden_B5tY_Y {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\n.\\---lib-dist-view-Rating-Rating-module_main_wTDD7l .\\---lib-dist-view-Rating-Rating-module_absolute_xNp67H {\n    position: absolute;\n    left: 0;\n    top: 0;\n    overflow: hidden;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Rating/Rating.module.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,0BAA0B;IAC1B,mBAAmB;IACnB,eAAe;IACf,uBAAuB;AAC3B;;AAEA;;IAEI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,mBAAmB;IACnB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,UAAU;IACV,kBAAkB;IAClB,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,gBAAgB;AACpB",sourcesContent:[".main {\n    vertical-align: middle;\n}\n\n.main.readOnly {\n    pointer-events: none;\n}\n\n.main > label {\n    position: relative;\n    display: inline-block;\n    transition: transform 0.2s;\n    transform: scale(1);\n    cursor: pointer;\n    vertical-align: inherit;\n}\n\n.main > label:hover,\n.main > label:focus {\n    transform: scale(1.2);\n}\n\n.main .hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\n.main .absolute {\n    position: absolute;\n    left: 0;\n    top: 0;\n    overflow: hidden;\n}\n"],sourceRoot:""}]),s.locals={main:"---lib-dist-view-Rating-Rating-module_main_wTDD7l",readOnly:"---lib-dist-view-Rating-Rating-module_readOnly_GDXjfX",hidden:"---lib-dist-view-Rating-Rating-module_hidden_B5tY_Y",absolute:"---lib-dist-view-Rating-Rating-module_absolute_xNp67H"};const l=s},9551:(n,e,i)=>{i.r(e),i.d(e,{default:()=>P});var a=i(4848),t=i(2296),o=i(8464),s=i(6540),l=i(7049),r=i(3770),c=i(1635),d=i(5013),u=i(3357),A=i(9494),m=i(9870),p=i(2883),v=i(5072),g=i.n(v),h=i(7825),w=i.n(h),b=i(7659),C=i.n(b),f=i(5056),x=i.n(f),I=i(540),j=i.n(I),y=i(1113),B=i.n(y),_=i(1320),R={};R.styleTagTransform=B(),R.setAttributes=x(),R.insert=C().bind(null,"head"),R.domAPI=w(),R.insertStyleElement=j(),g()(_.A,R);const D=_.A&&_.A.locals?_.A.locals:void 0;var V=i(5895);const k="#faaf00";function N(n){const e=s.useId(),{max:i=5,color:t,colorEdit:o=t,readOnly:l=!1,fillOpacity:r=(l?1:.8),name:v=`ViewRating-${Math.random()}`,icon:g=p.A}=n,[h,w]=(0,m.H)(n),b=function(n,e){const i=s.useRef(!1);return s.useCallback((a=>{if(!a)return;a.addEventListener("pointerdown",(n=>{a.setPointerCapture(n.pointerId),i.current=!0})),a.addEventListener("pointerup",(n=>{a.releasePointerCapture(n.pointerId),i.current=!1})),a.addEventListener("pointermove",(t=>{if(!i.current)return;const{left:o,width:s}=a.getBoundingClientRect(),l=1+Math.floor(n*(t.clientX-o)/s);e(l)}))}),[])}(i,w);return(0,a.jsx)(V.a,{value:n.label,children:(0,a.jsx)("span",{ref:b,className:S(n),tabIndex:0,style:Object.assign(Object.assign(Object.assign(Object.assign({},(0,c.$)(n)),(0,d._)(n)),(0,u.r)(n)),(0,A.S)(n)),children:T(i).map((n=>{const i=`${e}-${n}`;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("label",{htmlFor:i,children:[(0,a.jsx)("span",{style:{opacity:0},children:g({color:t,type:"outlined"})}),(0,a.jsx)("span",{className:D.absolute,style:{opacity:r,width:E(n,h),color:k},children:g({color:l?t:o,type:"filled"})}),(0,a.jsx)("span",{className:D.absolute,style:{color:k},children:g({color:t,type:"outlined"})}),(0,a.jsxs)("span",{className:D.hidden,children:[n," Star",n>1?"s":""]})]},i),(0,a.jsx)("input",{className:D.hidden,type:"radio",name:v,value:`${n}`,checked:n>h-1&&n<=h,onChange:e=>{e.target.checked&&w(n)},id:i},`input/${i}`)]})}))})})}function S(n){const e=[D.main];return"string"==typeof n.className&&e.push(n.className),n.readOnly&&e.push(D.readOnly),e.join(" ")}function T(n){const e=[];for(let i=0;i<n;i++)e.push(i+1);return e}function E(n,e){const i=Math.floor(e);return n<=i?"100%":n>i+1?"0%":`${(100*(e-i)).toFixed(0)}%`}const O=(0,i(8471).B)("M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z","IconHeart");function L(){const[n,e]=s.useState(3.4),[i,t]=s.useState(3.4);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(l.s,{display:"flex",justifyContent:"space-around",flexWrap:"wrap",gap:"L",children:[(0,a.jsx)(r.D,{value:n,onChange:e,label:"Assessment",min:0,max:5}),(0,a.jsx)(N,{value:n,onChange:e,label:`${n} / 5`}),(0,a.jsx)(N,{value:n,readOnly:!0,label:"Read only"})]}),(0,a.jsxs)(l.s,{display:"flex",justifyContent:"space-around",flexWrap:"wrap",gap:"L",children:[(0,a.jsx)(N,{max:8,value:n,color:"primary-5",colorEdit:"secondary-5",onChange:t,label:`${i} / 8`}),(0,a.jsx)(N,{value:i,icon:O,readOnly:!0,label:"Fancy icons",max:8})]})]})}function M(){return(0,a.jsx)(t.A,{title:'import { ViewRating } from "@tolokoban/ui"',children:(0,a.jsx)(o.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewPanel, ViewRating } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [value, setValue] = React.useState(3.4)\n    return (\n        <ViewPanel display="flex" justifyContent="space-around">\n            <ViewRating\n                value={value}\n                onChange={setValue}\n                label={`${value} / 5`}\n            />\n            <ViewRating value={value} readOnly label="Read only" />\n        </ViewPanel>\n    )\n}\n',children:(0,a.jsx)(L,{})})})}function P(){return(0,a.jsx)(M,{})}},8464:(n,e,i)=>{i.d(e,{A:()=>N});var a=i(4848),t=i(6781),o=i(7049),s=i(6540),l=i(9550),r=i(2182),c=i(5726),d=i(9327),u=i(5072),A=i.n(u),m=i(7825),p=i.n(m),v=i(7659),g=i.n(v),h=i(5056),w=i.n(h),b=i(540),C=i.n(b),f=i(1113),x=i.n(f),I=i(3514),j={};j.styleTagTransform=x(),j.setAttributes=w(),j.insert=g().bind(null,"head"),j.domAPI=p(),j.insertStyleElement=C(),A()(I.A,j);const y=I.A&&I.A.locals?I.A.locals:void 0,B=t.Sx.classNames;function _({className:n,children:e}){const[i,t]=s.useState(!1);return(0,a.jsxs)("div",{className:B.join(n,y.Code),children:[(0,a.jsxs)(l.y,{variant:"text",onClick:()=>t(!i),children:[i?(0,a.jsx)(r.A,{}):(0,a.jsx)(c.A,{}),(0,a.jsx)("div",{children:"Example's code:"})]}),i&&(0,a.jsx)(d.f,{children:e})]})}var R=i(7599),D={};D.styleTagTransform=x(),D.setAttributes=w(),D.insert=g().bind(null,"head"),D.domAPI=p(),D.insertStyleElement=C(),A()(R.A,D);const V=R.A&&R.A.locals?R.A.locals:void 0,k=t.Sx.classNames;function N({className:n,example:e,children:i}){return(0,a.jsxs)(o.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,a.jsx)("div",{className:k.join(n,V.ViewDemo),children:i}),(0,a.jsx)("hr",{}),(0,a.jsx)(_,{children:e})]})}},2296:(n,e,i)=>{i.d(e,{A:()=>x});var a=i(4848),t=i(6781),o=i(7049),s=i(5072),l=i.n(s),r=i(7825),c=i.n(r),d=i(7659),u=i.n(d),A=i(5056),m=i.n(A),p=i(540),v=i.n(p),g=i(1113),h=i.n(g),w=i(3714),b={};b.styleTagTransform=h(),b.setAttributes=m(),b.insert=u().bind(null,"head"),b.domAPI=c(),b.insertStyleElement=v(),l()(w.A,b);const C=w.A&&w.A.locals?w.A.locals:void 0,f=t.Sx.classNames;function x({className:n,title:e,children:i}){return(0,a.jsxs)("div",{className:f.join(n,C.ViewDocumentation),children:[(0,a.jsx)(o.s,{margin:0,padding:"M",color:"primary-2",children:e}),(0,a.jsx)(o.s,{margin:0,padding:"M",overflow:"auto",children:i})]})}},9870:(n,e,i)=>{i.d(e,{H:()=>t});var a=i(6540);function t(n){const[e,i]=a.useState(n.value);return a.useEffect((()=>{i(n.value)}),[n.value]),[e,e=>{var a;i(e),null===(a=n.onChange)||void 0===a||a.call(n,e)}]}},3770:(n,e,i)=>{i.d(e,{D:()=>o});var a=i(4848),t=i(1323);function o(n){var e,i;const o=null!==(e=n.min)&&void 0!==e?e:Number.NEGATIVE_INFINITY,s=null!==(i=n.max)&&void 0!==i?i:Number.POSITIVE_INFINITY,l=Object.assign(Object.assign({},n),{value:`${n.value}`,onChange:e=>{const i=Number(e);Number.isFinite(i)&&n.onChange(i)},type:"number",validator:n=>{const e=Number(n);return Number.isFinite(e)&&e>=o&&e<=s}});return(0,a.jsx)(t.H,Object.assign({},l))}},2883:(n,e,i)=>{i.d(e,{A:()=>a});const a=(0,i(8471).B)("M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z","IconStar")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,