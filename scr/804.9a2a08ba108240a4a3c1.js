"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[804],{3804:(n,e,o)=>{o.r(e),o.d(e,{default:()=>f});var t=o(4848),l=o(2296),i=o(8464),r=o(6540),a=o(7049),u=o(4979);function s(){const[n,e]=r.useState("#F90"),[o,l]=r.useState("rgb(240, 160, 0)");return(0,t.jsx)("div",{children:(0,t.jsxs)(a.s,{display:"inline-flex",flexDirection:"column",alignItems:"stretch",width:"auto",children:[(0,t.jsx)(u.n,{value:n,onChange:e,label:"My best color"}),(0,t.jsx)(u.n,{value:o,onChange:l,label:"My worst color"})]})})}function c(){return(0,t.jsx)(l.A,{title:'import { ViewInputColor } from "@tolokoban/ui"',children:(0,t.jsx)(i.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputColor, ViewPanel } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [color, setColor] = React.useState("#F90")\n    return (\n        <div>\n            <ViewPanel\n                display="inline-flex"\n                flexDirection="column"\n                alignItems="stretch"\n                width="auto"\n            >\n                <ViewInputColor\n                    value={color}\n                    onChange={setColor}\n                    label="My favourite color"\n                />\n            </ViewPanel>\n        </div>\n    )\n}\n',children:(0,t.jsx)(s,{})})})}function f(){return(0,t.jsx)(c,{})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyLzgwNC5iMDgxNjk0ZDljNjY2ZmU5YTlhMy5qcyIsIm1hcHBpbmdzIjoiMk1BR2UsU0FBU0EsSUFDcEIsTUFBT0MsRUFBT0MsR0FBWSxXQUFlLFNBQ2xDQyxFQUFRQyxHQUFhLFdBQWUsb0JBQzNDLE9BQ0ksMEJBQ0ksVUFBQyxJQUFTLENBQ05DLFFBQVEsY0FDUkMsY0FBYyxTQUNkQyxXQUFXLFVBQ1hDLE1BQU0sT0FBTSxXQUVaLFNBQUMsSUFBYyxDQUNYQyxNQUFPUixFQUNQUyxTQUFVUixFQUNWUyxNQUFNLG1CQUVWLFNBQUMsSUFBYyxDQUNYRixNQUFPTixFQUNQTyxTQUFVTixFQUNWTyxNQUFNLHVCQUsxQixDQ2RlLFNBQVNDLElBQ3BCLE9BQU8sU0FBQ0MsRUFBQSxFQUFpQixDQUFDQyxNQUFNLGlEQUFnRCxVQUM1RSxTQUFDQyxFQUFBLEVBQVEsQ0FDTEMsWUFBYSxvQkFFYkMsUUFBUywrbUJBQThuQixVQUV2b0IsU0FBQ2pCLEVBQVcsT0FHeEIsQ0NaZSxTQUFTa0IsSUFDcEIsT0FBTyxTQUFDLEVBQWMsR0FDMUIsQyIsInNvdXJjZXMiOlsiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL0B0b2xva29iYW4vdWkvZG9jL3NyYy9hcHAvdmlldy9JbnB1dENvbG9yL2RlbW8vRGVmYXVsdC9EZWZhdWx0LnRzeCIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9AdG9sb2tvYmFuL3VpL2RvYy9zcmMvYXBwL3ZpZXcvSW5wdXRDb2xvci9JbnB1dENvbG9yLnRzeCIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9AdG9sb2tvYmFuL3VpL2RvYy9zcmMvYXBwL3ZpZXcvSW5wdXRDb2xvci9wYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IFZpZXdJbnB1dENvbG9yLCBWaWV3UGFuZWwgfSBmcm9tIFwiQHRvbG9rb2Jhbi91aVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlbW8oKSB7XG4gICAgY29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSBSZWFjdC51c2VTdGF0ZShcIiNGOTBcIilcbiAgICBjb25zdCBbY29sb3IyLCBzZXRDb2xvcjJdID0gUmVhY3QudXNlU3RhdGUoXCJyZ2IoMjQwLCAxNjAsIDApXCIpXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxWaWV3UGFuZWxcbiAgICAgICAgICAgICAgICBkaXNwbGF5PVwiaW5saW5lLWZsZXhcIlxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJzdHJldGNoXCJcbiAgICAgICAgICAgICAgICB3aWR0aD1cImF1dG9cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxWaWV3SW5wdXRDb2xvclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y29sb3J9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtzZXRDb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJNeSBiZXN0IGNvbG9yXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaWV3SW5wdXRDb2xvclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y29sb3IyfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17c2V0Q29sb3IyfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIk15IHdvcnN0IGNvbG9yXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9WaWV3UGFuZWw+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cbiIsIi8qKlxuICogMjAyNC0xMS0wMVQwNzo0NToyNS4yOTlaXG4gKlxuICogVGhpcyBmaWxlIGhhcyBiZWVuIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHdpdGg6XG4gKiBucG0gcnVuIGdlbmVyYXRlXG4gKiBcbiAqIFBsZWFzZSBkbyBub3QgbW9kaWZ5IGl0IG1hbnVhbGx5LlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBWaWV3RG9jdW1lbnRhdGlvbiBmcm9tIFwiQC92aWV3L1ZpZXdEb2N1bWVudGF0aW9uXCJcbmltcG9ydCBWaWV3RGVtbyBmcm9tIFwiQC92aWV3L1ZpZXdEZW1vXCJcbmltcG9ydCBEZW1vRGVmYXVsdCBmcm9tIFwiLi9kZW1vL0RlZmF1bHRcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbnB1dENvbG9yRG9jdW1lbnRhdGlvbigpIHtcbiAgICByZXR1cm4gPFZpZXdEb2N1bWVudGF0aW9uIHRpdGxlPSdpbXBvcnQgeyBWaWV3SW5wdXRDb2xvciB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCInPlxuICAgICAgICA8Vmlld0RlbW9cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtcIiMgRGVmYXVsdCB1c2FnZVxcblwifVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZ1xuICAgICAgICAgICAgZXhhbXBsZT17XCJpbXBvcnQgUmVhY3QgZnJvbSBcXFwicmVhY3RcXFwiXFxuaW1wb3J0IHsgVmlld0lucHV0Q29sb3IsIFZpZXdQYW5lbCB9IGZyb20gXFxcIkB0b2xva29iYW4vdWlcXFwiXFxuXFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGVtbygpIHtcXG4gICAgY29uc3QgW2NvbG9yLCBzZXRDb2xvcl0gPSBSZWFjdC51c2VTdGF0ZShcXFwiI0Y5MFxcXCIpXFxuICAgIHJldHVybiAoXFxuICAgICAgICA8ZGl2PlxcbiAgICAgICAgICAgIDxWaWV3UGFuZWxcXG4gICAgICAgICAgICAgICAgZGlzcGxheT1cXFwiaW5saW5lLWZsZXhcXFwiXFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XFxcImNvbHVtblxcXCJcXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cXFwic3RyZXRjaFxcXCJcXG4gICAgICAgICAgICAgICAgd2lkdGg9XFxcImF1dG9cXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8Vmlld0lucHV0Q29sb3JcXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb2xvcn1cXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtzZXRDb2xvcn1cXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPVxcXCJNeSBmYXZvdXJpdGUgY29sb3JcXFwiXFxuICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgPC9WaWV3UGFuZWw+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgKVxcbn1cXG5cIn1cbiAgICAgICAgPlxuICAgICAgICAgICAgPERlbW9EZWZhdWx0IC8+XG4gICAgICAgIDwvVmlld0RlbW8+XG4gICAgPC9WaWV3RG9jdW1lbnRhdGlvbj5cbn0iLCIvKipcbiAqIDIwMjQtMTEtMDFUMDc6NDU6MjUuMjk5WlxuICpcbiAqIFRoaXMgZmlsZSBoYXMgYmVlbiBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCB3aXRoOlxuICogbnBtIHJ1biBnZW5lcmF0ZVxuICogXG4gKiBQbGVhc2UgZG8gbm90IG1vZGlmeSBpdCBtYW51YWxseS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgVmlld0lucHV0Q29sb3IgZnJvbSBcIi4vSW5wdXRDb2xvclwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhZ2VWaWV3SW5wdXRDb2xvcigpIHtcbiAgICByZXR1cm4gPFZpZXdJbnB1dENvbG9yIC8+XG59XG4iXSwibmFtZXMiOlsiRGVtbyIsImNvbG9yIiwic2V0Q29sb3IiLCJjb2xvcjIiLCJzZXRDb2xvcjIiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJ3aWR0aCIsInZhbHVlIiwib25DaGFuZ2UiLCJsYWJlbCIsIklucHV0Q29sb3JEb2N1bWVudGF0aW9uIiwiVmlld0RvY3VtZW50YXRpb24iLCJ0aXRsZSIsIlZpZXdEZW1vIiwiZGVzY3JpcHRpb24iLCJleGFtcGxlIiwiUGFnZVZpZXdJbnB1dENvbG9yIl0sInNvdXJjZVJvb3QiOiIifQ==