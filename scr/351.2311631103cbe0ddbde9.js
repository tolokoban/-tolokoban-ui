"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[351],{3514:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),l.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const s=l},6630:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),l.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const s=l},7599:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),l.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const s=l},3714:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),l.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const s=l},1700:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,".\\---lib-dist-view-Combo-Combo-module_ui-view-ComboView_gQHkaw {\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n}\n\n.\\---lib-dist-view-Combo-Combo-module_ui-view-ComboView_gQHkaw.\\---lib-dist-view-Combo-Combo-module_wide_bgtMub {\n    display: flex;\n    width: 100%;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Combo/Combo.module.css"],names:[],mappings:"AAAA;IACI,oBAAoB;IACpB,sBAAsB;IACtB,2BAA2B;IAC3B,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,WAAW;AACf",sourcesContent:[".ui-view-ComboView {\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n}\n\n.ui-view-ComboView.wide {\n    display: flex;\n    width: 100%;\n}\n"],sourceRoot:""}]),l.locals={"ui-view-ComboView":"---lib-dist-view-Combo-Combo-module_ui-view-ComboView_gQHkaw",wide:"---lib-dist-view-Combo-Combo-module_wide_bgtMub"};const s=l},9631:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,"button.ui-view-combo-ComboItemView {\n    position: relative;\n    box-sizing: border-box;\n    font: inherit;\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: none;\n    border-radius: 0rem;\n    height: 2.25rem;\n    padding: 0;\n    cursor: pointer;\n    transition: all 0.2s;\n    filter: brightness(100%);\n    margin: 0;\n    text-align: left;\n    background-color: var(--theme-color-neutral-9);\n    color: var(--theme-color-on-neutral-9);\n}\n\nbutton.ui-view-combo-ComboItemView.selected {\n    z-index: 2;\n    background-color: var(--theme-color-primary-7);\n    color: var(--theme-color-on-primary-7);\n}\n\nbutton.ui-view-combo-ComboItemView:focus {\n    outline: 2px dotted var(--theme-color-accent);\n    outline-offset: 2px;\n}\n\nbutton.ui-view-combo-ComboItemView:active {\n    box-shadow: var(--theme-shadow-button-pressed);\n    filter: brightness(150%);\n}\n\nbutton.ui-view-combo-ComboItemView > div.body {\n    max-height: 2.25rem;\n    margin: 0;\n    padding: 0 0.5rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1 1 auto;\n}\n\nbutton.ui-view-combo-ComboItemView > div.button {\n    display: grid;\n    place-items: center;\n    max-width: 2.25rem;\n    max-height: 2.25rem;\n    width: 2.25rem;\n    height: 2.25rem;\n    margin: 0;\n    padding: 0;\n    border-left: 1px solid var(--theme-color-on-primary-opacity-50);\n}\n\nbutton.ui-view-combo-ComboItemView > div.button > svg {\n    width: 1.75rem;\n    height: 1.75rem;\n}\n\ndiv.ui-view-combo-ComboItemView-list {\n    max-width: calc(90vw - 2rem);\n    width: 320px;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Combo/combo-item/combo-item-view.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,WAAW;IACX,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;IACnB,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,UAAU;IACV,eAAe;IACf,oBAAoB;IACpB,wBAAwB;IACxB,SAAS;IACT,gBAAgB;IAChB,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,UAAU;IACV,8CAA8C;IAC9C,sCAAsC;AAC1C;;AAEA;IACI,6CAA6C;IAC7C,mBAAmB;AACvB;;AAEA;IACI,8CAA8C;IAC9C,wBAAwB;AAC5B;;AAEA;IACI,mBAAmB;IACnB,SAAS;IACT,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,uBAAuB;IACvB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,cAAc;IACd,eAAe;IACf,SAAS;IACT,UAAU;IACV,+DAA+D;AACnE;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,4BAA4B;IAC5B,YAAY;AAChB",sourcesContent:["button.ui-view-combo-ComboItemView {\n    position: relative;\n    box-sizing: border-box;\n    font: inherit;\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    border: none;\n    border-radius: 0rem;\n    height: 2.25rem;\n    padding: 0;\n    cursor: pointer;\n    transition: all 0.2s;\n    filter: brightness(100%);\n    margin: 0;\n    text-align: left;\n    background-color: var(--theme-color-neutral-9);\n    color: var(--theme-color-on-neutral-9);\n}\n\nbutton.ui-view-combo-ComboItemView.selected {\n    z-index: 2;\n    background-color: var(--theme-color-primary-7);\n    color: var(--theme-color-on-primary-7);\n}\n\nbutton.ui-view-combo-ComboItemView:focus {\n    outline: 2px dotted var(--theme-color-accent);\n    outline-offset: 2px;\n}\n\nbutton.ui-view-combo-ComboItemView:active {\n    box-shadow: var(--theme-shadow-button-pressed);\n    filter: brightness(150%);\n}\n\nbutton.ui-view-combo-ComboItemView > div.body {\n    max-height: 2.25rem;\n    margin: 0;\n    padding: 0 0.5rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    flex: 1 1 auto;\n}\n\nbutton.ui-view-combo-ComboItemView > div.button {\n    display: grid;\n    place-items: center;\n    max-width: 2.25rem;\n    max-height: 2.25rem;\n    width: 2.25rem;\n    height: 2.25rem;\n    margin: 0;\n    padding: 0;\n    border-left: 1px solid var(--theme-color-on-primary-opacity-50);\n}\n\nbutton.ui-view-combo-ComboItemView > div.button > svg {\n    width: 1.75rem;\n    height: 1.75rem;\n}\n\ndiv.ui-view-combo-ComboItemView-list {\n    max-width: calc(90vw - 2rem);\n    width: 320px;\n}\n"],sourceRoot:""}]);const s=l},5036:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),t=o.n(i),r=o(6314),l=o.n(r)()(t());l.push([n.id,".\\---lib-dist-view-Label-Label-module_LabelContent_YYb190 {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.\\---lib-dist-view-Label-Label-module_Label_mUUrOO {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,cAAc;IACd,mBAAmB;AACvB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n"],sourceRoot:""}]),l.locals={LabelContent:"---lib-dist-view-Label-Label-module_LabelContent_YYb190",Label:"---lib-dist-view-Label-Label-module_Label_mUUrOO"};const s=l},4351:(n,e,o)=>{o.r(e),o.d(e,{default:()=>T});var i=o(4848),t=o(2296),r=o(8464),l=o(6540),s=o(9870),a=o(6697),A=o(1635),c=o(8188),m=o(5895),d=o(5072),h=o.n(d),u=o(7825),C=o.n(u),v=o(7659),g=o.n(v),b=o(5056),w=o.n(b),p=o(540),x=o.n(p),f=o(1113),I=o.n(f),B=o(9631),y={};function j(n){return(0,i.jsxs)("button",{className:k(n),id:n.id,onClick:()=>{var e;null===(e=n.onClick)||void 0===e||e.call(n,n.value)},children:[(0,i.jsx)("div",{className:"body",children:n.children}),n.showButton&&(0,i.jsx)("div",{className:"button theme-color-primary",children:(0,i.jsx)("svg",{viewBox:"0 0 24 24",children:(0,i.jsx)("path",{fill:"currentColor",d:"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"})})})]})}function k(n){const e=["custom","ui-view-combo-ComboItemView","theme-color-input"];return"string"==typeof n.className&&e.push(n.className),n.selected&&e.push("selected"),e.join(" ")}y.styleTagTransform=I(),y.setAttributes=w(),y.insert=g().bind(null,"head"),y.domAPI=C(),y.insertStyleElement=x(),h()(B.A,y),B.A&&B.A.locals&&B.A.locals;var V=o(1700),_={};_.styleTagTransform=I(),_.setAttributes=w(),_.insert=g().bind(null,"head"),_.domAPI=C(),_.insertStyleElement=x(),h()(V.A,_);const H=V.A&&V.A.locals?V.A.locals:void 0;var S=o(7049);function L(n){const e=function(n){const[e,o]=l.useState({});return l.useEffect((()=>{const e={};for(const o of n){if(!o)continue;const{key:n}=o;"string"==typeof n?e[n]=o:console.error("In <Combo> every child must have a `key` which is a string!",o)}o(e)}),[n]),e}(n.children),[o,t]=(0,s.H)(n),r=function(n,e,o,t){const r=(0,a.h)();return()=>{var l;const s=r.show({content:(0,i.jsx)(c.a,{title:null!==(l=o.title)&&void 0!==l?l:o.label,bodyColor:o.bodyColor,headColor:o.headColor,footColor:o.footColor,buttonCancel:Object.assign(Object.assign({},o.buttonCancel),{onClick:()=>s()}),children:(0,i.jsx)(S.s,{overflow:"auto",display:"flex",flexDirection:"column",gap:"1px",padding:0,children:Object.keys(t).map((o=>(0,i.jsx)(j,{value:o,showButton:!1,selected:o===n,onClick:()=>{s(),e(o)},children:t[o]},o)))})})})}}(o,t,n,e);return(0,i.jsx)(m.a,{value:n.label,children:(0,i.jsx)("div",{className:D(n),style:(0,A.$)(n),children:(0,i.jsx)(j,{showButton:!0,onClick:r,children:e[o]})})})}function D(n){const e=[H.main];return"string"==typeof n.className&&e.push(n.className),e.join(" ")}function E(){const[n,e]=l.useState("fox");return(0,i.jsxs)(L,{label:"Select your favourite animal",value:n,onChange:e,children:[(0,i.jsx)("div",{children:"🐵 - Monkey"},"monkey"),(0,i.jsx)("div",{children:"🐶 - Dog"},"dog"),(0,i.jsx)("div",{children:"🦊 - Fox"},"fox"),(0,i.jsx)("div",{children:"🦁 - Lion"},"lion"),(0,i.jsx)("div",{children:"𓃰 - Elephant"},"elephant"),(0,i.jsx)("div",{children:"🐸 - Frog"},"frog"),(0,i.jsx)("div",{children:"🦀 - Crab"},"crab"),(0,i.jsx)("div",{children:"🦚 - Peacook"},"peacook"),(0,i.jsx)("div",{children:"🐯 - Tiger"},"tiger"),(0,i.jsx)("div",{children:"🦑 - Squid"},"squid"),(0,i.jsx)("div",{children:"🦈 - Shark"},"shark"),(0,i.jsx)("div",{children:"🐨 - Koala"},"koala"),(0,i.jsx)("div",{children:"🦫 - Beaver"},"beaver")]})}function N(){return(0,i.jsx)(t.A,{title:'import { ViewCombo } from "@tolokoban/ui"',children:(0,i.jsx)(r.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewCombo } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [animal, setAnimal] = React.useState("fox")\n    return (\n        <ViewCombo\n            label="Select your favourite animal"\n            value={animal}\n            onChange={setAnimal}\n        >\n            <div key="monkey">🐵 - Monkey</div>\n            <div key="dog">🐶 - Dog</div>\n            <div key="fox">🦊 - Fox</div>\n            <div key="lion">🦁 - Lion</div>\n            <div key="elephant">𓃰 - Elephant</div>\n            <div key="frog">🐸 - Frog</div>\n            <div key="crab">🦀 - Crab</div>\n            <div key="peacook">🦚 - Peacook</div>\n            <div key="tiger">🐯 - Tiger</div>\n            <div key="squid">🦑 - Squid</div>\n            <div key="shark">🦈 - Shark</div>\n            <div key="koala">🐨 - Koala</div>\n            <div key="beaver">🦫 - Beaver</div>\n        </ViewCombo>\n    )\n}\n',children:(0,i.jsx)(E,{})})})}function T(){return(0,i.jsx)(N,{})}},9327:(n,e,o)=>{o.d(e,{f:()=>x});var i=o(4848),t=o(9309);function r(n,e="    ",o=-1){const i="".padEnd(Math.max(0,o)*e.length,e);return"string"==typeof n?`${i}${n}`:n.map((n=>r(n,e,o+1))).join("\n")}var l=o(5072),s=o.n(l),a=o(7825),A=o.n(a),c=o(7659),m=o.n(c),d=o(5056),h=o.n(d),u=o(540),C=o.n(u),v=o(1113),g=o.n(v),b=o(6630),w={};w.styleTagTransform=g(),w.setAttributes=h(),w.insert=m().bind(null,"head"),w.domAPI=A(),w.insertStyleElement=C(),s()(b.A,w);const p=b.A&&b.A.locals?b.A.locals:void 0;function x(n){var e;return(0,i.jsx)(t.A,{className:f(n),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:r(null!==(e=n.children)&&void 0!==e?e:"")})}function f({className:n}){const e=[p.Highlight];return n&&e.push(n),e.join(" ")}},8464:(n,e,o)=>{o.d(e,{A:()=>L});var i=o(4848),t=o(6781),r=o(7049),l=o(6540),s=o(9550),a=o(2182),A=o(5726),c=o(9327),m=o(5072),d=o.n(m),h=o(7825),u=o.n(h),C=o(7659),v=o.n(C),g=o(5056),b=o.n(g),w=o(540),p=o.n(w),x=o(1113),f=o.n(x),I=o(3514),B={};B.styleTagTransform=f(),B.setAttributes=b(),B.insert=v().bind(null,"head"),B.domAPI=u(),B.insertStyleElement=p(),d()(I.A,B);const y=I.A&&I.A.locals?I.A.locals:void 0,j=t.Sx.classNames;function k({className:n,children:e}){const[o,t]=l.useState(!1);return(0,i.jsxs)("div",{className:j.join(n,y.Code),children:[(0,i.jsxs)(s.y,{variant:"text",onClick:()=>t(!o),children:[o?(0,i.jsx)(a.A,{}):(0,i.jsx)(A.A,{}),(0,i.jsx)("div",{children:"Example's code:"})]}),o&&(0,i.jsx)(c.f,{children:e})]})}var V=o(7599),_={};_.styleTagTransform=f(),_.setAttributes=b(),_.insert=v().bind(null,"head"),_.domAPI=u(),_.insertStyleElement=p(),d()(V.A,_);const H=V.A&&V.A.locals?V.A.locals:void 0,S=t.Sx.classNames;function L({className:n,example:e,children:o}){return(0,i.jsxs)(r.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,i.jsx)("div",{className:S.join(n,H.ViewDemo),children:o}),(0,i.jsx)("hr",{}),(0,i.jsx)(k,{children:e})]})}},2296:(n,e,o)=>{o.d(e,{A:()=>f});var i=o(4848),t=o(6781),r=o(7049),l=o(5072),s=o.n(l),a=o(7825),A=o.n(a),c=o(7659),m=o.n(c),d=o(5056),h=o.n(d),u=o(540),C=o.n(u),v=o(1113),g=o.n(v),b=o(3714),w={};w.styleTagTransform=g(),w.setAttributes=h(),w.insert=m().bind(null,"head"),w.domAPI=A(),w.insertStyleElement=C(),s()(b.A,w);const p=b.A&&b.A.locals?b.A.locals:void 0,x=t.Sx.classNames;function f({className:n,title:e,children:o}){return(0,i.jsxs)("div",{className:x.join(n,p.ViewDocumentation),children:[(0,i.jsx)(r.s,{margin:0,padding:"M",color:"primary-2",children:e}),(0,i.jsx)(r.s,{margin:0,padding:"M",overflow:"auto",children:o})]})}},9870:(n,e,o)=>{o.d(e,{H:()=>t});var i=o(6540);function t(n){const[e,o]=i.useState(n.value);return i.useEffect((()=>{o(n.value)}),[n.value]),[e,e=>{var i;o(e),null===(i=n.onChange)||void 0===i||i.call(n,e)}]}},5895:(n,e,o)=>{o.d(e,{a:()=>I});var i=o(4848),t=o(6540),r=o(6781),l=o(5072),s=o.n(l),a=o(7825),A=o.n(a),c=o(7659),m=o.n(c),d=o(5056),h=o.n(d),u=o(540),C=o.n(u),v=o(1113),g=o.n(v),b=o(5036),w={};w.styleTagTransform=g(),w.setAttributes=h(),w.insert=m().bind(null,"head"),w.domAPI=A(),w.insertStyleElement=C(),s()(b.A,w);const p=b.A&&b.A.locals?b.A.locals:void 0;var x=o(7049);const f=r.Sx.classNames;function I({color:n,className:e,value:o,title:r,box:l="column",fullwidth:s,children:a}){const A=`labelled/${t.useId()}`;if(!o)return(0,i.jsx)(i.Fragment,{children:a});const c={};n&&(c.color=`var(--theme-color-${n})`);const m=(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("label",{htmlFor:A,title:r,className:f.join(e,p.Label),style:c,children:o}),a&&(0,i.jsx)("div",{ref:n=>{if(!n)return;const e=n.querySelector("input,textarea,button,meter,output,progress,select");e&&e.setAttribute("id",A)},className:p.LabelContent,children:a})]});switch(l){case"row":return(0,i.jsx)(x.s,{display:s?"flex":"inline-flex",flexDirection:"row",alignItems:"center",gap:"1em",children:m});case"column":return(0,i.jsx)(x.s,{display:s?"flex":"inline-flex",flexDirection:"column",alignItems:"stretch",gap:"0",children:m});default:return m}}},2182:(n,e,o)=>{o.d(e,{A:()=>i});const i=(0,o(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(n,e,o)=>{o.d(e,{A:()=>i});const i=(0,o(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,