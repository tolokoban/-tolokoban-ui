"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[201],{3514:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),l=o.n(i),t=o(6314),r=o.n(t)()(l());r.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),r.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const s=r},6630:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),l=o.n(i),t=o(6314),r=o.n(t)()(l());r.push([n.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),r.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const s=r},7599:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),l=o.n(i),t=o(6314),r=o.n(t)()(l());r.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),r.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const s=r},3714:(n,e,o)=>{o.d(e,{A:()=>s});var i=o(1354),l=o.n(i),t=o(6314),r=o.n(t)()(l());r.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),r.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const s=r},201:(n,e,o)=>{o.r(e),o.d(e,{default:()=>m});var i=o(4848),l=o(2296),t=o(8464),r=o(6697),s=o(4118),a=o(9810);function c(){const n=(0,r.h)();return(0,i.jsx)(s.e,{onLoad:e=>{n.info((0,i.jsxs)("div",{children:[(0,i.jsx)("h1",{children:"Selected files:"}),(0,i.jsx)("ul",{children:e.map((n=>(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:n.name})," (",n.size," bytes) - ",n.type]},n.name)))})]}))},icon:a.A,multiple:!0,children:"Select one or several files"})}function h(){return(0,i.jsx)(l.A,{title:'import { ViewInputFile } from "@tolokoban/ui"',children:(0,i.jsx)(t.A,{description:"# Default usage\n",example:'import React from "react"\nimport { IconImport, ViewInputFile, useModal } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const modal = useModal()\n    const handleLoad = (files: File[]) => {\n        void modal.info(\n            <div>\n                <h1>Selected files:</h1>\n                <ul>\n                    {files.map((file) => (\n                        <li key={file.name}>\n                            <b>{file.name}</b> ({file.size} bytes) - {file.type}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n    return (\n        <ViewInputFile onLoad={handleLoad} icon={IconImport} multiple>\n            Select one or several files\n        </ViewInputFile>\n    )\n}\n',children:(0,i.jsx)(c,{})})})}function m(){return(0,i.jsx)(h,{})}},9327:(n,e,o)=>{o.d(e,{f:()=>x});var i=o(4848),l=o(9309);function t(n,e="    ",o=-1){const i="".padEnd(Math.max(0,o)*e.length,e);return"string"==typeof n?`${i}${n}`:n.map((n=>t(n,e,o+1))).join("\n")}var r=o(5072),s=o.n(r),a=o(7825),c=o.n(a),h=o(7659),m=o.n(h),A=o(5056),d=o.n(A),g=o(540),u=o.n(g),v=o(1113),C=o.n(v),p=o(6630),w={};w.styleTagTransform=C(),w.setAttributes=d(),w.insert=m().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=u(),s()(p.A,w);const f=p.A&&p.A.locals?p.A.locals:void 0;function x(n){var e;return(0,i.jsx)(l.A,{className:H(n),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:t(null!==(e=n.children)&&void 0!==e?e:"")})}function H({className:n}){const e=[f.Highlight];return n&&e.push(n),e.join(" ")}},8464:(n,e,o)=>{o.d(e,{A:()=>S});var i=o(4848),l=o(6781),t=o(7049),r=o(6540),s=o(9550),a=o(2182),c=o(5726),h=o(9327),m=o(5072),A=o.n(m),d=o(7825),g=o.n(d),u=o(7659),v=o.n(u),C=o(5056),p=o.n(C),w=o(540),f=o.n(w),x=o(1113),H=o.n(x),y=o(3514),I={};I.styleTagTransform=H(),I.setAttributes=p(),I.insert=v().bind(null,"head"),I.domAPI=g(),I.insertStyleElement=f(),A()(y.A,I);const j=y.A&&y.A.locals?y.A.locals:void 0,b=l.Sx.classNames;function V({className:n,children:e}){const[o,l]=r.useState(!1);return(0,i.jsxs)("div",{className:b.join(n,j.Code),children:[(0,i.jsxs)(s.y,{variant:"text",onClick:()=>l(!o),children:[o?(0,i.jsx)(a.A,{}):(0,i.jsx)(c.A,{}),(0,i.jsx)("div",{children:"Example's code:"})]}),o&&(0,i.jsx)(h.f,{children:e})]})}var _=o(7599),k={};k.styleTagTransform=H(),k.setAttributes=p(),k.insert=v().bind(null,"head"),k.domAPI=g(),k.insertStyleElement=f(),A()(_.A,k);const B=_.A&&_.A.locals?_.A.locals:void 0,D=l.Sx.classNames;function S({className:n,example:e,children:o}){return(0,i.jsxs)(t.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,i.jsx)("div",{className:D.join(n,B.ViewDemo),children:o}),(0,i.jsx)("hr",{}),(0,i.jsx)(V,{children:e})]})}},2296:(n,e,o)=>{o.d(e,{A:()=>H});var i=o(4848),l=o(6781),t=o(7049),r=o(5072),s=o.n(r),a=o(7825),c=o.n(a),h=o(7659),m=o.n(h),A=o(5056),d=o.n(A),g=o(540),u=o.n(g),v=o(1113),C=o.n(v),p=o(3714),w={};w.styleTagTransform=C(),w.setAttributes=d(),w.insert=m().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=u(),s()(p.A,w);const f=p.A&&p.A.locals?p.A.locals:void 0,x=l.Sx.classNames;function H({className:n,title:e,children:o}){return(0,i.jsxs)("div",{className:x.join(n,f.ViewDocumentation),children:[(0,i.jsx)(t.s,{margin:0,padding:"M",color:"primary-2",children:e}),(0,i.jsx)(t.s,{margin:0,padding:"M",overflow:"auto",children:o})]})}},4118:(n,e,o)=>{o.d(e,{e:()=>r});var i=o(4848),l=o(6540),t=o(9550);function r(n){var e;const o=l.useRef(null);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.y,Object.assign({},n,{onClick:()=>{const n=o.current;n&&n.click()}})),(0,i.jsx)("input",{style:{display:"none"},ref:o,type:"file",accept:null!==(e=n.accept)&&void 0!==e?e:"*/*",multiple:!!n.multiple,onChange:e=>{const o=e.target;if(!o)return;const{files:i}=o;if(i&&i.length>0){const e=[];for(let n=0;n<i.length;n++){const o=i.item(n);o&&e.push(o)}n.onLoad(e)}}})]})}},2182:(n,e,o)=>{o.d(e,{A:()=>i});const i=(0,o(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(n,e,o)=>{o.d(e,{A:()=>i});const i=(0,o(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")},9810:(n,e,o)=>{o.d(e,{A:()=>i});const i=(0,o(8471).B)("M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z","IconImport")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,