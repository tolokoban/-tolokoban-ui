"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[123],{2932:(e,n,l)=>{l.d(n,{A:()=>s});var t=l(1354),i=l.n(t),o=l(6314),a=l.n(o)()(i());a.push([e.id,".\\---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix {\n    display: flex;\n    gap: 0.5em;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n}\n\n.\\---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix > input {\n    flex: 1 1 auto;\n}\n\n.\\---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix > div {\n    flex: 0 0 auto;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Slider/Slider.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,UAAU;IACV,2BAA2B;IAC3B,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".Slider {\n    display: flex;\n    gap: 0.5em;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n}\n\n.Slider > input {\n    flex: 1 1 auto;\n}\n\n.Slider > div {\n    flex: 0 0 auto;\n}\n"],sourceRoot:""}]),a.locals={Slider:"---lib-dist-view-Slider-Slider-module_Slider_Unl5Ix"};const s=a},6123:(e,n,l)=>{l.r(n),l.d(n,{default:()=>V});var t=l(4848),i=l(2296),o=l(8464),a=l(6540),s=l(9996),r=l(7049),u=l(4979),d=l(6781),c=l(9870),m=l(5072),A=l.n(m),x=l(7825),f=l.n(x),v=l(7659),p=l.n(v),h=l(5056),S=l.n(h),g=l(540),C=l.n(g),b=l(1113),j=l.n(b),w=l(2932),I={};I.styleTagTransform=j(),I.setAttributes=S(),I.insert=p().bind(null,"head"),I.domAPI=f(),I.insertStyleElement=C(),A()(w.A,I);const B=w.A&&w.A.locals?w.A.locals:void 0,y=d.Sx.classNames;function _({min:e,max:n,step:l,className:i,wide:o,text:a,value:s,onChange:r}){const[u,d]=(0,c.H)({value:s,onChange:r});return(0,t.jsxs)("div",{className:y.join(i,B.Slider,o?"wide":""),children:[(0,t.jsx)("input",{type:"range",min:null!=e?e:0,max:null!=n?n:0,step:null!=l?l:1,value:u,onChange:e=>d(parseFloat(e.target.value))}),a&&(0,t.jsx)("div",{children:k(a,u)})]})}function k(e,n){return"string"==typeof e?e:"number"==typeof e?`${e}`:e(n)}function R(){const[e,n]=a.useState(223),[l,i]=a.useState(173),[o,d]=a.useState(42);console.log("Render:",e,l,o);const c=a.useCallback((e=>{const l=new s.A(e);console.log("ðŸš€ [Default] value, color = ",e,l);const t=Math.floor(255*l.R);n(t);const o=Math.floor(255*l.G);i(o);const a=Math.floor(255*l.B);d(a),console.log("ðŸš€ [Default] R, G, B = ",t,o,a)}),[]);return(0,t.jsxs)(r.s,{display:"grid",gridTemplateColumns:"auto 1fr auto",gap:"M",maxWidth:"480px",children:[(0,t.jsx)("div",{style:{gridColumn:"1/-1",display:"grid",placeItems:"center"},children:(0,t.jsx)(u.n,{label:"Click the color input to find out the color components",value:`rgb(${e},${l},${o})`,onChange:c})}),(0,t.jsx)("div",{children:"Red:"}),(0,t.jsx)(_,{value:e,onChange:n,min:0,max:255}),(0,t.jsx)("b",{children:e}),(0,t.jsx)("div",{children:"Green:"}),(0,t.jsx)(_,{value:l,onChange:i,min:0,max:255}),(0,t.jsx)("b",{children:l}),(0,t.jsx)("div",{children:"Blue:"}),(0,t.jsx)(_,{value:o,onChange:d,min:0,max:255}),(0,t.jsx)("b",{children:o})]})}function U(){return(0,t.jsx)(i.A,{title:'import { ViewSlider } from "@tolokoban/ui"',children:(0,t.jsx)(o.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewSlider } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [value, setValue] = React.useState(63)\n    return <ViewSlider value={value} onChange={setValue} min={0} max={100} />\n}\n',children:(0,t.jsx)(R,{})})})}function V(){return(0,t.jsx)(U,{})}},9870:(e,n,l)=>{l.d(n,{H:()=>i});var t=l(6540);function i(e){const[n,l]=t.useState(e.value);return t.useEffect((()=>{l(e.value)}),[e.value]),[n,n=>{var t;l(n),null===(t=e.onChange)||void 0===t||t.call(e,n)}]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,