"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[765],{3514:(e,n,o)=>{o.d(n,{A:()=>a});var s=o(1354),i=o.n(s),r=o(6314),t=o.n(r)()(i());t.push([e.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),t.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const a=t},7599:(e,n,o)=>{o.d(n,{A:()=>a});var s=o(1354),i=o.n(s),r=o(6314),t=o.n(r)()(i());t.push([e.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),t.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const a=t},3714:(e,n,o)=>{o.d(n,{A:()=>a});var s=o(1354),i=o.n(s),r=o(6314),t=o.n(r)()(i());t.push([e.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),t.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const a=t},4765:(e,n,o)=>{o.r(n),o.d(n,{default:()=>d});var s=o(4848),i=o(2296),r=o(8464),t=o(6540),a=o(1323);function c(){const[e,n]=t.useState("Tolokoban");return(0,s.jsxs)("p",{children:["The name ",(0,s.jsx)(a.H,{value:e,onChange:n})," is spelled"," ",(0,s.jsx)("b",{children:(0,s.jsx)("code",{children:e.split("").reverse().join("")})})," ","in reverse."]})}function l(){return(0,s.jsx)(i.A,{title:'import { ViewInputText } from "@tolokoban/ui"',children:(0,s.jsx)(r.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputText } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [name, setName] = React.useState("Tolokoban")\n    return (\n        <p>\n            The name <ViewInputText value={name} onChange={setName} /> is\n            spelled{" "}\n            <b>\n                <code>{name.split("").reverse().join("")}</code>\n            </b>{" "}\n            in reverse.\n        </p>\n    )\n}\n',children:(0,s.jsx)(c,{})})})}function d(){return(0,s.jsx)(l,{})}},8464:(e,n,o)=>{o.d(n,{A:()=>N});var s=o(4848),i=o(6781),r=o(7049),t=o(6540),a=o(9550),c=o(2182),l=o(5726),d=o(9327),m=o(5072),u=o.n(m),A=o(7825),p=o.n(A),v=o(7659),h=o.n(v),w=o(5056),x=o.n(w),C=o(540),V=o.n(C),j=o(1113),D=o.n(j),b=o(3514),g={};g.styleTagTransform=D(),g.setAttributes=x(),g.insert=h().bind(null,"head"),g.domAPI=p(),g.insertStyleElement=V(),u()(b.A,g);const f=b.A&&b.A.locals?b.A.locals:void 0,k=i.Sx.classNames;function _({className:e,children:n}){const[o,i]=t.useState(!1);return(0,s.jsxs)("div",{className:k.join(e,f.Code),children:[(0,s.jsxs)(a.y,{variant:"text",onClick:()=>i(!o),children:[o?(0,s.jsx)(c.A,{}):(0,s.jsx)(l.A,{}),(0,s.jsx)("div",{children:"Example's code:"})]}),o&&(0,s.jsx)(d.f,{children:n})]})}var S=o(7599),T={};T.styleTagTransform=D(),T.setAttributes=x(),T.insert=h().bind(null,"head"),T.domAPI=p(),T.insertStyleElement=V(),u()(S.A,T);const y=S.A&&S.A.locals?S.A.locals:void 0,I=i.Sx.classNames;function N({className:e,example:n,children:o}){return(0,s.jsxs)(r.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,s.jsx)("div",{className:I.join(e,y.ViewDemo),children:o}),(0,s.jsx)("hr",{}),(0,s.jsx)(_,{children:n})]})}},2296:(e,n,o)=>{o.d(n,{A:()=>D});var s=o(4848),i=o(6781),r=o(7049),t=o(5072),a=o.n(t),c=o(7825),l=o.n(c),d=o(7659),m=o.n(d),u=o(5056),A=o.n(u),p=o(540),v=o.n(p),h=o(1113),w=o.n(h),x=o(3714),C={};C.styleTagTransform=w(),C.setAttributes=A(),C.insert=m().bind(null,"head"),C.domAPI=l(),C.insertStyleElement=v(),a()(x.A,C);const V=x.A&&x.A.locals?x.A.locals:void 0,j=i.Sx.classNames;function D({className:e,title:n,children:o}){return(0,s.jsxs)("div",{className:j.join(e,V.ViewDocumentation),children:[(0,s.jsx)(r.s,{margin:0,padding:"M",color:"primary-2",children:n}),(0,s.jsx)(r.s,{margin:0,padding:"M",overflow:"auto",children:o})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,