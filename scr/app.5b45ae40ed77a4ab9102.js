(()=>{"use strict";var e,n,t,o={8209:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,".src-app-layout-module_layout_drm6hb aside {\n    display: flex;\n    justify-content: flex-start;\n    align-items: stretch;\n    gap: 0.25em;\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n}\n\n.src-app-layout-module_layout_drm6hb aside button {\n    all: inherit;\n    background: var(--theme-color-primary-3);\n    color: var(--theme-color-on-primary-3);\n    cursor: pointer;\n    line-height: 2em;\n    padding: 0;\n    padding-inline: 1em;\n    font-size: 120%;\n    text-decoration: underline;\n}\n\n.src-app-layout-module_layout_drm6hb aside button.src-app-layout-module_active_xyuceE {\n    background: var(--theme-color-secondary-5);\n    color: var(--theme-color-on-secondary-5);\n    font-weight: bolder;\n    text-decoration: none;\n}\n\n.src-app-layout-module_layout_drm6hb aside > div:last-child {\n    flex: 1 1 auto;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding-inline-end: 1em;\n}\n\n.src-app-layout-module_layout_drm6hb main {\n    position: relative;\n    background: var(--theme-color-secondary-5);\n    color: var(--theme-color-on-secondary-5);\n}\n\n.src-app-layout-module_layout_drm6hb main > div {\n    position: absolute;\n    left: 0.5em;\n    top: 0.5em;\n    right: 0.5em;\n    bottom: 0.5em;\n    width: calc(100% - 1em);\n    height: calc(100% - 1em);\n}\n","",{version:3,sources:["webpack://./src/app/layout.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,2BAA2B;IAC3B,oBAAoB;IACpB,WAAW;IACX,yBAAyB;IACzB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,wCAAwC;IACxC,sCAAsC;IACtC,eAAe;IACf,gBAAgB;IAChB,UAAU;IACV,mBAAmB;IACnB,eAAe;IACf,0BAA0B;AAC9B;;AAEA;IACI,0CAA0C;IAC1C,wCAAwC;IACxC,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,0CAA0C;IAC1C,wCAAwC;AAC5C;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,wBAAwB;AAC5B",sourcesContent:[".layout aside {\n    display: flex;\n    justify-content: flex-start;\n    align-items: stretch;\n    gap: 0.25em;\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n}\n\n.layout aside button {\n    all: inherit;\n    background: var(--theme-color-primary-3);\n    color: var(--theme-color-on-primary-3);\n    cursor: pointer;\n    line-height: 2em;\n    padding: 0;\n    padding-inline: 1em;\n    font-size: 120%;\n    text-decoration: underline;\n}\n\n.layout aside button.active {\n    background: var(--theme-color-secondary-5);\n    color: var(--theme-color-on-secondary-5);\n    font-weight: bolder;\n    text-decoration: none;\n}\n\n.layout aside > div:last-child {\n    flex: 1 1 auto;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding-inline-end: 1em;\n}\n\n.layout main {\n    position: relative;\n    background: var(--theme-color-secondary-5);\n    color: var(--theme-color-on-secondary-5);\n}\n\n.layout main > div {\n    position: absolute;\n    left: 0.5em;\n    top: 0.5em;\n    right: 0.5em;\n    bottom: 0.5em;\n    width: calc(100% - 1em);\n    height: calc(100% - 1em);\n}\n"],sourceRoot:""}]),a.locals={layout:"src-app-layout-module_layout_drm6hb",active:"src-app-layout-module_active_xyuceE"};const s=a},9165:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,'html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;;;IAGI,SAAS;IACT,mCAAmC;IACnC,kCAAkC;IAClC,kBAAkB;IAClB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;IACI;iBACa;AACjB;;AAEA;IACI,UAAU;IACV,wBAAwB;AAC5B",sourcesContent:['html,\nbody,\n#root {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    font-family: sans-serif;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",\n        monospace;\n}\n\n#tgd-logo.vanish {\n    opacity: 0;\n    transition: opacity 0.9s;\n}\n'],sourceRoot:""}]);const s=a},1864:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,".src-view-Link-Link-module_Link_IxAcjz {\n    margin: 0.125em;\n}\n","",{version:3,sources:["webpack://./src/view/Link/Link.module.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB",sourcesContent:[".Link {\n    margin: 0.125em;\n}\n"],sourceRoot:""}]),a.locals={Link:"src-view-Link-Link-module_Link_IxAcjz"};const s=a},751:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,".\\---lib-dist-theme-css-dimension-module_fullwidth_mWZEak {\n    inline-size: 100%;\n    box-sizing: border-box;\n}\n\n.\\---lib-dist-theme-css-dimension-module_fullheight_Y5Z2qL {\n    block-size: 100%;\n    box-sizing: border-box;\n}\n\n.\\---lib-dist-theme-css-dimension-module_fullsize_q7am9x {\n}\n\n@media (orientation: landscape) {\n    .\\---lib-dist-theme-css-dimension-module_fullwide_Q2newv {\n    }\n    .\\---lib-dist-theme-css-dimension-module_fullnarrow_IiZNNs {\n    }\n}\n\n@media (orientation: portrait) {\n    .\\---lib-dist-theme-css-dimension-module_fullwide_Q2newv {\n    }\n    .\\---lib-dist-theme-css-dimension-module_fullnarrow_IiZNNs {\n    }\n}\n","",{version:3,sources:["webpack://./../lib/dist/theme/css/dimension.module.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;AAEA;;AAEA;IACI;IAEA;IACA;IAEA;AACJ;;AAEA;IACI;IAEA;IACA;IAEA;AACJ",sourcesContent:[".fullwidth {\n    inline-size: 100%;\n    box-sizing: border-box;\n}\n\n.fullheight {\n    block-size: 100%;\n    box-sizing: border-box;\n}\n\n.fullsize {\n    composes: fullwidth fullheight;\n}\n\n@media (orientation: landscape) {\n    .fullwide {\n        composes: fullwidth;\n    }\n    .fullnarrow {\n        composes: fullheight;\n    }\n}\n\n@media (orientation: portrait) {\n    .fullwide {\n        composes: fullheight;\n    }\n    .fullnarrow {\n        composes: fullwidth;\n    }\n}\n"],sourceRoot:""}]),a.locals={fullwidth:"---lib-dist-theme-css-dimension-module_fullwidth_mWZEak",fullheight:"---lib-dist-theme-css-dimension-module_fullheight_Y5Z2qL",fullsize:"---lib-dist-theme-css-dimension-module_fullsize_q7am9x ---lib-dist-theme-css-dimension-module_fullwidth_mWZEak ---lib-dist-theme-css-dimension-module_fullheight_Y5Z2qL",fullwide:"---lib-dist-theme-css-dimension-module_fullwide_Q2newv ---lib-dist-theme-css-dimension-module_fullwidth_mWZEak ---lib-dist-theme-css-dimension-module_fullheight_Y5Z2qL",fullnarrow:"---lib-dist-theme-css-dimension-module_fullnarrow_IiZNNs ---lib-dist-theme-css-dimension-module_fullheight_Y5Z2qL ---lib-dist-theme-css-dimension-module_fullwidth_mWZEak"};const s=a},3926:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,'* {\n    box-sizing: border-box;\n}\n\nb {\n    margin: 0 0.3em;\n}\n\n/**\n * Aspect ratio\n * Example: <div style="--custom-aspect-ratio=16/9">...</div>\n */\n[style*="--custom-aspect-ratio"] > :first-child {\n    width: 100%;\n}\n[style*="--custom-aspect-ratio"] > img {\n    height: auto;\n}\n@supports (--custom: property) {\n    [style*="--custom-aspect-ratio"] {\n        position: relative;\n    }\n    [style*="--custom-aspect-ratio"]::before {\n        content: "";\n        display: block;\n        padding-bottom: calc(100% / (var(--custom-aspect-ratio)));\n    }\n    [style*="--custom-aspect-ratio"] > :first-child {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n    }\n}\n',"",{version:3,sources:["webpack://./../lib/dist/theme/theme.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;;;EAGE;AACF;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;AACA;IACI;QACI,kBAAkB;IACtB;IACA;QACI,WAAW;QACX,cAAc;QACd,yDAAyD;IAC7D;IACA;QACI,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,YAAY;IAChB;AACJ",sourcesContent:['* {\n    box-sizing: border-box;\n}\n\nb {\n    margin: 0 0.3em;\n}\n\n/**\n * Aspect ratio\n * Example: <div style="--custom-aspect-ratio=16/9">...</div>\n */\n[style*="--custom-aspect-ratio"] > :first-child {\n    width: 100%;\n}\n[style*="--custom-aspect-ratio"] > img {\n    height: auto;\n}\n@supports (--custom: property) {\n    [style*="--custom-aspect-ratio"] {\n        position: relative;\n    }\n    [style*="--custom-aspect-ratio"]::before {\n        content: "";\n        display: block;\n        padding-bottom: calc(100% / (var(--custom-aspect-ratio)));\n    }\n    [style*="--custom-aspect-ratio"] > :first-child {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n    }\n}\n'],sourceRoot:""}]);const s=a},2318:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,".\\---lib-dist-view-Button-Button-module_Button_qycH3q {\n    --custom-color-main-alpha: #f908;\n    --custom-color-main: #f90;\n    --custom-color-text: #000;\n    --custom-thickness: 0.125em;\n    font: inherit;\n    appearance: none;\n    border: none;\n    outline: none;\n    background: none;\n    cursor: pointer;\n    border-radius: 0;\n    transition: all 0.2s;\n    position: relative;\n    font-variant: small-caps;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n    overflow: hidden;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q > * {\n    flex: 0 0 auto;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q > div.\\---lib-dist-view-Button-Button-module_label_DJs6Ad {\n    flex: 1 1 auto;\n    min-width: 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q.\\---lib-dist-view-Button-Button-module_icon_dEGTat {\n    justify-content: space-between;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q:focus {\n    outline-offset: var(--custom-thickness);\n    outline-style: dotted;\n    outline-width: var(--custom-thickness);\n    outline-color: var(--custom-color-main);\n}\n\n.\\---lib-dist-view-Button-Button-module_elevated_M62ms5,\n.\\---lib-dist-view-Button-Button-module_filled_I_7gCU {\n    background: var(--custom-color-main);\n    color: var(--custom-color-text);\n}\n\n.\\---lib-dist-view-Button-Button-module_elevated_M62ms5 {\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.\\---lib-dist-view-Button-Button-module_outlined_fi4H7f {\n    border: var(--custom-thickness) solid var(--custom-color-main);\n    color: var(--custom-color-main);\n    background: transparent;\n}\n\n.\\---lib-dist-view-Button-Button-module_text_pYj7KK {\n    color: var(--custom-color-text);\n    background: transparent;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q:disabled,\n.\\---lib-dist-view-Button-Button-module_disabled_wBrefs {\n    cursor: default;\n    box-shadow: none;\n    filter: grayscale(100%);\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q:not(:disabled):active {\n    transform: translateY(0.25em);\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q.\\---lib-dist-view-Button-Button-module_elevated_M62ms5:not(:disabled):active {\n    box-shadow: 0 0.25em 0.5em #0005;\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q:not(:disabled):hover {\n    filter: brightness(150%);\n    backdrop-filter: brightness(50%);\n}\n\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q.\\---lib-dist-view-Button-Button-module_elevated_M62ms5:not(:disabled):hover,\n.\\---lib-dist-view-Button-Button-module_Button_qycH3q.\\---lib-dist-view-Button-Button-module_filled_I_7gCU:not(:disabled):hover {\n    filter: brightness(120%);\n    backdrop-filter: none;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Button/Button.module.css"],names:[],mappings:"AAAA;IACI,gCAAgC;IAChC,yBAAyB;IACzB,yBAAyB;IACzB,2BAA2B;IAC3B,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,gBAAgB;IAChB,eAAe;IACf,gBAAgB;IAChB,oBAAoB;IACpB,kBAAkB;IAClB,wBAAwB;IACxB,oBAAoB;IACpB,mBAAmB;IACnB,2BAA2B;IAC3B,mBAAmB;IACnB,QAAQ;IACR,gBAAgB;AACpB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;IACnB,uBAAuB;IACvB,oBAAoB;IACpB,mBAAmB;IACnB,2BAA2B;IAC3B,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,uCAAuC;IACvC,qBAAqB;IACrB,sCAAsC;IACtC,uCAAuC;AAC3C;;AAEA;;IAEI,oCAAoC;IACpC,+BAA+B;AACnC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,8DAA8D;IAC9D,+BAA+B;IAC/B,uBAAuB;AAC3B;;AAEA;IACI,+BAA+B;IAC/B,uBAAuB;AAC3B;;AAEA;;IAEI,eAAe;IACf,gBAAgB;IAChB,uBAAuB;IACvB,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,wBAAwB;IACxB,gCAAgC;AACpC;;AAEA;;IAEI,wBAAwB;IACxB,qBAAqB;AACzB",sourcesContent:[".Button {\n    --custom-color-main-alpha: #f908;\n    --custom-color-main: #f90;\n    --custom-color-text: #000;\n    --custom-thickness: 0.125em;\n    font: inherit;\n    appearance: none;\n    border: none;\n    outline: none;\n    background: none;\n    cursor: pointer;\n    border-radius: 0;\n    transition: all 0.2s;\n    position: relative;\n    font-variant: small-caps;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n    overflow: hidden;\n}\n\n.Button > * {\n    flex: 0 0 auto;\n}\n\n.Button > div.label {\n    flex: 1 1 auto;\n    min-width: 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    display: inline-flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 1em;\n}\n\n.Button.icon {\n    justify-content: space-between;\n}\n\n.Button:focus {\n    outline-offset: var(--custom-thickness);\n    outline-style: dotted;\n    outline-width: var(--custom-thickness);\n    outline-color: var(--custom-color-main);\n}\n\n.elevated,\n.filled {\n    background: var(--custom-color-main);\n    color: var(--custom-color-text);\n}\n\n.elevated {\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.outlined {\n    border: var(--custom-thickness) solid var(--custom-color-main);\n    color: var(--custom-color-main);\n    background: transparent;\n}\n\n.text {\n    color: var(--custom-color-text);\n    background: transparent;\n}\n\n.Button:disabled,\n.disabled {\n    cursor: default;\n    box-shadow: none;\n    filter: grayscale(100%);\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.Button:not(:disabled):active {\n    transform: translateY(0.25em);\n}\n\n.Button.elevated:not(:disabled):active {\n    box-shadow: 0 0.25em 0.5em #0005;\n}\n\n.Button:not(:disabled):hover {\n    filter: brightness(150%);\n    backdrop-filter: brightness(50%);\n}\n\n.Button.elevated:not(:disabled):hover,\n.Button.filled:not(:disabled):hover {\n    filter: brightness(120%);\n    backdrop-filter: none;\n}\n"],sourceRoot:""}]),a.locals={Button:"---lib-dist-view-Button-Button-module_Button_qycH3q",label:"---lib-dist-view-Button-Button-module_label_DJs6Ad",icon:"---lib-dist-view-Button-Button-module_icon_dEGTat",elevated:"---lib-dist-view-Button-Button-module_elevated_M62ms5",filled:"---lib-dist-view-Button-Button-module_filled_I_7gCU",outlined:"---lib-dist-view-Button-Button-module_outlined_fi4H7f",text:"---lib-dist-view-Button-Button-module_text_pYj7KK",disabled:"---lib-dist-view-Button-Button-module_disabled_wBrefs"};const s=a},6380:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,".\\---lib-dist-view-Panel-Panel-module_Panel_hjkVuc {\n    margin: 0;\n    padding: 0;\n}\n\n.\\---lib-dist-view-Panel-Panel-module_Panel_hjkVuc > *.flex-0 {\n    flex: 0 0 auto;\n}\n\n.\\---lib-dist-view-Panel-Panel-module_Panel_hjkVuc > *.flex-1 {\n    flex: 1 1 auto;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Panel/Panel.module.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".Panel {\n    margin: 0;\n    padding: 0;\n}\n\n.Panel > :global(*.flex-0) {\n    flex: 0 0 auto;\n}\n\n.Panel > :global(*.flex-1) {\n    flex: 1 1 auto;\n}\n"],sourceRoot:""}]),a.locals={Panel:"---lib-dist-view-Panel-Panel-module_Panel_hjkVuc"};const s=a},4708:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(1354),i=t.n(o),l=t(6314),a=t.n(l)()(i());a.push([e.id,".\\---lib-dist-view-Strip-Strip-module_Strip_dxgrWS {\n    display: grid;\n    place-items: stretch;\n    padding: 0;\n    margin: 0;\n    gap: 0;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Strip/Strip.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,oBAAoB;IACpB,UAAU;IACV,SAAS;IACT,MAAM;AACV",sourcesContent:[".Strip {\n    display: grid;\n    place-items: stretch;\n    padding: 0;\n    margin: 0;\n    gap: 0;\n}\n"],sourceRoot:""}]),a.locals={Strip:"---lib-dist-view-Strip-Strip-module_Strip_dxgrWS"};const s=a},6020:(e,n,t)=>{var o=t(4848),i=t(6540),l=t(5338);const a="0.15.0";var s=t(9142);const r={"/":["/"],"/api":["/api"],"/test":["/test"],"/view":["/view"],"/view/Button":["/view/Button"],"/view/CodeHighlighter":["/view/CodeHighlighter"],"/view/Dialog":["/view/Dialog"],"/view/FloatingButton":["/view/FloatingButton"],"/view/InputColor":["/view/InputColor"],"/view/InputFile":["/view/InputFile"],"/view/InputImage":["/view/InputImage"],"/view/InputMultiText":["/view/InputMultiText"],"/view/InputText":["/view/InputText"],"/view/Label":["/view/Label"],"/view/Options":["/view/Options"],"/view/Panel":["/view/Panel"],"/view/Read":["/view/Read"],"/view/Scroll":["/view/Scroll"],"/view/Slider":["/view/Slider"],"/view/Spinner":["/view/Spinner"],"/view/Strip":["/view/Strip"],"/view/Switch":["/view/Switch"],"/view/Tabs":["/view/Tabs"],"/view/Touchable":["/view/Touchable"]};function c(e,...n){return()=>{!function(e,...n){var t;const o=A(e,n);o!==(null===(t=m.value)||void 0===t?void 0:t.path)&&(window.location.hash=o)}(e,...n)}}function d(e){let n=null;for(const t of Object.values(r)){const o=u(e,t);if(o){if(0===o.distance)return o;(!n||o.distance<n.distance)&&(n=o)}}return n}function u(e,n){if(!n)return null;let t=e;const o={};for(let e=0;e<n.length;e++){if(t.length<1)return null;const i=n[e];if(i.startsWith("[")){const e=i.substring(1,i.length-1),[n,l]=h(t);o[e]=n,t=l}else{if(!t.startsWith(i))return null;t=t.substring(i.length+1)}}return{path:e,route:n.join("/"),params:o,distance:t.length}}function h(e){const n=e.indexOf("/");return n<0?[e,""]:[e.substring(0,n),e.substring(n+1)]}function A(e,n){const t=r[e];let o=0;return t.map((e=>"["===e.charAt(0)?n[o++]:e)).join("/")}const m=new class{constructor(e){this.security=e,this.listeners=new Set,this._value=null,this.handleHashChange=e=>{const n=this.extractHash(e.oldURL),t=this.extractHash(e.newURL),o=this.ensureAbsoluteHash(t,n);o!==t&&history.replaceState({},"",`#${o}`),this.setHash(o)},this.nonEmpty=e=>"string"==typeof e&&e.trim().length>0,this.setHash(this.extractHash(window.location.href)).then((()=>window.addEventListener("hashchange",this.handleHashChange)))}addListener(e){this.listeners.add(e)}removeListener(e){this.listeners.delete(e)}get value(){return this._value}setHash(e){return n=this,t=void 0,i=function*(){var n;let t=d(e);if(t)for(const[e,n]of this.security){if(!t.route.startsWith(e))continue;const o=yield n(t.route);if(o&&o!==t.route&&(t=d(o),!t))break}(null===(n=this._value)||void 0===n?void 0:n.route)!==(null==t?void 0:t.route)&&(this._value=t,this.listeners.forEach((e=>e(t))))},new((o=void 0)||(o=Promise))((function(e,l){function a(e){try{r(i.next(e))}catch(e){l(e)}}function s(e){try{r(i.throw(e))}catch(e){l(e)}}function r(n){var t;n.done?e(n.value):(t=n.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}r((i=i.apply(n,t||[])).next())}));var n,t,o,i}extractHash(e){const n=new URL(e).hash;return n?n.startsWith("#")?n.substring(1):n:"/"}ensureAbsoluteHash(e,n){if(e.startsWith("/"))return e;let t=e;for(;t.startsWith("./");)t=t.substring(2);const o=n.split("/").filter(this.nonEmpty);for(const n of e.split("/"))".."===n?o.length>0&&o.pop():o.push(n);return`/${o.filter(this.nonEmpty).join("/")}`}}([]);var p=t(9168),f=t(5072),b=t.n(f),v=t(7825),g=t.n(v),w=t(7659),x=t.n(w),B=t(5056),C=t.n(B),y=t(540),I=t.n(y),j=t(1113),k=t.n(j),_=t(8209),S={};S.styleTagTransform=k(),S.setAttributes=C(),S.insert=x().bind(null,"head"),S.domAPI=g(),S.insertStyleElement=I(),b()(_.A,S);const P=_.A&&_.A.locals?_.A.locals:void 0;function E({children:e}){return(0,o.jsxs)(p.U,{className:P.layout,fullsize:!0,color:"primary-1",orientation:"row",template:"*1",children:[(0,o.jsxs)("aside",{children:[(0,o.jsx)("button",{className:T("/"),type:"button",onClick:c("/"),children:"Welcome"}),(0,o.jsx)("button",{className:T("/view"),type:"button",onClick:c("/view"),children:"Components"}),(0,o.jsx)("button",{className:T("/api"),type:"button",onClick:c("/api"),children:"API"}),(0,o.jsxs)("div",{children:["@tolokoban/ui v",a]})]}),(0,o.jsx)("main",{children:(0,o.jsx)("div",{children:e})})]})}function T(e){return s.A.classNames.join(function(e,...n){var t;return(null===(t=m.value)||void 0===t?void 0:t.path)===A(e,n)}(e)&&P.active)}var $=t(7049),L=t(3991);function z({children:e}){return(0,o.jsxs)($.s,{display:"flex",alignItems:"stretch",height:"100%",children:[(0,o.jsxs)($.s,{display:"flex",flexDirection:"column",alignItems:"stretch",padding:"M",overflow:"auto",color:"primary-2",children:[(0,o.jsx)(L.A,{hash:"/view/Button",children:"Button"}),(0,o.jsx)(L.A,{hash:"/view/CodeHighlighter",children:"CodeHighlighter"}),(0,o.jsx)(L.A,{hash:"/view/Dialog",children:"Dialog"}),(0,o.jsx)(L.A,{hash:"/view/FloatingButton",children:"FloatingButton"}),(0,o.jsx)(L.A,{hash:"/view/InputColor",children:"InputColor"}),(0,o.jsx)(L.A,{hash:"/view/InputFile",children:"InputFile"}),(0,o.jsx)(L.A,{hash:"/view/InputImage",children:"InputImage"}),(0,o.jsx)(L.A,{hash:"/view/InputMultiText",children:"InputMultiText"}),(0,o.jsx)(L.A,{hash:"/view/InputText",children:"InputText"}),(0,o.jsx)(L.A,{hash:"/view/Label",children:"Label"}),(0,o.jsx)(L.A,{hash:"/view/Options",children:"Options"}),(0,o.jsx)(L.A,{hash:"/view/Panel",children:"Panel"}),(0,o.jsx)(L.A,{hash:"/view/Read",children:"Read"}),(0,o.jsx)(L.A,{hash:"/view/Scroll",children:"Scroll"}),(0,o.jsx)(L.A,{hash:"/view/Slider",children:"Slider"}),(0,o.jsx)(L.A,{hash:"/view/Spinner",children:"Spinner"}),(0,o.jsx)(L.A,{hash:"/view/Strip",children:"Strip"}),(0,o.jsx)(L.A,{hash:"/view/Switch",children:"Switch"}),(0,o.jsx)(L.A,{hash:"/view/Tabs",children:"Tabs"}),(0,o.jsx)(L.A,{hash:"/view/Touchable",children:"Touchable"})]}),(0,o.jsx)($.s,{color:"neutral-5",flex:"1 1 auto",children:e})]})}const O=i.lazy((()=>t.e(582).then(t.bind(t,8582)))),R=i.lazy((()=>t.e(273).then(t.bind(t,273)))),D=i.lazy((()=>t.e(833).then(t.bind(t,8833)))),M=i.lazy((()=>t.e(248).then(t.bind(t,6248)))),q=i.lazy((()=>Promise.all([t.e(352),t.e(571)]).then(t.bind(t,7571)))),H=i.lazy((()=>Promise.all([t.e(352),t.e(321)]).then(t.bind(t,5321)))),N=i.lazy((()=>Promise.all([t.e(352),t.e(787)]).then(t.bind(t,5787)))),G=i.lazy((()=>Promise.all([t.e(352),t.e(178)]).then(t.bind(t,8178)))),W=i.lazy((()=>Promise.all([t.e(352),t.e(25)]).then(t.bind(t,9025)))),Y=i.lazy((()=>Promise.all([t.e(352),t.e(201)]).then(t.bind(t,201)))),X=i.lazy((()=>Promise.all([t.e(352),t.e(161)]).then(t.bind(t,7702)))),U=i.lazy((()=>Promise.all([t.e(352),t.e(213)]).then(t.bind(t,9213)))),Z=i.lazy((()=>Promise.all([t.e(352),t.e(765)]).then(t.bind(t,4765)))),F=i.lazy((()=>Promise.all([t.e(352),t.e(179)]).then(t.bind(t,7179)))),Q=i.lazy((()=>Promise.all([t.e(352),t.e(695)]).then(t.bind(t,9695)))),V=i.lazy((()=>Promise.all([t.e(352),t.e(859)]).then(t.bind(t,5859)))),K=i.lazy((()=>Promise.all([t.e(352),t.e(28)]).then(t.bind(t,7028)))),J=i.lazy((()=>Promise.all([t.e(352),t.e(416)]).then(t.bind(t,1416)))),ee=i.lazy((()=>Promise.all([t.e(352),t.e(123)]).then(t.bind(t,6123)))),ne=i.lazy((()=>Promise.all([t.e(352),t.e(660)]).then(t.bind(t,8660)))),te=i.lazy((()=>Promise.all([t.e(352),t.e(572)]).then(t.bind(t,5572)))),oe=i.lazy((()=>Promise.all([t.e(352),t.e(70)]).then(t.bind(t,4070)))),ie=i.lazy((()=>Promise.all([t.e(352),t.e(226)]).then(t.bind(t,9226)))),le=i.lazy((()=>Promise.all([t.e(352),t.e(694)]).then(t.bind(t,7694))));function ae({lang:e}){const n=function(){const[e,n]=i.useState(m.value);return i.useEffect((()=>{const e=e=>{n(e)};return m.addListener(e),()=>m.removeListener(e)}),[]),e}(),t=(0,o.jsx)("div",{children:"Loading..."}),l=E,a=O,s=R,r=D,c=z,d=M,u=q,h=H,A=N,p=G,f=W,b=Y,v=X,g=U,w=Z,x=F,B=Q,C=V,y=K,I=J,j=ee,k=ne,_=te,S=oe,P=ie,T=le;return(0,o.jsxs)(se,{path:"/",Page:a,Layout:l,fallback:t,context:n,children:[(0,o.jsx)(se,{path:"/api",Page:s,fallback:t,context:n}),(0,o.jsx)(se,{path:"/test",Page:r,fallback:t,context:n}),(0,o.jsxs)(se,{path:"/view",Page:d,Layout:c,fallback:t,context:n,children:[(0,o.jsx)(se,{path:"/view/Button",Page:u,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Button/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Button/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/CodeHighlighter",Page:h,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/CodeHighlighter/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/CodeHighlighter/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Dialog",Page:A,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Dialog/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Dialog/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/FloatingButton",Page:p,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/FloatingButton/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/FloatingButton/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/InputColor",Page:f,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputColor/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputColor/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/InputFile",Page:b,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputFile/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputFile/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/InputImage",Page:v,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputImage/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputImage/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/InputMultiText",Page:g,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputMultiText/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputMultiText/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/InputText",Page:w,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputText/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/InputText/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Label",Page:x,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Label/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Label/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Options",Page:B,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Options/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Options/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Panel",Page:C,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Panel/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Panel/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Read",Page:y,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Read/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Read/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Scroll",Page:I,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Scroll/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Scroll/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Slider",Page:j,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Slider/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Slider/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Spinner",Page:k,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Spinner/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Spinner/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Strip",Page:_,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Strip/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Strip/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Switch",Page:S,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Switch/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Switch/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Tabs",Page:P,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Tabs/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Tabs/demo/Default",fallback:t,context:n})})}),(0,o.jsx)(se,{path:"/view/Touchable",Page:T,fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Touchable/demo",fallback:t,context:n,children:(0,o.jsx)(se,{path:"/view/Touchable/demo/Default",fallback:t,context:n})})})]})]})}function se({path:e,fallback:n,children:t,Page:l,Layout:a,Template:s,context:c}){const d=c&&u(c.path,r[e]);if(!d)return null;if(0===d.distance){if(!l)return null;const e=s?(0,o.jsx)(s,{params:d.params,children:(0,o.jsx)(l,{params:d.params})}):(0,o.jsx)(l,{params:d.params});return a?(0,o.jsx)(a,{params:d.params,children:(0,o.jsx)(i.Suspense,{fallback:n,children:e})}):(0,o.jsx)(i.Suspense,{fallback:n,children:e})}return a?(0,o.jsx)(a,{params:d.params,children:t}):(0,o.jsx)(o.Fragment,{children:t})}var re=t(9165),ce={};ce.styleTagTransform=k(),ce.setAttributes=C(),ce.insert=x().bind(null,"head"),ce.domAPI=g(),ce.insertStyleElement=I(),b()(re.A,ce),re.A&&re.A.locals&&re.A.locals,console.log("@tolokoban/ui",a),function(){console.log("VERSION",i.version),new s.A({}).apply();const e=document.getElementById("root");(0,l.H)(e).render((0,o.jsx)(i.StrictMode,{children:(0,o.jsx)(ae,{})})),function(){const e=document.getElementById("tgd-logo");e&&(e.classList.add("vanish"),window.setTimeout((()=>{const n=e.parentNode;n&&n.removeChild(e)}),900))}()}()},3991:(e,n,t)=>{t.d(n,{A:()=>w});var o=t(4848),i=t(3439),l=t(5072),a=t.n(l),s=t(7825),r=t.n(s),c=t(7659),d=t.n(c),u=t(5056),h=t.n(u),A=t(540),m=t.n(A),p=t(1113),f=t.n(p),b=t(1864),v={};v.styleTagTransform=f(),v.setAttributes=h(),v.insert=d().bind(null,"head"),v.domAPI=r(),v.insertStyleElement=m(),a()(b.A,v);const g=b.A&&b.A.locals?b.A.locals:void 0;function w(e){return(0,o.jsx)(i.y,{className:g.Link,onClick:`#${e.hash}`,children:e.children})}},6166:(e,n,t)=>{function o({flex:e,flexGrow:n,flexShrink:t,flexBasis:o,gridRow:i,gridColumn:l,alignSelf:a,justifySelf:s}){const r={};return e&&(r.flex=e),n&&(r.flexGrow=n),t&&(r.flexShrink=t),o&&(r.flexBasis=o),void 0!==i&&(r.gridRow=i),void 0!==l&&(r.gridColumn=l),void 0!==a&&(r.alignSelf=a),void 0!==s&&(r.justifySelf=s),r}t.d(n,{G:()=>o})},855:(e,n,t)=>{function o({color:e,textColor:n,backColor:t,shadow:o},i={}){const l={};return e||n||t||(e=i.color,n=i.textColor,t=i.backColor),e&&(l.color=`var(--theme-color-on-${e})`,l.backgroundColor=`var(--theme-color-${e})`),n&&(l.color=`var(--theme-color-${n})`),t&&(l.backgroundColor=`var(--theme-color-${t})`),o&&(l.boxShadow=`var(--theme-shadow-${o}, none)`),l}t.d(n,{B:()=>o})},5013:(e,n,t)=>{t.d(n,{K:()=>g,_:()=>v});var o=t(5072),i=t.n(o),l=t(7825),a=t.n(l),s=t(7659),r=t.n(s),c=t(5056),d=t.n(c),u=t(540),h=t.n(u),A=t(1113),m=t.n(A),p=t(751),f={};f.styleTagTransform=m(),f.setAttributes=d(),f.insert=r().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=h(),i()(p.A,f);const b=p.A&&p.A.locals?p.A.locals:void 0;function v({width:e,height:n,maxWidth:t="100vw",maxHeight:o,minWidth:i,minHeight:l}){return{width:e,height:n,maxWidth:t,maxHeight:o,minWidth:i,minHeight:l}}function g({fullsize:e=!1,fullwidth:n=!1,fullheight:t=!1,fullwide:o=!1,fullnarrow:i=!1}){if(e)return b.fullsize;const l=[];return n&&l.push(b.fullwidth),t&&l.push(b.fullheight),o&&l.push(b.fullwide),i&&l.push(b.fullnarrow),l.join(" ")}},4670:(e,n,t)=>{t.d(n,{i:()=>i});var o=t(2884);function i(e){const{display:n}=e;return n?"flex"===n||"inline-flex"===n?function({display:e,gap:n,rowGap:t,columnGap:o,justifyContent:i,alignItems:a,flexDirection:s,flexWrap:r}){const c=Object.assign({display:e},l({gap:n,rowGap:t,columnGap:o}));return c.justifyContent=i,c.alignItems=a,c.flexWrap=r,c.flexDirection=s,c}(e):"grid"===n||"inline-grid"===n?function({display:e,gap:n,rowGap:t,columnGap:o,gridTemplateRows:i,gridTemplateColumns:a,gridAutoFlow:s,gridAutoRows:r,gridAutoColumns:c,justifyContent:d,alignItems:u,placeItems:h}){const A=Object.assign({display:e},l({gap:n,rowGap:t,columnGap:o}));return A.gridTemplateRows=i,A.gridTemplateColumns=a,A.gridAutoRows=r,A.gridAutoColumns=c,A.gridAutoFlow=s,A.justifyContent=d,A.alignItems=u,A.placeItems=h,A}(e):{display:n}:{}}function l({gap:e,columnGap:n,rowGap:t}){const i={};return e&&(i.gap=(0,o.O3)(e)),t&&(i.rowGap=(0,o.O3)(t)),n&&(i.columnGap=(0,o.O3)(n)),i}},3357:(e,n,t)=>{function o({position:e,left:n,top:t,right:o,bottom:i,zIndex:l}){return{position:e,left:n,top:t,right:o,bottom:i,zIndex:l}}t.d(n,{r:()=>o})},9494:(e,n,t)=>{t.d(n,{S:()=>i});var o=t(2884);function i({borderRadius:e,margin:n,padding:t}){const i={};return e&&(i.borderRadius=(0,o.O3)(e)),n&&(i.margin=(0,o.O3)(n)),t&&(i.padding=(0,o.O3)(t)),i}},2884:(e,n,t)=>{function o(e,n=1){return n<=0?"transparent":n>=1?`var(--theme-color-${e})`:`var(--theme-color-${e}-${function(e){const n=Math.round(10*e);return n<1?"1":n>9?"9":`${n}`}(n)})`}function i(e){return`var(--theme-color-on-${e})`}function l(e,n="em"){return Array.isArray(e)?e.map((e=>a(e,n))).join(" "):a(e,n)}function a(e,n="em"){if("number"==typeof e)return`${e}${n}`;switch(e){case"XXS":case"XS":case"S":case"M":case"L":case"XL":case"XXL":return`var(--theme-gap-${e})`;default:return e}}t.d(n,{O3:()=>l,S9:()=>o,rU:()=>i})},9142:(e,n,t)=>{t.d(n,{A:()=>B});const o=document.createElement("canvas");o.width=1,o.height=1;class i{static get ctx(){if(!i._ctx){const e=document.createElement("canvas");e.width=1,e.height=1;const n=e.getContext("2d");if(!n)throw Error("[Color] Unable to create CanvasRenderingContext2D!");i._ctx=n}return i._ctx}static makeGradient(e,...n){const t=[],o=1/(e-1);for(let l=0;l<e;l++)t.push(i.mix(l*o,...n));return t}static mix(e,...n){const t=n.map((e=>new i(e))),o=t.length-1;if(o<0)return new i("#000");if(0===o)return t[0];const l=Math.min(Math.floor(e*o),o-1),a=t[l+1],s=t[l],r=1-o*(e-l/o);return new i(`color-mix(in lch, ${a.toString()}, ${s.toString()} ${100*r}%)`)}static isLight(e){return new i(e).isLight()}static isDark(e){return new i(e).isDark()}constructor(e){this.R=0,this.G=0,this.B=0,this.A=0,this.from(e)}from(e){if("string"==typeof e){const n=i.ctx;n.clearRect(0,0,1,1),n.fillStyle=e,n.fillRect(0,0,1,1);const t=n.getImageData(0,0,1,1),[o,l,a,s]=t.data,r=1/255;this.R=o*r,this.G=l*r,this.B=a*r,this.A=s*r}else this.R=e.R,this.G=e.G,this.B=e.B,this.A=e.A;return this}toString(){const e=e=>Math.floor(255*e).toString(16).padStart(2,"0");return`#${e(this.R)}${e(this.G)}${e(this.B)}${e(this.A)}`}get luminance(){return.2126*this.sRgbToLinear(this.R)+.7152*this.sRgbToLinear(this.G)+.0722*this.sRgbToLinear(this.B)}get perceivedLightness(){const e=this.luminance;return.01*(e<=216/24389?e*(24389/27):116*Math.pow(e,1/3)-16)}sRgbToLinear(e){return e<.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}isLight(){return!this.isDark()}isDark(){return this.perceivedLightness<.5}}i._ctx=null;const l=i;var a=t(5072),s=t.n(a),r=t(7825),c=t.n(r),d=t(7659),u=t.n(d),h=t(5056),A=t.n(h),m=t(540),p=t.n(m),f=t(1113),b=t.n(f),v=t(3926),g={};g.styleTagTransform=b(),g.setAttributes=A(),g.insert=u().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=p(),s()(v.A,g),v.A&&v.A.locals&&v.A.locals;const w=["hsl(0 0% 50%)","hsl(0 0% 100%)"];class x{constructor(e={}){var n,t,o,i,l,a,s,r,c,d,u;this.vars=[];const h=null!==(n=e.colors)&&void 0!==n?n:{},A=null!==(t=e.gap)&&void 0!==t?t:{XS:".25rem",S:".5rem",M:"1rem",L:"2rem",XL:"4rem"};this.add("gap-none","0"),this.add("gap-XS",A.XS),this.add("gap-S",A.S),this.add("gap-M",A.M),this.add("gap-L",A.L),this.add("gap-XL",A.XL),this.add("color-text-light",null!==(o=h.textLight)&&void 0!==o?o:"#fffe"),this.add("color-text-dark",null!==(i=h.textDark)&&void 0!==i?i:"#000e"),this.addColor("input",null!==(l=h.input)&&void 0!==l?l:"#fff"),this.addColor("error",null!==(a=h.error)&&void 0!==a?a:"#d00"),this.addColor("valid",null!==(s=h.valid)&&void 0!==s?s:"#0f0"),this.addColorVars("primary",C(null!==(r=h.primary)&&void 0!==r?r:"hsl(215 80% 50%)")),this.addColorVars("secondary",C(null!==(c=h.secondary)&&void 0!==c?c:"hsl(60 80% 50%)")),this.addColorVars("tertiary",C(null!==(d=h.tertiary)&&void 0!==d?d:"hsl(100 80% 50%)")),this.addColorVars("neutral",C(null!==(u=h.neutral)&&void 0!==u?u:w));for(let e=0;e<10;e++){const n=e;this.add(`shadow-${e}`,`0 ${n}px ${2*n}px #000e`)}}add(e,n,t=1){let o=n;if(t<=0)o="transparent";else if(t<1){const e=new l(n);e.A=t,o=e.toString()}this.vars.push([e,o])}addColor(e,n){this.add(`color-${e}`,n),this.add(`color-on-${e}`,`var(--theme-color-text-${l.isLight(n)?"dark":"light"})`)}addColorVars(e,n){let t=1;for(const o of n){this.add(`color-${e}-${t}`,o);for(let n=1;n<10;n++)this.add(`color-${e}-${t}-${n}`,o,n/10);this.add(`color-on-${e}-${t}`,`var(--theme-color-text-${l.isLight(o)?"dark":"light"})`),t++}this.add(`color-${e}`,`var(--theme-color-${e}-5)`)}apply(e){var n;const t=null!=e?e:null===(n=globalThis.window)||void 0===n?void 0:n.document.body;if(t)for(const[e,n]of this.vars)t.style.setProperty(`--theme-${e}`,n)}}x.classNames=new class{constructor(){this.signature=`${Date.now().toString(36)}-Theme-`,this.colorPrimary=(e=5)=>this.cls(`color-primary-${e}`),this.colorSecondary=(e=5)=>this.cls(`color-secondary-${e}`),this.colorTertiary=(e=5)=>this.cls(`color-tertiary-${e}`),this.colorNeutral=(e=5)=>this.cls(`color-neutral-${e}`),this.init=()=>{if(!document.head)return void window.setTimeout(this.init,200);const e=[`.${this.cls("display-flex")} { display: flex; justify-content: space-between; align-items: center; gap: var(--theme-gap-S); }`,`.${this.cls("display-inline-flex")} { display: inline-flex; justify-content: space-between; align-items: center; gap: var(--theme-gap-S); }`];for(const n of["none","XS","S","M","L","XL"])for(const t of["none","XS","S","M","L","XL"])e.push(`.${this.cls(`padding-${n}-${t}`)} { padding: var(--theme-gap-${n}) var(--theme-gap-${t}); }`),e.push(`.${this.cls(`margin-${n}-${t}`)} { margin: var(--theme-gap-${n}) var(--theme-gap-${t}); }`);for(const n of["primary","secondary","tertiary","neutral"])for(let t=1;t<10;t++)e.push(`.${this.cls(`color-${n}-${t}`)} {`,`  color: var(--theme-color-on-${n}-${t});`,`  background-color: var(--theme-color-${n}-${t});`,"}");const n=document.createElement("style");n.textContent=e.join("\n"),document.head.appendChild(n)},this.init()}join(...e){return e.filter((e=>"string"==typeof e)).join(" ")}padding(...e){let[n,t]=e;return n||(n="none"),t||(t=n),this.cls(`padding-${n}-${t}`)}margin(...e){let[n,t]=e;return n||(n="none"),t||(t=n),this.cls(`margin-${n}-${t}`)}display(e){return[this.cls(`display-${e}`)].join(" ")}cls(e){return`${this.signature}${e}`}};const B=x;function C(e){const n=Array.isArray(e)?e:[e];return 0===n.length&&n.push("#fff"),1===n.length&&function(e){const[n]=e,t=new l(n),o=new l(n);t.R*=.3,t.G*=.3,t.B*=.3,o.R=1-.2*(1-o.R),o.G=1-.2*(1-o.G),o.B=1-.2*(1-o.B),e.unshift(t),e.push(o)}(n),l.makeGradient(9,...n).map((e=>e.toString()))}},3439:(e,n,t)=>{t.d(n,{y:()=>j});var o=t(4848),i=t(9142),l=t(2884),a=t(6166),s=t(5013),r=t(3357),c=t(9494),d=t(5072),u=t.n(d),h=t(7825),A=t.n(h),m=t(7659),p=t.n(m),f=t(5056),b=t.n(f),v=t(540),g=t.n(v),w=t(1113),x=t.n(w),B=t(2318),C={};C.styleTagTransform=x(),C.setAttributes=b(),C.insert=p().bind(null,"head"),C.domAPI=A(),C.insertStyleElement=g(),u()(B.A,C);const y=B.A&&B.A.locals?B.A.locals:void 0,I=i.A.classNames;function j(e){const n=function(e,n){return Object.assign(Object.assign({},n),e)}(e,{children:"Button",enabled:!0,borderRadius:".125em",margin:["XS","0"],padding:[0,"M"],onClick:k,width:"auto",height:"2em",variant:"elevated",thickness:.125}),{className:t,children:i,enabled:d,variant:u,onClick:h}=n,{color:A}=e,m=(0,l.O3)(n.thickness),p=Object.assign({"--custom-color-main-alpha":S(A,u),"--custom-color-main":_(A,u),"--custom-color-text":P(A,u),"--custom-thickness":m},function(e){return Object.assign(Object.assign(Object.assign(Object.assign({},(0,a.G)(e)),(0,s._)(e)),(0,r.r)(e)),(0,c.S)(e))}(n)),f=n.icon;return"string"==typeof h?(0,o.jsxs)("a",{style:p,className:I.join(t,y.Button,y[u],Boolean(f)&&y.icon,!d&&y.disabled),href:h,children:[f&&(0,o.jsx)(f,{}),(0,o.jsx)("div",{className:y.label,children:i})]}):(0,o.jsxs)("button",{style:p,className:I.join(t,y.Button,y[u],Boolean(f)&&y.icon),disabled:!d,type:"button",onClick:h,children:[f&&(0,o.jsx)(f,{}),(0,o.jsx)("div",{className:y.label,children:i})]})}const k=()=>{console.log("Click!")};function _(e,n){return"text"===n?"transparent":(0,l.S9)(null!=e?e:"primary-5")}function S(e,n){return"text"===n?"transparent":(0,l.S9)(null!=e?e:"primary-5",.5)}function P(e,n){switch(n){case"text":case"outlined":return e?(0,l.S9)(e):"currentColor";default:return(0,l.rU)(null!=e?e:"primary-5")}}},7049:(e,n,t)=>{t.d(n,{s:()=>_});var o=t(4848),i=t(9142),l=t(6166),a=t(855),s=t(5013),r=t(4670),c=t(3357),d=t(9494),u=t(2884),h=t(5072),A=t.n(h),m=t(7825),p=t.n(m),f=t(7659),b=t.n(f),v=t(5056),g=t.n(v),w=t(540),x=t.n(w),B=t(1113),C=t.n(B),y=t(6380),I={};I.styleTagTransform=C(),I.setAttributes=g(),I.insert=b().bind(null,"head"),I.domAPI=p(),I.insertStyleElement=x(),A()(y.A,I);const j=y.A&&y.A.locals?y.A.locals:void 0,k=i.A.classNames;function _(e){const{className:n,children:t,borderRadius:i,fontSize:h,aspectRatio:A=0}=e,m=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({fontSize:h},(0,a.B)(e)),(0,d.S)(e)),(0,s._)(e)),function({overflow:e,overflowX:n,overflowY:t}){const o={};if(e){if("string"==typeof e)return o.overflow=e,o;const[n,t]=e;return o.overflowX=n,o.overflowY=t,o}return n&&(o.overflowX=n),t&&(o.overflowY=t),o}(e)),(0,r.i)(e)),(0,c.r)(e)),(0,l.G)(e));return A>0&&(m["--custom-aspect-ratio"]=A),i&&(m.borderRadius=(0,u.O3)(i)),(0,o.jsx)("div",{className:k.join(n,j.Panel,(0,s.K)(e)),style:m,children:t})}},9168:(e,n,t)=>{t.d(n,{U:()=>y});var o=t(4848),i=t(9142),l=t(5013),a=t(3357),s=t(6166),r=t(5072),c=t.n(r),d=t(7825),u=t.n(d),h=t(7659),A=t.n(h),m=t(5056),p=t.n(m),f=t(540),b=t.n(f),v=t(1113),g=t.n(v),w=t(4708),x={};x.styleTagTransform=g(),x.setAttributes=p(),x.insert=A().bind(null,"head"),x.domAPI=u(),x.insertStyleElement=b(),c()(w.A,x);const B=w.A&&w.A.locals?w.A.locals:void 0;var C=t(855);function y(e){const{orientation:n="column",template:t="-1"}=e,r=Object.assign(Object.assign(Object.assign(Object.assign({},(0,l._)(e)),(0,a.r)(e)),(0,s.G)(e)),(0,C.B)(e)),c=t.split("").map((e=>"123456789".includes(e)?`minmax(0, ${e}fr)`:"auto")).join(" ");return"row"===n?(r.gridTemplateColumns=c,r.gridAutoColumns="auto",r.gridTemplateRows="minmax(0, 1fr)"):(r.gridTemplateRows=c,r.gridAutoRows="auto",r.gridTemplateColumns="minmax(0, 1fr)"),(0,o.jsx)("div",{className:i.A.classNames.join(e.className,B.Strip,B[n],(0,l.K)(e)),style:r,children:e.children})}}},i={};function l(e){var n=i[e];if(void 0!==n)return n.exports;var t=i[e]={id:e,exports:{}};return o[e](t,t.exports,l),t.exports}l.m=o,e=[],l.O=(n,t,o,i)=>{if(!t){var a=1/0;for(d=0;d<e.length;d++){for(var[t,o,i]=e[d],s=!0,r=0;r<t.length;r++)(!1&i||a>=i)&&Object.keys(l.O).every((e=>l.O[e](t[r])))?t.splice(r--,1):(s=!1,i<a&&(a=i));if(s){e.splice(d--,1);var c=o();void 0!==c&&(n=c)}}return n}i=i||0;for(var d=e.length;d>0&&e[d-1][2]>i;d--)e[d]=e[d-1];e[d]=[t,o,i]},l.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return l.d(n,{a:n}),n},l.d=(e,n)=>{for(var t in n)l.o(n,t)&&!l.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((n,t)=>(l.f[t](e,n),n)),[])),l.u=e=>"scr/"+e+"."+{25:"5a371d4caaccd09f0c23",28:"4d45344080f1cf2a713a",70:"05ea6d9e7610195bec6e",123:"61814c5afacec86588a0",161:"5d9095813780809715e2",178:"3b15307b9f3b0c0c0822",179:"a8d9780f62431e726ccc",201:"122bdb6520efc5315895",213:"028508c012e7177889aa",226:"e8fe9116cb37df7e576c",248:"4663bb9f7fcdad854a80",273:"c87beef271b4c57de7df",321:"16a3b6e2ced50c4c233b",352:"f118c2c85648c7610d96",416:"85751f457de7e31b9cf5",571:"61f520cb43aa93356a26",572:"44d9cca9f0fe34043f7c",582:"3fb29e8996fc0b98ce5e",660:"5aefb91abfc58d986b0d",694:"e9c8b1aad7833b63bcb9",695:"71eac93a9e8aa1501bb0",765:"e12fcf815a63e89d2eef",787:"c9c8e883c2d35b91f5b5",833:"5bcb72a3453e385e8d56",859:"e4a1c674d6782fd54e41"}[e]+".js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),n={},t="@tolokoban/ui:",l.l=(e,o,i,a)=>{if(n[e])n[e].push(o);else{var s,r;if(void 0!==i)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==t+i){s=u;break}}s||(r=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,l.nc&&s.setAttribute("nonce",l.nc),s.setAttribute("data-webpack",t+i),s.src=e),n[e]=[o];var h=(t,o)=>{s.onerror=s.onload=null,clearTimeout(A);var i=n[e];if(delete n[e],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(o))),t)return t(o)},A=setTimeout(h.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=h.bind(null,s.onerror),s.onload=h.bind(null,s.onload),r&&document.head.appendChild(s)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var n=l.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=t[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"})(),(()=>{var e={524:0};l.f.j=(n,t)=>{var o=l.o(e,n)?e[n]:void 0;if(0!==o)if(o)t.push(o[2]);else{var i=new Promise(((t,i)=>o=e[n]=[t,i]));t.push(o[2]=i);var a=l.p+l.u(n),s=new Error;l.l(a,(t=>{if(l.o(e,n)&&(0!==(o=e[n])&&(e[n]=void 0),o)){var i=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;s.message="Loading chunk "+n+" failed.\n("+i+": "+a+")",s.name="ChunkLoadError",s.type=i,s.request=a,o[1](s)}}),"chunk-"+n,n)}},l.O.j=n=>0===e[n];var n=(n,t)=>{var o,i,[a,s,r]=t,c=0;if(a.some((n=>0!==e[n]))){for(o in s)l.o(s,o)&&(l.m[o]=s[o]);if(r)var d=r(l)}for(n&&n(t);c<a.length;c++)i=a[c],l.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return l.O(d)},t=self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})(),l.nc=void 0;var a=l.O(void 0,[446],(()=>l(6020)));a=l.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c0MsRUFBZ0J0QyxHQUFXLEVBRTVCLE9BQU83QixFQUFvQk0sRUFBRUMsRUFBTyxFQUdqQzBFLEVBQXFCQyxLQUFnQywwQkFBSUEsS0FBZ0MsMkJBQUssR0FDbEdELEVBQW1COVksUUFBUXlZLEVBQXFCbEIsS0FBSyxLQUFNLElBQzNEdUIsRUFBbUJ4ZCxLQUFPbWQsRUFBcUJsQixLQUFLLEtBQU11QixFQUFtQnhkLEtBQUtpYyxLQUFLdUIsRyxLQ3JGdkZqRixFQUFvQmlELFFBQUtsVyxFQ0d6QixJQUFJb1ksRUFBc0JuRixFQUFvQk0sT0FBRXZULEVBQVcsQ0FBQyxNQUFNLElBQU9pVCxFQUFvQixRQUM3Rm1GLEVBQXNCbkYsRUFBb0JNLEVBQUU2RSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0IiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9kb2Mvc3JjL2FwcC9sYXlvdXQubW9kdWxlLmNzcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvZG9jL3NyYy9pbmRleC5jc3MiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2RvYy9zcmMvdmlldy9MaW5rL0xpbmsubW9kdWxlLmNzcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvdGhlbWUvY3NzL2RpbWVuc2lvbi5tb2R1bGUuY3NzIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC90aGVtZS90aGVtZS5jc3MiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3ZpZXcvQnV0dG9uL0J1dHRvbi5tb2R1bGUuY3NzIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC92aWV3L1BhbmVsL1BhbmVsLm1vZHVsZS5jc3MiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3ZpZXcvU3RyaXAvU3RyaXAubW9kdWxlLmNzcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvaW5mby5qcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvZG9jL3NyYy9hcHAvcm91dGVzLnRzIiwid2VicGFjazovL0B0b2xva29iYW4vdWkvLi9zcmMvYXBwL2xheW91dC5tb2R1bGUuY3NzPzExNjQiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2RvYy9zcmMvYXBwL2xheW91dC50c3giLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2RvYy9zcmMvYXBwL3ZpZXcvbGF5b3V0LnRzeCIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvZG9jL3NyYy9hcHAvaW5kZXgudHN4Iiwid2VicGFjazovL0B0b2xva29iYW4vdWkvLi9zcmMvaW5kZXguY3NzP2IwMmYiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2RvYy9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL0B0b2xva29iYW4vdWkvLi9zcmMvdmlldy9MaW5rL0xpbmsubW9kdWxlLmNzcz82NzE5IiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9kb2Mvc3JjL3ZpZXcvTGluay9MaW5rLnRzeCIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvdGhlbWUvc3R5bGVzL2NoaWxkLmpzIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC90aGVtZS9zdHlsZXMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vQHRvbG9rb2Jhbi91aS8uLi9saWIvZGlzdC90aGVtZS9jc3MvZGltZW5zaW9uLm1vZHVsZS5jc3M/MTFmYSIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvdGhlbWUvc3R5bGVzL2RpbWVuc2lvbi5qcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvdGhlbWUvc3R5bGVzL2Rpc3BsYXkuanMiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3RoZW1lL3N0eWxlcy9wb3NpdGlvbi5qcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvdGhlbWUvc3R5bGVzL3NwYWNlLmpzIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC90aGVtZS9zdHlsZXMvc3R5bGVzLmpzIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC9jb2xvci5qcyIsIndlYnBhY2s6Ly9AdG9sb2tvYmFuL3VpLy4uL2xpYi9kaXN0L3RoZW1lL3RoZW1lLmNzcz8wZjk3IiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC90aGVtZS90aGVtZS5qcyIsIi9ob21lL3BldGl0amVhL0NvZGUvaW5zcGlyYXRpb24vdWkvbGliL2Rpc3QvdGhlbWUvY2xhc3MtbmFtZXMuanMiLCJ3ZWJwYWNrOi8vQHRvbG9rb2Jhbi91aS8uLi9saWIvZGlzdC92aWV3L0J1dHRvbi9CdXR0b24ubW9kdWxlLmNzcz82MGVhIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC92aWV3L0J1dHRvbi9CdXR0b24uanMiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3V0aWwvc2V0LWRlZmF1bHRzLmpzIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC90aGVtZS9zdHlsZXMvY29tbW9uLmpzIiwid2VicGFjazovL0B0b2xva29iYW4vdWkvLi4vbGliL2Rpc3Qvdmlldy9QYW5lbC9QYW5lbC5tb2R1bGUuY3NzP2M0ZmIiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3ZpZXcvUGFuZWwvUGFuZWwuanMiLCIvaG9tZS9wZXRpdGplYS9Db2RlL2luc3BpcmF0aW9uL3VpL2xpYi9kaXN0L3RoZW1lL3N0eWxlcy9vdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly9AdG9sb2tvYmFuL3VpLy4uL2xpYi9kaXN0L3ZpZXcvU3RyaXAvU3RyaXAubW9kdWxlLmNzcz80NDIwIiwiL2hvbWUvcGV0aXRqZWEvQ29kZS9pbnNwaXJhdGlvbi91aS9saWIvZGlzdC92aWV3L1N0cmlwL1N0cmlwLmpzIiwid2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcIkB0b2xva29iYW4vdWk6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnNyYy1hcHAtbGF5b3V0LW1vZHVsZV9sYXlvdXRfZHJtNmhiIGFzaWRlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgICBnYXA6IDAuMjVlbTtcbiAgICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xuICAgIHRleHQtb3JpZW50YXRpb246IG1peGVkO1xufVxuXG4uc3JjLWFwcC1sYXlvdXQtbW9kdWxlX2xheW91dF9kcm02aGIgYXNpZGUgYnV0dG9uIHtcbiAgICBhbGw6IGluaGVyaXQ7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeS0zKTtcbiAgICBjb2xvcjogdmFyKC0tdGhlbWUtY29sb3Itb24tcHJpbWFyeS0zKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDJlbTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHBhZGRpbmctaW5saW5lOiAxZW07XG4gICAgZm9udC1zaXplOiAxMjAlO1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xufVxuXG4uc3JjLWFwcC1sYXlvdXQtbW9kdWxlX2xheW91dF9kcm02aGIgYXNpZGUgYnV0dG9uLnNyYy1hcHAtbGF5b3V0LW1vZHVsZV9hY3RpdmVfeHl1Y2VFIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS10aGVtZS1jb2xvci1zZWNvbmRhcnktNSk7XG4gICAgY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLW9uLXNlY29uZGFyeS01KTtcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuLnNyYy1hcHAtbGF5b3V0LW1vZHVsZV9sYXlvdXRfZHJtNmhiIGFzaWRlID4gZGl2Omxhc3QtY2hpbGQge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmctaW5saW5lLWVuZDogMWVtO1xufVxuXG4uc3JjLWFwcC1sYXlvdXQtbW9kdWxlX2xheW91dF9kcm02aGIgbWFpbiB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXRoZW1lLWNvbG9yLXNlY29uZGFyeS01KTtcbiAgICBjb2xvcjogdmFyKC0tdGhlbWUtY29sb3Itb24tc2Vjb25kYXJ5LTUpO1xufVxuXG4uc3JjLWFwcC1sYXlvdXQtbW9kdWxlX2xheW91dF9kcm02aGIgbWFpbiA+IGRpdiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDAuNWVtO1xuICAgIHRvcDogMC41ZW07XG4gICAgcmlnaHQ6IDAuNWVtO1xuICAgIGJvdHRvbTogMC41ZW07XG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDFlbSk7XG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxZW0pO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYXBwL2xheW91dC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLDJCQUEyQjtJQUMzQixvQkFBb0I7SUFDcEIsV0FBVztJQUNYLHlCQUF5QjtJQUN6Qix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxZQUFZO0lBQ1osd0NBQXdDO0lBQ3hDLHNDQUFzQztJQUN0QyxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLDBCQUEwQjtBQUM5Qjs7QUFFQTtJQUNJLDBDQUEwQztJQUMxQyx3Q0FBd0M7SUFDeEMsbUJBQW1CO0lBQ25CLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsMENBQTBDO0lBQzFDLHdDQUF3QztBQUM1Qzs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsVUFBVTtJQUNWLFlBQVk7SUFDWixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtBQUM1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGF5b3V0IGFzaWRlIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gICAgZ2FwOiAwLjI1ZW07XFxuICAgIHdyaXRpbmctbW9kZTogdmVydGljYWwtcmw7XFxuICAgIHRleHQtb3JpZW50YXRpb246IG1peGVkO1xcbn1cXG5cXG4ubGF5b3V0IGFzaWRlIGJ1dHRvbiB7XFxuICAgIGFsbDogaW5oZXJpdDtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tdGhlbWUtY29sb3ItcHJpbWFyeS0zKTtcXG4gICAgY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLW9uLXByaW1hcnktMyk7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgbGluZS1oZWlnaHQ6IDJlbTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgcGFkZGluZy1pbmxpbmU6IDFlbTtcXG4gICAgZm9udC1zaXplOiAxMjAlO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuLmxheW91dCBhc2lkZSBidXR0b24uYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tdGhlbWUtY29sb3Itc2Vjb25kYXJ5LTUpO1xcbiAgICBjb2xvcjogdmFyKC0tdGhlbWUtY29sb3Itb24tc2Vjb25kYXJ5LTUpO1xcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5sYXlvdXQgYXNpZGUgPiBkaXY6bGFzdC1jaGlsZCB7XFxuICAgIGZsZXg6IDEgMSBhdXRvO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLWlubGluZS1lbmQ6IDFlbTtcXG59XFxuXFxuLmxheW91dCBtYWluIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS10aGVtZS1jb2xvci1zZWNvbmRhcnktNSk7XFxuICAgIGNvbG9yOiB2YXIoLS10aGVtZS1jb2xvci1vbi1zZWNvbmRhcnktNSk7XFxufVxcblxcbi5sYXlvdXQgbWFpbiA+IGRpdiB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMC41ZW07XFxuICAgIHRvcDogMC41ZW07XFxuICAgIHJpZ2h0OiAwLjVlbTtcXG4gICAgYm90dG9tOiAwLjVlbTtcXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDFlbSk7XFxuICAgIGhlaWdodDogY2FsYygxMDAlIC0gMWVtKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibGF5b3V0XCI6IGBzcmMtYXBwLWxheW91dC1tb2R1bGVfbGF5b3V0X2RybTZoYmAsXG5cdFwiYWN0aXZlXCI6IGBzcmMtYXBwLWxheW91dC1tb2R1bGVfYWN0aXZlX3h5dWNlRWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBodG1sLFxuYm9keSxcbiNyb290IHtcbiAgICBtYXJnaW46IDA7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xufVxuXG5jb2RlIHtcbiAgICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXCJDb3VyaWVyIE5ld1wiLFxuICAgICAgICBtb25vc3BhY2U7XG59XG5cbiN0Z2QtbG9nby52YW5pc2gge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjlzO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7SUFHSSxTQUFTO0lBQ1QsbUNBQW1DO0lBQ25DLGtDQUFrQztJQUNsQyxrQkFBa0I7SUFDbEIsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJO2lCQUNhO0FBQ2pCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLHdCQUF3QjtBQUM1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcbmJvZHksXFxuI3Jvb3Qge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVxcblxcbmNvZGUge1xcbiAgICBmb250LWZhbWlseTogc291cmNlLWNvZGUtcHJvLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXFxcIkNvdXJpZXIgTmV3XFxcIixcXG4gICAgICAgIG1vbm9zcGFjZTtcXG59XFxuXFxuI3RnZC1sb2dvLnZhbmlzaCB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC45cztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuc3JjLXZpZXctTGluay1MaW5rLW1vZHVsZV9MaW5rX0l4QWNqeiB7XG4gICAgbWFyZ2luOiAwLjEyNWVtO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvdmlldy9MaW5rL0xpbmsubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGVBQWU7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLkxpbmsge1xcbiAgICBtYXJnaW46IDAuMTI1ZW07XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIkxpbmtcIjogYHNyYy12aWV3LUxpbmstTGluay1tb2R1bGVfTGlua19JeEFjanpgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuXFxcXC0tLWxpYi1kaXN0LXRoZW1lLWNzcy1kaW1lbnNpb24tbW9kdWxlX2Z1bGx3aWR0aF9tV1pFYWsge1xuICAgIGlubGluZS1zaXplOiAxMDAlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbi5cXFxcLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbGhlaWdodF9ZNVoycUwge1xuICAgIGJsb2NrLXNpemU6IDEwMCU7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLlxcXFwtLS1saWItZGlzdC10aGVtZS1jc3MtZGltZW5zaW9uLW1vZHVsZV9mdWxsc2l6ZV9xN2FtOXgge1xufVxuXG5AbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHtcbiAgICAuXFxcXC0tLWxpYi1kaXN0LXRoZW1lLWNzcy1kaW1lbnNpb24tbW9kdWxlX2Z1bGx3aWRlX1EybmV3diB7XG4gICAgfVxuICAgIC5cXFxcLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbG5hcnJvd19JaVpOTnMge1xuICAgIH1cbn1cblxuQG1lZGlhIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIHtcbiAgICAuXFxcXC0tLWxpYi1kaXN0LXRoZW1lLWNzcy1kaW1lbnNpb24tbW9kdWxlX2Z1bGx3aWRlX1EybmV3diB7XG4gICAgfVxuICAgIC5cXFxcLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbG5hcnJvd19JaVpOTnMge1xuICAgIH1cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vLi4vbGliL2Rpc3QvdGhlbWUvY3NzL2RpbWVuc2lvbi5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixzQkFBc0I7QUFDMUI7O0FBRUE7QUFFQTs7QUFFQTtJQUNJO0lBRUE7SUFDQTtJQUVBO0FBQ0o7O0FBRUE7SUFDSTtJQUVBO0lBQ0E7SUFFQTtBQUNKXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5mdWxsd2lkdGgge1xcbiAgICBpbmxpbmUtc2l6ZTogMTAwJTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmZ1bGxoZWlnaHQge1xcbiAgICBibG9jay1zaXplOiAxMDAlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uZnVsbHNpemUge1xcbiAgICBjb21wb3NlczogZnVsbHdpZHRoIGZ1bGxoZWlnaHQ7XFxufVxcblxcbkBtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSkge1xcbiAgICAuZnVsbHdpZGUge1xcbiAgICAgICAgY29tcG9zZXM6IGZ1bGx3aWR0aDtcXG4gICAgfVxcbiAgICAuZnVsbG5hcnJvdyB7XFxuICAgICAgICBjb21wb3NlczogZnVsbGhlaWdodDtcXG4gICAgfVxcbn1cXG5cXG5AbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkge1xcbiAgICAuZnVsbHdpZGUge1xcbiAgICAgICAgY29tcG9zZXM6IGZ1bGxoZWlnaHQ7XFxuICAgIH1cXG4gICAgLmZ1bGxuYXJyb3cge1xcbiAgICAgICAgY29tcG9zZXM6IGZ1bGx3aWR0aDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJmdWxsd2lkdGhcIjogYC0tLWxpYi1kaXN0LXRoZW1lLWNzcy1kaW1lbnNpb24tbW9kdWxlX2Z1bGx3aWR0aF9tV1pFYWtgLFxuXHRcImZ1bGxoZWlnaHRcIjogYC0tLWxpYi1kaXN0LXRoZW1lLWNzcy1kaW1lbnNpb24tbW9kdWxlX2Z1bGxoZWlnaHRfWTVaMnFMYCxcblx0XCJmdWxsc2l6ZVwiOiBgLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbHNpemVfcTdhbTl4IC0tLWxpYi1kaXN0LXRoZW1lLWNzcy1kaW1lbnNpb24tbW9kdWxlX2Z1bGx3aWR0aF9tV1pFYWsgLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbGhlaWdodF9ZNVoycUxgLFxuXHRcImZ1bGx3aWRlXCI6IGAtLS1saWItZGlzdC10aGVtZS1jc3MtZGltZW5zaW9uLW1vZHVsZV9mdWxsd2lkZV9RMm5ld3YgLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbHdpZHRoX21XWkVhayAtLS1saWItZGlzdC10aGVtZS1jc3MtZGltZW5zaW9uLW1vZHVsZV9mdWxsaGVpZ2h0X1k1WjJxTGAsXG5cdFwiZnVsbG5hcnJvd1wiOiBgLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbG5hcnJvd19JaVpOTnMgLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbGhlaWdodF9ZNVoycUwgLS0tbGliLWRpc3QtdGhlbWUtY3NzLWRpbWVuc2lvbi1tb2R1bGVfZnVsbHdpZHRoX21XWkVha2Bcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbmIge1xuICAgIG1hcmdpbjogMCAwLjNlbTtcbn1cblxuLyoqXG4gKiBBc3BlY3QgcmF0aW9cbiAqIEV4YW1wbGU6IDxkaXYgc3R5bGU9XCItLWN1c3RvbS1hc3BlY3QtcmF0aW89MTYvOVwiPi4uLjwvZGl2PlxuICovXG5bc3R5bGUqPVwiLS1jdXN0b20tYXNwZWN0LXJhdGlvXCJdID4gOmZpcnN0LWNoaWxkIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cbltzdHlsZSo9XCItLWN1c3RvbS1hc3BlY3QtcmF0aW9cIl0gPiBpbWcge1xuICAgIGhlaWdodDogYXV0bztcbn1cbkBzdXBwb3J0cyAoLS1jdXN0b206IHByb3BlcnR5KSB7XG4gICAgW3N0eWxlKj1cIi0tY3VzdG9tLWFzcGVjdC1yYXRpb1wiXSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgW3N0eWxlKj1cIi0tY3VzdG9tLWFzcGVjdC1yYXRpb1wiXTo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiBjYWxjKDEwMCUgLyAodmFyKC0tY3VzdG9tLWFzcGVjdC1yYXRpbykpKTtcbiAgICB9XG4gICAgW3N0eWxlKj1cIi0tY3VzdG9tLWFzcGVjdC1yYXRpb1wiXSA+IDpmaXJzdC1jaGlsZCB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi8uLi9saWIvZGlzdC90aGVtZS90aGVtZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBOzs7RUFHRTtBQUNGO0lBQ0ksV0FBVztBQUNmO0FBQ0E7SUFDSSxZQUFZO0FBQ2hCO0FBQ0E7SUFDSTtRQUNJLGtCQUFrQjtJQUN0QjtJQUNBO1FBQ0ksV0FBVztRQUNYLGNBQWM7UUFDZCx5REFBeUQ7SUFDN0Q7SUFDQTtRQUNJLGtCQUFrQjtRQUNsQixNQUFNO1FBQ04sT0FBTztRQUNQLFlBQVk7SUFDaEI7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYiB7XFxuICAgIG1hcmdpbjogMCAwLjNlbTtcXG59XFxuXFxuLyoqXFxuICogQXNwZWN0IHJhdGlvXFxuICogRXhhbXBsZTogPGRpdiBzdHlsZT1cXFwiLS1jdXN0b20tYXNwZWN0LXJhdGlvPTE2LzlcXFwiPi4uLjwvZGl2PlxcbiAqL1xcbltzdHlsZSo9XFxcIi0tY3VzdG9tLWFzcGVjdC1yYXRpb1xcXCJdID4gOmZpcnN0LWNoaWxkIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcbltzdHlsZSo9XFxcIi0tY3VzdG9tLWFzcGVjdC1yYXRpb1xcXCJdID4gaW1nIHtcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5Ac3VwcG9ydHMgKC0tY3VzdG9tOiBwcm9wZXJ0eSkge1xcbiAgICBbc3R5bGUqPVxcXCItLWN1c3RvbS1hc3BlY3QtcmF0aW9cXFwiXSB7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIH1cXG4gICAgW3N0eWxlKj1cXFwiLS1jdXN0b20tYXNwZWN0LXJhdGlvXFxcIl06OmJlZm9yZSB7XFxuICAgICAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgcGFkZGluZy1ib3R0b206IGNhbGMoMTAwJSAvICh2YXIoLS1jdXN0b20tYXNwZWN0LXJhdGlvKSkpO1xcbiAgICB9XFxuICAgIFtzdHlsZSo9XFxcIi0tY3VzdG9tLWFzcGVjdC1yYXRpb1xcXCJdID4gOmZpcnN0LWNoaWxkIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHRvcDogMDtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5cXFxcLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9CdXR0b25fcXljSDNxIHtcbiAgICAtLWN1c3RvbS1jb2xvci1tYWluLWFscGhhOiAjZjkwODtcbiAgICAtLWN1c3RvbS1jb2xvci1tYWluOiAjZjkwO1xuICAgIC0tY3VzdG9tLWNvbG9yLXRleHQ6ICMwMDA7XG4gICAgLS1jdXN0b20tdGhpY2tuZXNzOiAwLjEyNWVtO1xuICAgIGZvbnQ6IGluaGVyaXQ7XG4gICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBnYXA6IDFlbTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfQnV0dG9uX3F5Y0gzcSA+ICoge1xuICAgIGZsZXg6IDAgMCBhdXRvO1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfQnV0dG9uX3F5Y0gzcSA+IGRpdi5cXFxcLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9sYWJlbF9ESnM2QWQge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgIG1pbi13aWR0aDogMDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBnYXA6IDFlbTtcbn1cblxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX0J1dHRvbl9xeWNIM3EuXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfaWNvbl9kRUdUYXQge1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcbn1cblxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX0J1dHRvbl9xeWNIM3E6Zm9jdXMge1xuICAgIG91dGxpbmUtb2Zmc2V0OiB2YXIoLS1jdXN0b20tdGhpY2tuZXNzKTtcbiAgICBvdXRsaW5lLXN0eWxlOiBkb3R0ZWQ7XG4gICAgb3V0bGluZS13aWR0aDogdmFyKC0tY3VzdG9tLXRoaWNrbmVzcyk7XG4gICAgb3V0bGluZS1jb2xvcjogdmFyKC0tY3VzdG9tLWNvbG9yLW1haW4pO1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfZWxldmF0ZWRfTTYybXM1LFxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX2ZpbGxlZF9JXzdnQ1Uge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWN1c3RvbS1jb2xvci1tYWluKTtcbiAgICBjb2xvcjogdmFyKC0tY3VzdG9tLWNvbG9yLXRleHQpO1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfZWxldmF0ZWRfTTYybXM1IHtcbiAgICBib3gtc2hhZG93OiAwIDAuMTI1ZW0gMC4yNWVtICMwMDA3O1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfb3V0bGluZWRfZmk0SDdmIHtcbiAgICBib3JkZXI6IHZhcigtLWN1c3RvbS10aGlja25lc3MpIHNvbGlkIHZhcigtLWN1c3RvbS1jb2xvci1tYWluKTtcbiAgICBjb2xvcjogdmFyKC0tY3VzdG9tLWNvbG9yLW1haW4pO1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfdGV4dF9wWWo3S0sge1xuICAgIGNvbG9yOiB2YXIoLS1jdXN0b20tY29sb3ItdGV4dCk7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5cbi5cXFxcLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9CdXR0b25fcXljSDNxOmRpc2FibGVkLFxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX2Rpc2FibGVkX3dCcmVmcyB7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XG4gICAgb3BhY2l0eTogMC42O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfQnV0dG9uX3F5Y0gzcTpub3QoOmRpc2FibGVkKTphY3RpdmUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwLjI1ZW0pO1xufVxuXG4uXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfQnV0dG9uX3F5Y0gzcS5cXFxcLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9lbGV2YXRlZF9NNjJtczU6bm90KDpkaXNhYmxlZCk6YWN0aXZlIHtcbiAgICBib3gtc2hhZG93OiAwIDAuMjVlbSAwLjVlbSAjMDAwNTtcbn1cblxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX0J1dHRvbl9xeWNIM3E6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuICAgIGZpbHRlcjogYnJpZ2h0bmVzcygxNTAlKTtcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJyaWdodG5lc3MoNTAlKTtcbn1cblxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX0J1dHRvbl9xeWNIM3EuXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfZWxldmF0ZWRfTTYybXM1Om5vdCg6ZGlzYWJsZWQpOmhvdmVyLFxuLlxcXFwtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX0J1dHRvbl9xeWNIM3EuXFxcXC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfZmlsbGVkX0lfN2dDVTpub3QoOmRpc2FibGVkKTpob3ZlciB7XG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDEyMCUpO1xuICAgIGJhY2tkcm9wLWZpbHRlcjogbm9uZTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vLi4vbGliL2Rpc3Qvdmlldy9CdXR0b24vQnV0dG9uLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxnQ0FBZ0M7SUFDaEMseUJBQXlCO0lBQ3pCLHlCQUF5QjtJQUN6QiwyQkFBMkI7SUFDM0IsYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsd0JBQXdCO0lBQ3hCLG9CQUFvQjtJQUNwQixtQkFBbUI7SUFDbkIsMkJBQTJCO0lBQzNCLG1CQUFtQjtJQUNuQixRQUFRO0lBQ1IsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0IsbUJBQW1CO0lBQ25CLFFBQVE7QUFDWjs7QUFFQTtJQUNJLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLHVDQUF1QztJQUN2QyxxQkFBcUI7SUFDckIsc0NBQXNDO0lBQ3RDLHVDQUF1QztBQUMzQzs7QUFFQTs7SUFFSSxvQ0FBb0M7SUFDcEMsK0JBQStCO0FBQ25DOztBQUVBO0lBQ0ksa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0ksOERBQThEO0lBQzlELCtCQUErQjtJQUMvQix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSwrQkFBK0I7SUFDL0IsdUJBQXVCO0FBQzNCOztBQUVBOztJQUVJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsdUJBQXVCO0lBQ3ZCLFlBQVk7SUFDWixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSx3QkFBd0I7SUFDeEIsZ0NBQWdDO0FBQ3BDOztBQUVBOztJQUVJLHdCQUF3QjtJQUN4QixxQkFBcUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLkJ1dHRvbiB7XFxuICAgIC0tY3VzdG9tLWNvbG9yLW1haW4tYWxwaGE6ICNmOTA4O1xcbiAgICAtLWN1c3RvbS1jb2xvci1tYWluOiAjZjkwO1xcbiAgICAtLWN1c3RvbS1jb2xvci10ZXh0OiAjMDAwO1xcbiAgICAtLWN1c3RvbS10aGlja25lc3M6IDAuMTI1ZW07XFxuICAgIGZvbnQ6IGluaGVyaXQ7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMWVtO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4uQnV0dG9uID4gKiB7XFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcbn1cXG5cXG4uQnV0dG9uID4gZGl2LmxhYmVsIHtcXG4gICAgZmxleDogMSAxIGF1dG87XFxuICAgIG1pbi13aWR0aDogMDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMWVtO1xcbn1cXG5cXG4uQnV0dG9uLmljb24ge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5CdXR0b246Zm9jdXMge1xcbiAgICBvdXRsaW5lLW9mZnNldDogdmFyKC0tY3VzdG9tLXRoaWNrbmVzcyk7XFxuICAgIG91dGxpbmUtc3R5bGU6IGRvdHRlZDtcXG4gICAgb3V0bGluZS13aWR0aDogdmFyKC0tY3VzdG9tLXRoaWNrbmVzcyk7XFxuICAgIG91dGxpbmUtY29sb3I6IHZhcigtLWN1c3RvbS1jb2xvci1tYWluKTtcXG59XFxuXFxuLmVsZXZhdGVkLFxcbi5maWxsZWQge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jdXN0b20tY29sb3ItbWFpbik7XFxuICAgIGNvbG9yOiB2YXIoLS1jdXN0b20tY29sb3ItdGV4dCk7XFxufVxcblxcbi5lbGV2YXRlZCB7XFxuICAgIGJveC1zaGFkb3c6IDAgMC4xMjVlbSAwLjI1ZW0gIzAwMDc7XFxufVxcblxcbi5vdXRsaW5lZCB7XFxuICAgIGJvcmRlcjogdmFyKC0tY3VzdG9tLXRoaWNrbmVzcykgc29saWQgdmFyKC0tY3VzdG9tLWNvbG9yLW1haW4pO1xcbiAgICBjb2xvcjogdmFyKC0tY3VzdG9tLWNvbG9yLW1haW4pO1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnRleHQge1xcbiAgICBjb2xvcjogdmFyKC0tY3VzdG9tLWNvbG9yLXRleHQpO1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLkJ1dHRvbjpkaXNhYmxlZCxcXG4uZGlzYWJsZWQge1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIGJveC1zaGFkb3c6IG5vbmU7XFxuICAgIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xcbiAgICBvcGFjaXR5OiAwLjY7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uQnV0dG9uOm5vdCg6ZGlzYWJsZWQpOmFjdGl2ZSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwLjI1ZW0pO1xcbn1cXG5cXG4uQnV0dG9uLmVsZXZhdGVkOm5vdCg6ZGlzYWJsZWQpOmFjdGl2ZSB7XFxuICAgIGJveC1zaGFkb3c6IDAgMC4yNWVtIDAuNWVtICMwMDA1O1xcbn1cXG5cXG4uQnV0dG9uOm5vdCg6ZGlzYWJsZWQpOmhvdmVyIHtcXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDE1MCUpO1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJyaWdodG5lc3MoNTAlKTtcXG59XFxuXFxuLkJ1dHRvbi5lbGV2YXRlZDpub3QoOmRpc2FibGVkKTpob3ZlcixcXG4uQnV0dG9uLmZpbGxlZDpub3QoOmRpc2FibGVkKTpob3ZlciB7XFxuICAgIGZpbHRlcjogYnJpZ2h0bmVzcygxMjAlKTtcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJCdXR0b25cIjogYC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfQnV0dG9uX3F5Y0gzcWAsXG5cdFwibGFiZWxcIjogYC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfbGFiZWxfREpzNkFkYCxcblx0XCJpY29uXCI6IGAtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX2ljb25fZEVHVGF0YCxcblx0XCJlbGV2YXRlZFwiOiBgLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9lbGV2YXRlZF9NNjJtczVgLFxuXHRcImZpbGxlZFwiOiBgLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9maWxsZWRfSV83Z0NVYCxcblx0XCJvdXRsaW5lZFwiOiBgLS0tbGliLWRpc3Qtdmlldy1CdXR0b24tQnV0dG9uLW1vZHVsZV9vdXRsaW5lZF9maTRIN2ZgLFxuXHRcInRleHRcIjogYC0tLWxpYi1kaXN0LXZpZXctQnV0dG9uLUJ1dHRvbi1tb2R1bGVfdGV4dF9wWWo3S0tgLFxuXHRcImRpc2FibGVkXCI6IGAtLS1saWItZGlzdC12aWV3LUJ1dHRvbi1CdXR0b24tbW9kdWxlX2Rpc2FibGVkX3dCcmVmc2Bcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5cXFxcLS0tbGliLWRpc3Qtdmlldy1QYW5lbC1QYW5lbC1tb2R1bGVfUGFuZWxfaGprVnVjIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbn1cblxuLlxcXFwtLS1saWItZGlzdC12aWV3LVBhbmVsLVBhbmVsLW1vZHVsZV9QYW5lbF9oamtWdWMgPiAqLmZsZXgtMCB7XG4gICAgZmxleDogMCAwIGF1dG87XG59XG5cbi5cXFxcLS0tbGliLWRpc3Qtdmlldy1QYW5lbC1QYW5lbC1tb2R1bGVfUGFuZWxfaGprVnVjID4gKi5mbGV4LTEge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi8uLi9saWIvZGlzdC92aWV3L1BhbmVsL1BhbmVsLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxTQUFTO0lBQ1QsVUFBVTtBQUNkOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLlBhbmVsIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uUGFuZWwgPiA6Z2xvYmFsKCouZmxleC0wKSB7XFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcbn1cXG5cXG4uUGFuZWwgPiA6Z2xvYmFsKCouZmxleC0xKSB7XFxuICAgIGZsZXg6IDEgMSBhdXRvO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJQYW5lbFwiOiBgLS0tbGliLWRpc3Qtdmlldy1QYW5lbC1QYW5lbC1tb2R1bGVfUGFuZWxfaGprVnVjYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlxcXFwtLS1saWItZGlzdC12aWV3LVN0cmlwLVN0cmlwLW1vZHVsZV9TdHJpcF9keGdyV1Mge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgcGxhY2UtaXRlbXM6IHN0cmV0Y2g7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgZ2FwOiAwO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi8uLi9saWIvZGlzdC92aWV3L1N0cmlwL1N0cmlwLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2Isb0JBQW9CO0lBQ3BCLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtBQUNWXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5TdHJpcCB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBsYWNlLWl0ZW1zOiBzdHJldGNoO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIGdhcDogMDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiU3RyaXBcIjogYC0tLWxpYi1kaXN0LXZpZXctU3RyaXAtU3RyaXAtbW9kdWxlX1N0cmlwX2R4Z3JXU2Bcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImV4cG9ydCBjb25zdCBuYW1lID0gXCJAdG9sb2tvYmFuL3VpXCI7XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMC4xNS4wXCI7XG5leHBvcnQgY29uc3QgZGVzY3JpcHRpb24gPSBcIlJlYWN0IGNvbXBvbmVudHMgd2l0aCB0aGVtZVwiO1xuZXhwb3J0IGNvbnN0IGhvbWVwYWdlID0gXCJodHRwczovL3RvbG9rb2Jhbi5naXRodWIuaW8vdWlcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNW1ieTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5cGJtWnZMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4bFFVRmxMRU5CUVVFN1FVRkRia01zVFVGQlRTeERRVUZETEUxQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJRVHRCUVVNdlFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4WFFVRlhMRWRCUVVjc05rSkJRVFpDTEVOQlFVRTdRVUZEZUVRc1RVRkJUU3hEUVVGRExFMUJRVTBzVVVGQlVTeEhRVUZITEdkRFFVRm5ReXhEUVVGQkluMD0iLCIvKipcbiAqIGJ1aWxkLXJlYWN0LXJvdXRlc1xuICpcbiAqIFdBUk5JTkchIHRoaXMgZmlsZSBoYXMgYmVlbiBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbiAqIFBsZWFzZSBkbyBub3QgZWRpdCBpdCBiZWNhdXNlIGl0IHdpbGwgcHJvYmFibHkgYmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogSWYgeW91IGZpbmQgYSBidWcgb3IgaWYgeW91IG5lZWQgYW4gaW1wcm92ZW1lbnQsIHBsZWFzZSBmaWxsIGFuIGlzc3VlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL3RvbG9rb2Jhbi9idWlsZC1yZWFjdC1yb3V0ZXMvaXNzdWVzXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCB7IFJvdXRlUGF0aCwgUm91dGVNYXRjaCB9IGZyb20gXCIuL3R5cGVzXCJcblxuXG5leHBvcnQgY29uc3QgUk9VVEVTOiBSZWNvcmQ8Um91dGVQYXRoLCBzdHJpbmdbXT4gPSB7XG4gICAgXCIvXCI6IFtcIi9cIl0sXG4gICAgXCIvYXBpXCI6IFtcIi9hcGlcIl0sXG4gICAgXCIvdGVzdFwiOiBbXCIvdGVzdFwiXSxcbiAgICBcIi92aWV3XCI6IFtcIi92aWV3XCJdLFxuICAgIFwiL3ZpZXcvQnV0dG9uXCI6IFtcIi92aWV3L0J1dHRvblwiXSxcbiAgICBcIi92aWV3L0NvZGVIaWdobGlnaHRlclwiOiBbXCIvdmlldy9Db2RlSGlnaGxpZ2h0ZXJcIl0sXG4gICAgXCIvdmlldy9EaWFsb2dcIjogW1wiL3ZpZXcvRGlhbG9nXCJdLFxuICAgIFwiL3ZpZXcvRmxvYXRpbmdCdXR0b25cIjogW1wiL3ZpZXcvRmxvYXRpbmdCdXR0b25cIl0sXG4gICAgXCIvdmlldy9JbnB1dENvbG9yXCI6IFtcIi92aWV3L0lucHV0Q29sb3JcIl0sXG4gICAgXCIvdmlldy9JbnB1dEZpbGVcIjogW1wiL3ZpZXcvSW5wdXRGaWxlXCJdLFxuICAgIFwiL3ZpZXcvSW5wdXRJbWFnZVwiOiBbXCIvdmlldy9JbnB1dEltYWdlXCJdLFxuICAgIFwiL3ZpZXcvSW5wdXRNdWx0aVRleHRcIjogW1wiL3ZpZXcvSW5wdXRNdWx0aVRleHRcIl0sXG4gICAgXCIvdmlldy9JbnB1dFRleHRcIjogW1wiL3ZpZXcvSW5wdXRUZXh0XCJdLFxuICAgIFwiL3ZpZXcvTGFiZWxcIjogW1wiL3ZpZXcvTGFiZWxcIl0sXG4gICAgXCIvdmlldy9PcHRpb25zXCI6IFtcIi92aWV3L09wdGlvbnNcIl0sXG4gICAgXCIvdmlldy9QYW5lbFwiOiBbXCIvdmlldy9QYW5lbFwiXSxcbiAgICBcIi92aWV3L1JlYWRcIjogW1wiL3ZpZXcvUmVhZFwiXSxcbiAgICBcIi92aWV3L1Njcm9sbFwiOiBbXCIvdmlldy9TY3JvbGxcIl0sXG4gICAgXCIvdmlldy9TbGlkZXJcIjogW1wiL3ZpZXcvU2xpZGVyXCJdLFxuICAgIFwiL3ZpZXcvU3Bpbm5lclwiOiBbXCIvdmlldy9TcGlubmVyXCJdLFxuICAgIFwiL3ZpZXcvU3RyaXBcIjogW1wiL3ZpZXcvU3RyaXBcIl0sXG4gICAgXCIvdmlldy9Td2l0Y2hcIjogW1wiL3ZpZXcvU3dpdGNoXCJdLFxuICAgIFwiL3ZpZXcvVGFic1wiOiBbXCIvdmlldy9UYWJzXCJdLFxuICAgIFwiL3ZpZXcvVG91Y2hhYmxlXCI6IFtcIi92aWV3L1RvdWNoYWJsZVwiXSxcbn1cblxuLyoqXG4gKiBVc2luZyB0aGlzIGZ1bmN0aW9uIHByZXZlbnRzIGRhbmdsaW5nIHJvdXRlcyBmcm9tIGJlaW5nXG4gKiBkaXNjb3ZlcmVkIGF0IHJ1bnRpbWUuIElmIHlvdSB0cnkgdG8gcmVhY2ggYSByb3V0ZSB0aGF0XG4gKiBkb2VzIG5vdCBleGlzdCBhbnltb3JlLCB5b3Ugd2lsbCBnZXQgYSBjb21waWxhdGlvbiBlcnJvci5cbiAqIEBwYXJhbSByb3V0ZSBDYW5vbmljIG5hbWUgb2YgdGhlIHRhcmdldCByb3V0ZS5cbiAqIEBwYXJhbSBwYXJhbXMgSWYgdGhlIGNhbm9uaWNhbCBuYW1lIGhhcyBgW25hbWVdYCBwYXJ0cyxcbiAqIHRoZXkgd2lsbCBiZSBoeWRyYXRlZCBieSB0aGUgYHBhcmFtc2AuXG4gKiBGb3IgaW5zdGFuY2UsIGBnb3RvKFwiL2FydGljbGUvW2lkXS9kZXRhaWxcIiwgMjcpYCB3aWxsIGxlYWRcbiAqIHRvIGBcIi9hcnRpY2xlLzI3L2RldGFpbFwiYC5cbiAqIEByZXR1cm5zIGBmYWxzZWAgaWYgd2UgYWxyZWFkeSBhcmUgb24gdGhpcyBwYWdlICh3aXRoIHRoZSBzYW1lIHBhcmFtcykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnb3RvKHJvdXRlOiBSb3V0ZVBhdGgsIC4uLnBhcmFtczogKHN0cmluZyB8IG51bWJlcilbXSkge1xuICAgIGNvbnN0IHBhdGggPSBoeWRyYXRlUm91dGUocm91dGUsIHBhcmFtcylcbiAgICBpZiAocGF0aCA9PT0gY3VycmVudFJvdXRlQ29udGV4dC52YWx1ZT8ucGF0aCkgcmV0dXJuIGZhbHNlXG5cbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGhcbiAgICByZXR1cm4gdHJ1ZVxufVxuXG4vKipcbiAqIFN5bnRheGljIHN1Z2FyIHRvIHJldHVybiBgKCkgPT4geyBnb3RvKC4uLikgfWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlR290byhyb3V0ZTogUm91dGVQYXRoLCAuLi5wYXJhbXM6IChzdHJpbmcgfCBudW1iZXIpW10pIHtcbiAgICByZXR1cm4gKCkgPT4geyBnb3RvKHJvdXRlLCAuLi5wYXJhbXMpIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUm91dGVFcXVhbFRvKHJvdXRlOiBSb3V0ZVBhdGgsIC4uLnBhcmFtczogKHN0cmluZyB8IG51bWJlcilbXSkge1xuICAgIHJldHVybiBjdXJyZW50Um91dGVDb250ZXh0LnZhbHVlPy5wYXRoID09PSBoeWRyYXRlUm91dGUocm91dGUsIHBhcmFtcylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRSb3V0ZUZvclBhdGgocGF0aDogc3RyaW5nKTogUm91dGVNYXRjaCB8IG51bGwge1xuICAgIGxldCBiZXN0TWF0Y2g6IFJvdXRlTWF0Y2ggfCBudWxsID0gbnVsbFxuICAgIGZvciAoY29uc3QgcGFydHMgb2YgT2JqZWN0LnZhbHVlcyhST1VURVMpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hSb3V0ZShwYXRoLCBwYXJ0cylcbiAgICAgICAgaWYgKCFtYXRjaCkgY29udGludWVcblxuICAgICAgICBpZiAobWF0Y2guZGlzdGFuY2UgPT09IDApIHJldHVybiBtYXRjaFxuXG4gICAgICAgIGlmICghYmVzdE1hdGNoIHx8IG1hdGNoLmRpc3RhbmNlIDwgYmVzdE1hdGNoLmRpc3RhbmNlKSB7XG4gICAgICAgICAgICBiZXN0TWF0Y2ggPSBtYXRjaFxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiZXN0TWF0Y2hcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUm91dGUocGF0aDogc3RyaW5nLCBwYXJ0czogc3RyaW5nW10gfCB1bmRlZmluZWQpOiBSb3V0ZU1hdGNoIHwgbnVsbCB7XG4gICAgaWYgKCFwYXJ0cykgcmV0dXJuIG51bGxcbiAgICBcbiAgICBsZXQgY3VycmVudCA9IHBhdGhcbiAgICBjb25zdCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoIDwgMSkgcmV0dXJuIG51bGxcblxuICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV1cbiAgICAgICAgaWYgKHBhcnQuc3RhcnRzV2l0aChcIltcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwYXJ0LnN1YnN0cmluZygxLCBwYXJ0Lmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBjb25zdCBbaGVhZCwgdGFpbF0gPSBkZWNhcGl0YXRlKGN1cnJlbnQpXG4gICAgICAgICAgICBwYXJhbXNbbmFtZV0gPSBoZWFkXG4gICAgICAgICAgICBjdXJyZW50ID0gdGFpbFxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQuc3RhcnRzV2l0aChwYXJ0KSkge1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc3Vic3RyaW5nKHBhcnQubGVuZ3RoICsgMSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWF0Y2g6IFJvdXRlTWF0Y2ggPSB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHJvdXRlOiBwYXJ0cy5qb2luKFwiL1wiKSBhcyBSb3V0ZVBhdGgsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgZGlzdGFuY2U6IGN1cnJlbnQubGVuZ3RoLFxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hcbn1cblxuZnVuY3Rpb24gZGVjYXBpdGF0ZSh0ZXh0OiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmddIHtcbiAgICBjb25zdCBwb3MgPSB0ZXh0LmluZGV4T2YoXCIvXCIpXG4gICAgaWYgKHBvcyA8IDApIHJldHVybiBbdGV4dCwgXCJcIl1cblxuICAgIHJldHVybiBbdGV4dC5zdWJzdHJpbmcoMCwgcG9zKSwgdGV4dC5zdWJzdHJpbmcocG9zICsgMSldXG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVSb3V0ZShyb3V0ZTogUm91dGVQYXRoLCBwYXJhbXM6IChzdHJpbmcgfCBudW1iZXIpW10pIHtcbiAgICBjb25zdCBpdGVtcyA9IFJPVVRFU1tyb3V0ZV1cbiAgICBsZXQgaSA9IDBcbiAgICByZXR1cm4gaXRlbXNcbiAgICAgICAgLm1hcChpdGVtID0+IChpdGVtLmNoYXJBdCgwKSA9PT0gXCJbXCIgPyBwYXJhbXNbaSsrXSA6IGl0ZW0pKVxuICAgICAgICAuam9pbihcIi9cIilcbn1cblxuY2xhc3MgUm91dGVDb250ZXh0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpc3RlbmVycyA9IG5ldyBTZXQ8KGNvbnRleHQ6IFJvdXRlTWF0Y2ggfCBudWxsKSA9PiB2b2lkPigpXG4gICAgcHJpdmF0ZSBfdmFsdWU6IFJvdXRlTWF0Y2ggfCBudWxsID0gbnVsbFxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjdXJpdHk6IFtcbiAgICAgICAgICAgIFJvdXRlUGF0aCxcbiAgICAgICAgICAgIChwYXRoOiBSb3V0ZVBhdGgpID0+IFByb21pc2U8Um91dGVQYXRoIHwgdW5kZWZpbmVkPlxuICAgICAgICBdW11cbiAgICApIHtcbiAgICAgICAgdGhpcy5zZXRIYXNoKHRoaXMuZXh0cmFjdEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpKS50aGVuKCgpID0+XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgdGhpcy5oYW5kbGVIYXNoQ2hhbmdlKVxuICAgICAgICApXG4gICAgfVxuXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6ICh2YWx1ZTogUm91dGVNYXRjaCB8IG51bGwpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuYWRkKGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiAodmFsdWU6IFJvdXRlTWF0Y2ggfCBudWxsKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2V0SGFzaCh0YXJnZXRIYXNoOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB0YXJnZXRIYXNoXG4gICAgICAgIGxldCB2YWx1ZSA9IGZpbmRSb3V0ZUZvclBhdGgoaGFzaClcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtyb3V0ZSwgYWNjZXNzXSBvZiB0aGlzLnNlY3VyaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5yb3V0ZS5zdGFydHNXaXRoKHJvdXRlKSkgY29udGludWVcblxuICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhvcml6ZWRSb3V0ZSA9IGF3YWl0IGFjY2Vzcyh2YWx1ZS5yb3V0ZSlcbiAgICAgICAgICAgICAgICBpZiAoYXV0aG9yaXplZFJvdXRlICYmIGF1dGhvcml6ZWRSb3V0ZSAhPT0gdmFsdWUucm91dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBmaW5kUm91dGVGb3JQYXRoKGF1dGhvcml6ZWRSb3V0ZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlPy5yb3V0ZSA9PT0gdmFsdWU/LnJvdXRlKSByZXR1cm5cblxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIodmFsdWUpKVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlSGFzaENoYW5nZSA9IChldmVudDogSGFzaENoYW5nZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZEhhc2ggPSB0aGlzLmV4dHJhY3RIYXNoKGV2ZW50Lm9sZFVSTClcbiAgICAgICAgY29uc3QgbmV3SGFzaCA9IHRoaXMuZXh0cmFjdEhhc2goZXZlbnQubmV3VVJMKVxuICAgICAgICBjb25zdCBhYnNIYXNoID0gdGhpcy5lbnN1cmVBYnNvbHV0ZUhhc2gobmV3SGFzaCwgb2xkSGFzaClcbiAgICAgICAgaWYgKGFic0hhc2ggIT09IG5ld0hhc2gpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBcIlwiLCBgIyR7YWJzSGFzaH1gKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0SGFzaChhYnNIYXNoKVxuICAgIH1cblxuICAgIHByaXZhdGUgZXh0cmFjdEhhc2godXJsOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IG5ldyBVUkwodXJsKS5oYXNoXG4gICAgICAgIGlmICghaGFzaCkgcmV0dXJuIFwiL1wiXG5cbiAgICAgICAgcmV0dXJuIGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoLnN1YnN0cmluZygxKSA6IGhhc2hcbiAgICB9XG5cbiAgICBwcml2YXRlIGVuc3VyZUFic29sdXRlSGFzaChuZXdIYXNoOiBzdHJpbmcsIG9sZEhhc2g6IHN0cmluZykge1xuICAgICAgICBpZiAobmV3SGFzaC5zdGFydHNXaXRoKFwiL1wiKSkgcmV0dXJuIG5ld0hhc2hcblxuICAgICAgICBsZXQgaGFzaCA9IG5ld0hhc2hcbiAgICAgICAgd2hpbGUgKGhhc2guc3RhcnRzV2l0aChcIi4vXCIpKSB7XG4gICAgICAgICAgICBoYXNoID0gaGFzaC5zdWJzdHJpbmcoXCIuL1wiLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gb2xkSGFzaC5zcGxpdChcIi9cIikuZmlsdGVyKHRoaXMubm9uRW1wdHkpXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBuZXdIYXNoLnNwbGl0KFwiL1wiKSkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IFwiLi5cIikge1xuICAgICAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA+IDApIHBhdGgucG9wKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGl0ZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAvJHtwYXRoLmZpbHRlcih0aGlzLm5vbkVtcHR5KS5qb2luKFwiL1wiKX1gXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWFkb25seSBub25FbXB0eSA9IChzOiB1bmtub3duKTogcyBpcyBzdHJpbmcgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHMgPT09IFwic3RyaW5nXCIgJiYgcy50cmltKCkubGVuZ3RoID4gMFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dCgpOiBSb3V0ZU1hdGNoIHwgbnVsbCB7XG4gICAgY29uc3QgW3BhcmFtcywgc2V0UGFyYW1zXSA9IFJlYWN0LnVzZVN0YXRlKGN1cnJlbnRSb3V0ZUNvbnRleHQudmFsdWUpXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlID0gKHZhbHVlOiBSb3V0ZU1hdGNoIHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgc2V0UGFyYW1zKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRSb3V0ZUNvbnRleHQuYWRkTGlzdGVuZXIodXBkYXRlKVxuICAgICAgICByZXR1cm4gKCkgPT4gY3VycmVudFJvdXRlQ29udGV4dC5yZW1vdmVMaXN0ZW5lcih1cGRhdGUpXG4gICAgfSwgW10pXG4gICAgcmV0dXJuIHBhcmFtc1xufVxuXG5jb25zdCBjdXJyZW50Um91dGVDb250ZXh0ID0gbmV3IFJvdXRlQ29udGV4dChbXG5cbl0pIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9sYXlvdXQubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL2xheW91dC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgdmVyc2lvbiwgVGhlbWUsIFZpZXdTdHJpcCB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCJcblxuaW1wb3J0IHsgaXNSb3V0ZUVxdWFsVG8sIG1ha2VHb3RvIH0gZnJvbSBcIi4vcm91dGVzXCJcblxuaW1wb3J0IFN0eWxlIGZyb20gXCIuL2xheW91dC5tb2R1bGUuY3NzXCJcbmltcG9ydCB7IFJvdXRlUGF0aCB9IGZyb20gXCIuL3R5cGVzXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGF5b3V0KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Vmlld1N0cmlwXG4gICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlLmxheW91dH1cbiAgICAgICAgICAgIGZ1bGxzaXplXG4gICAgICAgICAgICBjb2xvcj1cInByaW1hcnktMVwiXG4gICAgICAgICAgICBvcmllbnRhdGlvbj1cInJvd1wiXG4gICAgICAgICAgICB0ZW1wbGF0ZT1cIioxXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGFzaWRlPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc0ZvcihcIi9cIil9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXttYWtlR290byhcIi9cIil9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBXZWxjb21lXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzRm9yKFwiL3ZpZXdcIil9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXttYWtlR290byhcIi92aWV3XCIpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgQ29tcG9uZW50c1xuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc0ZvcihcIi9hcGlcIil9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXttYWtlR290byhcIi9hcGlcIil9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBBUElcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8ZGl2PkB0b2xva29iYW4vdWkgdnt2ZXJzaW9ufTwvZGl2PlxuICAgICAgICAgICAgPC9hc2lkZT5cbiAgICAgICAgICAgIDxtYWluPlxuICAgICAgICAgICAgICAgIDxkaXY+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgICAgICAgPC9tYWluPlxuICAgICAgICA8L1ZpZXdTdHJpcD5cbiAgICApXG59XG5cbmZ1bmN0aW9uIGNsYXNzRm9yKHJvdXRlOiBSb3V0ZVBhdGgpIHtcbiAgICByZXR1cm4gVGhlbWUuY2xhc3NOYW1lcy5qb2luKGlzUm91dGVFcXVhbFRvKHJvdXRlKSAmJiBTdHlsZS5hY3RpdmUpXG59XG4iLCIvKipcbiAqIDIwMjQtMDUtMTRUMTI6MDg6MDkuNzI1WlxuICpcbiAqIFRoaXMgZmlsZSBoYXMgYmVlbiBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCB3aXRoOlxuICogbnBtIHJ1biBnZW5lcmF0ZVxuICogXG4gKiBQbGVhc2UgZG8gbm90IG1vZGlmeSBpdCBtYW51YWxseS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBWaWV3UGFuZWwgfSBmcm9tIFwiQHRvbG9rb2Jhbi91aVwiXG5pbXBvcnQgTGluayBmcm9tIFwiQC92aWV3L0xpbmtcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWaWV3c0xheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gICAgcmV0dXJuIDxWaWV3UGFuZWwgZGlzcGxheT1cImZsZXhcIiBhbGlnbkl0ZW1zPVwic3RyZXRjaFwiIGhlaWdodD1cIjEwMCVcIj5cbiAgICAgICAgPFZpZXdQYW5lbCBkaXNwbGF5PVwiZmxleFwiIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnbkl0ZW1zPVwic3RyZXRjaFwiIHBhZGRpbmc9XCJNXCIgb3ZlcmZsb3c9XCJhdXRvXCIgY29sb3I9XCJwcmltYXJ5LTJcIj5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9CdXR0b25cIj5CdXR0b248L0xpbms+XG4gICAgICAgICAgICA8TGluayBoYXNoPVwiL3ZpZXcvQ29kZUhpZ2hsaWdodGVyXCI+Q29kZUhpZ2hsaWdodGVyPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L0RpYWxvZ1wiPkRpYWxvZzwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9GbG9hdGluZ0J1dHRvblwiPkZsb2F0aW5nQnV0dG9uPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L0lucHV0Q29sb3JcIj5JbnB1dENvbG9yPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L0lucHV0RmlsZVwiPklucHV0RmlsZTwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9JbnB1dEltYWdlXCI+SW5wdXRJbWFnZTwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9JbnB1dE11bHRpVGV4dFwiPklucHV0TXVsdGlUZXh0PC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L0lucHV0VGV4dFwiPklucHV0VGV4dDwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9MYWJlbFwiPkxhYmVsPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L09wdGlvbnNcIj5PcHRpb25zPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L1BhbmVsXCI+UGFuZWw8L0xpbms+XG4gICAgICAgICAgICA8TGluayBoYXNoPVwiL3ZpZXcvUmVhZFwiPlJlYWQ8L0xpbms+XG4gICAgICAgICAgICA8TGluayBoYXNoPVwiL3ZpZXcvU2Nyb2xsXCI+U2Nyb2xsPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L1NsaWRlclwiPlNsaWRlcjwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9TcGlubmVyXCI+U3Bpbm5lcjwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9TdHJpcFwiPlN0cmlwPC9MaW5rPlxuICAgICAgICAgICAgPExpbmsgaGFzaD1cIi92aWV3L1N3aXRjaFwiPlN3aXRjaDwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9UYWJzXCI+VGFiczwvTGluaz5cbiAgICAgICAgICAgIDxMaW5rIGhhc2g9XCIvdmlldy9Ub3VjaGFibGVcIj5Ub3VjaGFibGU8L0xpbms+XG4gICAgICAgIDwvVmlld1BhbmVsPlxuICAgICAgICA8Vmlld1BhbmVsIGNvbG9yPVwibmV1dHJhbC01XCIgZmxleD1cIjEgMSBhdXRvXCI+e2NoaWxkcmVufTwvVmlld1BhbmVsPlxuICAgIDwvVmlld1BhbmVsPlxufSIsIi8qKlxuICogYnVpbGQtcmVhY3Qtcm91dGVzXG4gKlxuICogV0FSTklORyEgdGhpcyBmaWxlIGhhcyBiZWVuIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxuICogUGxlYXNlIGRvIG5vdCBlZGl0IGl0IGJlY2F1c2UgaXQgd2lsbCBwcm9iYWJseSBiZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBJZiB5b3UgZmluZCBhIGJ1ZyBvciBpZiB5b3UgbmVlZCBhbiBpbXByb3ZlbWVudCwgcGxlYXNlIGZpbGwgYW4gaXNzdWU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vdG9sb2tvYmFuL2J1aWxkLXJlYWN0LXJvdXRlcy9pc3N1ZXNcbiAqL1xuXG5leHBvcnQgKiBmcm9tIFwiLi9yb3V0ZXNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIlxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IHsgbWF0Y2hSb3V0ZSwgdXNlUm91dGVDb250ZXh0LCBST1VURVMgfSBmcm9tIFwiLi9yb3V0ZXNcIlxuaW1wb3J0IHsgUm91dGVNYXRjaCwgUm91dGVQYXRoIH0gZnJvbSBcIi4vdHlwZXNcIlxuXG5pbXBvcnQgTGF5b3V0MCBmcm9tIFwiLi9sYXlvdXRcIlxuaW1wb3J0IExheW91dDMgZnJvbSBcIi4vdmlldy9sYXlvdXRcIlxuY29uc3QgUGFnZTAgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vcGFnZVwiKSlcbmNvbnN0IFBhZ2UxID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL2FwaS9wYWdlXCIpKVxuY29uc3QgUGFnZTIgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdGVzdC9wYWdlXCIpKVxuY29uc3QgUGFnZTMgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9wYWdlXCIpKVxuY29uc3QgUGFnZTQgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9CdXR0b24vcGFnZVwiKSlcbmNvbnN0IFBhZ2U3ID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL3ZpZXcvQ29kZUhpZ2hsaWdodGVyL3BhZ2VcIikpXG5jb25zdCBQYWdlMTAgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9EaWFsb2cvcGFnZVwiKSlcbmNvbnN0IFBhZ2UxMyA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L0Zsb2F0aW5nQnV0dG9uL3BhZ2VcIikpXG5jb25zdCBQYWdlMTYgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9JbnB1dENvbG9yL3BhZ2VcIikpXG5jb25zdCBQYWdlMTkgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9JbnB1dEZpbGUvcGFnZVwiKSlcbmNvbnN0IFBhZ2UyMiA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L0lucHV0SW1hZ2UvcGFnZVwiKSlcbmNvbnN0IFBhZ2UyNSA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L0lucHV0TXVsdGlUZXh0L3BhZ2VcIikpXG5jb25zdCBQYWdlMjggPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9JbnB1dFRleHQvcGFnZVwiKSlcbmNvbnN0IFBhZ2UzMSA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L0xhYmVsL3BhZ2VcIikpXG5jb25zdCBQYWdlMzQgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9PcHRpb25zL3BhZ2VcIikpXG5jb25zdCBQYWdlMzcgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9QYW5lbC9wYWdlXCIpKVxuY29uc3QgUGFnZTQwID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL3ZpZXcvUmVhZC9wYWdlXCIpKVxuY29uc3QgUGFnZTQzID0gUmVhY3QubGF6eSgoKSA9PiBpbXBvcnQoXCIuL3ZpZXcvU2Nyb2xsL3BhZ2VcIikpXG5jb25zdCBQYWdlNDYgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9TbGlkZXIvcGFnZVwiKSlcbmNvbnN0IFBhZ2U0OSA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L1NwaW5uZXIvcGFnZVwiKSlcbmNvbnN0IFBhZ2U1MiA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L1N0cmlwL3BhZ2VcIikpXG5jb25zdCBQYWdlNTUgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vdmlldy9Td2l0Y2gvcGFnZVwiKSlcbmNvbnN0IFBhZ2U1OCA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L1RhYnMvcGFnZVwiKSlcbmNvbnN0IFBhZ2U2MSA9IFJlYWN0LmxhenkoKCkgPT4gaW1wb3J0KFwiLi92aWV3L1RvdWNoYWJsZS9wYWdlXCIpKVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoeyBsYW5nIH06IHsgbGFuZz86IHN0cmluZyB9KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHVzZVJvdXRlQ29udGV4dCgpXG4gICAgY29uc3QgZmIgPSA8ZGl2PkxvYWRpbmcuLi48L2Rpdj5cbiAgICBjb25zdCBseTAgPSBMYXlvdXQwXG4gICAgY29uc3QgcGcwID0gUGFnZTBcbiAgICBjb25zdCBwZzEgPSBQYWdlMVxuICAgIGNvbnN0IHBnMiA9IFBhZ2UyXG4gICAgY29uc3QgbHkzID0gTGF5b3V0M1xuICAgIGNvbnN0IHBnMyA9IFBhZ2UzXG4gICAgY29uc3QgcGc0ID0gUGFnZTRcbiAgICBjb25zdCBwZzcgPSBQYWdlN1xuICAgIGNvbnN0IHBnMTAgPSBQYWdlMTBcbiAgICBjb25zdCBwZzEzID0gUGFnZTEzXG4gICAgY29uc3QgcGcxNiA9IFBhZ2UxNlxuICAgIGNvbnN0IHBnMTkgPSBQYWdlMTlcbiAgICBjb25zdCBwZzIyID0gUGFnZTIyXG4gICAgY29uc3QgcGcyNSA9IFBhZ2UyNVxuICAgIGNvbnN0IHBnMjggPSBQYWdlMjhcbiAgICBjb25zdCBwZzMxID0gUGFnZTMxXG4gICAgY29uc3QgcGczNCA9IFBhZ2UzNFxuICAgIGNvbnN0IHBnMzcgPSBQYWdlMzdcbiAgICBjb25zdCBwZzQwID0gUGFnZTQwXG4gICAgY29uc3QgcGc0MyA9IFBhZ2U0M1xuICAgIGNvbnN0IHBnNDYgPSBQYWdlNDZcbiAgICBjb25zdCBwZzQ5ID0gUGFnZTQ5XG4gICAgY29uc3QgcGc1MiA9IFBhZ2U1MlxuICAgIGNvbnN0IHBnNTUgPSBQYWdlNTVcbiAgICBjb25zdCBwZzU4ID0gUGFnZTU4XG4gICAgY29uc3QgcGc2MSA9IFBhZ2U2MVxuICAgIHJldHVybiAoXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIFBhZ2U9e3BnMH0gTGF5b3V0PXtseTB9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9hcGlcIiBQYWdlPXtwZzF9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdGVzdFwiIFBhZ2U9e3BnMn0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fS8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3XCIgUGFnZT17cGczfSBMYXlvdXQ9e2x5M30gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0J1dHRvblwiIFBhZ2U9e3BnNH0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9CdXR0b24vZGVtb1wiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0J1dHRvbi9kZW1vL0RlZmF1bHRcIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9Lz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvQ29kZUhpZ2hsaWdodGVyXCIgUGFnZT17cGc3fSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0NvZGVIaWdobGlnaHRlci9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvQ29kZUhpZ2hsaWdodGVyL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9EaWFsb2dcIiBQYWdlPXtwZzEwfSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0RpYWxvZy9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvRGlhbG9nL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9GbG9hdGluZ0J1dHRvblwiIFBhZ2U9e3BnMTN9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvRmxvYXRpbmdCdXR0b24vZGVtb1wiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0Zsb2F0aW5nQnV0dG9uL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dENvbG9yXCIgUGFnZT17cGcxNn0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dENvbG9yL2RlbW9cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dENvbG9yL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dEZpbGVcIiBQYWdlPXtwZzE5fSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0lucHV0RmlsZS9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvSW5wdXRGaWxlL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dEltYWdlXCIgUGFnZT17cGcyMn0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dEltYWdlL2RlbW9cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dEltYWdlL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dE11bHRpVGV4dFwiIFBhZ2U9e3BnMjV9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvSW5wdXRNdWx0aVRleHQvZGVtb1wiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0lucHV0TXVsdGlUZXh0L2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9JbnB1dFRleHRcIiBQYWdlPXtwZzI4fSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0lucHV0VGV4dC9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvSW5wdXRUZXh0L2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9MYWJlbFwiIFBhZ2U9e3BnMzF9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvTGFiZWwvZGVtb1wiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L0xhYmVsL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9PcHRpb25zXCIgUGFnZT17cGczNH0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9PcHRpb25zL2RlbW9cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9PcHRpb25zL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9QYW5lbFwiIFBhZ2U9e3BnMzd9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvUGFuZWwvZGVtb1wiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L1BhbmVsL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9SZWFkXCIgUGFnZT17cGc0MH0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9SZWFkL2RlbW9cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9SZWFkL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9TY3JvbGxcIiBQYWdlPXtwZzQzfSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L1Njcm9sbC9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvU2Nyb2xsL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9TbGlkZXJcIiBQYWdlPXtwZzQ2fSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L1NsaWRlci9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvU2xpZGVyL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9TcGlubmVyXCIgUGFnZT17cGc0OX0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9TcGlubmVyL2RlbW9cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9TcGlubmVyL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9TdHJpcFwiIFBhZ2U9e3BnNTJ9IGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvU3RyaXAvZGVtb1wiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L1N0cmlwL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9Td2l0Y2hcIiBQYWdlPXtwZzU1fSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L1N3aXRjaC9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvU3dpdGNoL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9UYWJzXCIgUGFnZT17cGc1OH0gZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9UYWJzL2RlbW9cIiBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9UYWJzL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdmlldy9Ub3VjaGFibGVcIiBQYWdlPXtwZzYxfSBmYWxsYmFjaz17ZmJ9IGNvbnRleHQ9e2NvbnRleHR9PlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi92aWV3L1RvdWNoYWJsZS9kZW1vXCIgZmFsbGJhY2s9e2ZifSBjb250ZXh0PXtjb250ZXh0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZpZXcvVG91Y2hhYmxlL2RlbW8vRGVmYXVsdFwiIGZhbGxiYWNrPXtmYn0gY29udGV4dD17Y29udGV4dH0vPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICA8L1JvdXRlPlxuICAgIClcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZnVuY3Rpb24gaW50bDxUIGV4dGVuZHMgUGFnZUNvbXBvbmVudCB8IENvbnRhaW5lckNvbXBvbmVudCB8IEpTWC5FbGVtZW50PihcbiAgICBwYWdlOiBULFxuICAgIHRyYW5zbGF0aW9uczogUmVjb3JkPHN0cmluZywgVD4sXG4gICAgbGFuZyA9IFwiXCJcbik6IFQge1xuICAgIGNvbnN0IGNhbmRpZGF0ZTEgPSB0cmFuc2xhdGlvbnNbbGFuZ11cbiAgICBpZiAoY2FuZGlkYXRlMSkgcmV0dXJuIGNhbmRpZGF0ZTFcblxuICAgIGNvbnN0IFtwcmVmaXhdID0gbGFuZy5zcGxpdChcIi1cIilcbiAgICBjb25zdCBjYW5kaWRhdGUyID0gdHJhbnNsYXRpb25zW3ByZWZpeF1cbiAgICBpZiAoY2FuZGlkYXRlMikgcmV0dXJuIGNhbmRpZGF0ZTJcblxuICAgIHJldHVybiBwYWdlXG59XG5cbnR5cGUgUGFnZUNvbXBvbmVudCA9IFJlYWN0LkZDPHsgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0+XG50eXBlIENvbnRhaW5lckNvbXBvbmVudCA9IFJlYWN0LkZDPHtcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG4gICAgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XG59PlxuXG5pbnRlcmZhY2UgUm91dGVQcm9wcyB7XG4gICAgcGF0aDogc3RyaW5nXG4gICAgZWxlbWVudD86IEpTWC5FbGVtZW50XG4gICAgZmFsbGJhY2s/OiBKU1guRWxlbWVudFxuICAgIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlXG4gICAgUGFnZT86IFBhZ2VDb21wb25lbnRcbiAgICBMYXlvdXQ/OiBDb250YWluZXJDb21wb25lbnRcbiAgICBUZW1wbGF0ZT86IENvbnRhaW5lckNvbXBvbmVudFxuICAgIGNvbnRleHQ6IFJvdXRlTWF0Y2ggfCBudWxsXG59XG5cbmZ1bmN0aW9uIFJvdXRlKHtcbiAgICBwYXRoLFxuICAgIGZhbGxiYWNrLFxuICAgIGNoaWxkcmVuLFxuICAgIFBhZ2UsXG4gICAgTGF5b3V0LFxuICAgIFRlbXBsYXRlLFxuICAgIGNvbnRleHQsXG59OiBSb3V0ZVByb3BzKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjb250ZXh0ICYmIG1hdGNoUm91dGUoY29udGV4dC5wYXRoLCBST1VURVNbcGF0aCBhcyBSb3V0ZVBhdGhdKVxuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGxcblxuICAgIGlmIChtYXRjaC5kaXN0YW5jZSA9PT0gMCkge1xuICAgICAgICBpZiAoIVBhZ2UpIHJldHVybiBudWxsXG5cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IFRlbXBsYXRlID8gKFxuICAgICAgICAgICAgPFRlbXBsYXRlIHBhcmFtcz17bWF0Y2gucGFyYW1zfT5cbiAgICAgICAgICAgICAgICA8UGFnZSBwYXJhbXM9e21hdGNoLnBhcmFtc30gLz5cbiAgICAgICAgICAgIDwvVGVtcGxhdGU+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgICA8UGFnZSBwYXJhbXM9e21hdGNoLnBhcmFtc30gLz5cbiAgICAgICAgKVxuICAgICAgICBpZiAoTGF5b3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxMYXlvdXQgcGFyYW1zPXttYXRjaC5wYXJhbXN9PlxuICAgICAgICAgICAgICAgICAgICA8UmVhY3QuU3VzcGVuc2UgZmFsbGJhY2s9e2ZhbGxiYWNrfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtlbGVtZW50fVxuICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LlN1c3BlbnNlPlxuICAgICAgICAgICAgICAgIDwvTGF5b3V0PlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8UmVhY3QuU3VzcGVuc2UgZmFsbGJhY2s9e2ZhbGxiYWNrfT57ZWxlbWVudH08L1JlYWN0LlN1c3BlbnNlPlxuICAgIH1cbiAgICByZXR1cm4gTGF5b3V0ID8gKFxuICAgICAgICA8TGF5b3V0IHBhcmFtcz17bWF0Y2gucGFyYW1zfT57Y2hpbGRyZW59PC9MYXlvdXQ+XG4gICAgKSA6IChcbiAgICAgICAgPD57Y2hpbGRyZW59PC8+XG4gICAgKVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMV0hLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiXG5pbXBvcnQgeyB2ZXJzaW9uLCBUaGVtZSB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCJcblxuaW1wb3J0IEFwcCBmcm9tIFwiLi9hcHBcIlxuXG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiXG5cbmNvbnNvbGUubG9nKFwiQHRvbG9rb2Jhbi91aVwiLCB2ZXJzaW9uKVxuXG5mdW5jdGlvbiBzdGFydCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIlZFUlNJT05cIiwgUmVhY3QudmVyc2lvbilcbiAgICBuZXcgVGhlbWUoe30pLmFwcGx5KClcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikgYXMgSFRNTEVsZW1lbnRcbiAgICBjb25zdCByb290ID0gY3JlYXRlUm9vdChjb250YWluZXIpXG4gICAgcm9vdC5yZW5kZXIoXG4gICAgICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgICAgICAgPEFwcCAvPlxuICAgICAgICA8L1JlYWN0LlN0cmljdE1vZGU+XG4gICAgKVxuICAgIC8vIFJlbW92ZSBzcGxhc2ggc2NyZWVuLlxuICAgIHJlbW92ZVNwbGFzaFNjcmVlbigpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNwbGFzaFNjcmVlbigpIHtcbiAgICBjb25zdCBTUExBU0hfVkFOSVNISU5HX0RFTEFZID0gOTAwXG4gICAgY29uc3Qgc3BsYXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0Z2QtbG9nb1wiKVxuICAgIGlmICghc3BsYXNoKSByZXR1cm5cblxuICAgIHNwbGFzaC5jbGFzc0xpc3QuYWRkKFwidmFuaXNoXCIpXG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBzcGxhc2gucGFyZW50Tm9kZVxuICAgICAgICBpZiAoIXBhcmVudCkgcmV0dXJuXG5cbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHNwbGFzaClcbiAgICB9LCBTUExBU0hfVkFOSVNISU5HX0RFTEFZKVxufVxuXG5zdGFydCgpXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL0xpbmsubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL0xpbmsubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgVmlld0J1dHRvbiB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCJcblxuaW1wb3J0IFN0eWxlIGZyb20gXCIuL0xpbmsubW9kdWxlLmNzc1wiXG5cbmludGVyZmFjZSBMaW5rUHJvcHMge1xuICAgIGhhc2g6IHN0cmluZ1xuICAgIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGluayhwcm9wczogTGlua1Byb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFZpZXdCdXR0b24gY2xhc3NOYW1lPXtTdHlsZS5MaW5rfSBvbkNsaWNrPXtgIyR7cHJvcHMuaGFzaH1gfT5cbiAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9WaWV3QnV0dG9uPlxuICAgIClcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBzdHlsZUNoaWxkKHsgZmxleCwgZmxleEdyb3csIGZsZXhTaHJpbmssIGZsZXhCYXNpcywgZ3JpZFJvdywgZ3JpZENvbHVtbiwgYWxpZ25TZWxmLCBqdXN0aWZ5U2VsZiwgfSkge1xuICAgIGNvbnN0IHN0eWxlID0ge307XG4gICAgaWYgKGZsZXgpXG4gICAgICAgIHN0eWxlLmZsZXggPSBmbGV4O1xuICAgIGlmIChmbGV4R3JvdylcbiAgICAgICAgc3R5bGUuZmxleEdyb3cgPSBmbGV4R3JvdztcbiAgICBpZiAoZmxleFNocmluaylcbiAgICAgICAgc3R5bGUuZmxleFNocmluayA9IGZsZXhTaHJpbms7XG4gICAgaWYgKGZsZXhCYXNpcylcbiAgICAgICAgc3R5bGUuZmxleEJhc2lzID0gZmxleEJhc2lzO1xuICAgIGlmICh0eXBlb2YgZ3JpZFJvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgc3R5bGUuZ3JpZFJvdyA9IGdyaWRSb3c7XG4gICAgaWYgKHR5cGVvZiBncmlkQ29sdW1uICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICBzdHlsZS5ncmlkQ29sdW1uID0gZ3JpZENvbHVtbjtcbiAgICBpZiAodHlwZW9mIGFsaWduU2VsZiAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgc3R5bGUuYWxpZ25TZWxmID0gYWxpZ25TZWxmO1xuICAgIGlmICh0eXBlb2YganVzdGlmeVNlbGYgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHN0eWxlLmp1c3RpZnlTZWxmID0ganVzdGlmeVNlbGY7XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJocGJHUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZkR2hsYldVdmMzUjViR1Z6TDJOb2FXeGtMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVcxSFFTeE5RVUZOTEZWQlFWVXNWVUZCVlN4RFFVRkRMRVZCUTNaQ0xFbEJRVWtzUlVGRFNpeFJRVUZSTEVWQlExSXNWVUZCVlN4RlFVTldMRk5CUVZNc1JVRkRWQ3hQUVVGUExFVkJRMUFzVlVGQlZTeEZRVU5XTEZOQlFWTXNSVUZEVkN4WFFVRlhMRWRCUTBjN1NVRkRaQ3hOUVVGTkxFdEJRVXNzUjBGQmQwSXNSVUZCUlN4RFFVRkJPMGxCUTNKRExFbEJRVWtzU1VGQlNUdFJRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGQk8wbEJRek5DTEVsQlFVa3NVVUZCVVR0UlFVRkZMRXRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZCTzBsQlEzWkRMRWxCUVVrc1ZVRkJWVHRSUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkJPMGxCUXpkRExFbEJRVWtzVTBGQlV6dFJRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGQk8wbEJRekZETEVsQlFVa3NUMEZCVHl4UFFVRlBMRXRCUVVzc1YwRkJWenRSUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkJPMGxCUXpORUxFbEJRVWtzVDBGQlR5eFZRVUZWTEV0QlFVc3NWMEZCVnp0UlFVRkZMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZCTzBsQlEzQkZMRWxCUVVrc1QwRkJUeXhUUVVGVExFdEJRVXNzVjBGQlZ6dFJRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGQk8wbEJRMnBGTEVsQlFVa3NUMEZCVHl4WFFVRlhMRXRCUVVzc1YwRkJWenRSUVVGRkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4RFFVRkJPMGxCUTNaRkxFOUJRVThzUzBGQlN5eERRVUZCTzBGQlEyaENMRU5CUVVNaWZRPT0iLCJleHBvcnQgZnVuY3Rpb24gc3R5bGVDb2xvcih7IGNvbG9yLCB0ZXh0Q29sb3IsIGJhY2tDb2xvciwgc2hhZG93IH0sIGRlZmF1bHRzID0ge30pIHtcbiAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgIGlmICghY29sb3IgJiYgIXRleHRDb2xvciAmJiAhYmFja0NvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgICAgIHRleHRDb2xvciA9IGRlZmF1bHRzLnRleHRDb2xvcjtcbiAgICAgICAgYmFja0NvbG9yID0gZGVmYXVsdHMuYmFja0NvbG9yO1xuICAgIH1cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgc3R5bGUuY29sb3IgPSBgdmFyKC0tdGhlbWUtY29sb3Itb24tJHtjb2xvcn0pYDtcbiAgICAgICAgc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYHZhcigtLXRoZW1lLWNvbG9yLSR7Y29sb3J9KWA7XG4gICAgfVxuICAgIGlmICh0ZXh0Q29sb3IpXG4gICAgICAgIHN0eWxlLmNvbG9yID0gYHZhcigtLXRoZW1lLWNvbG9yLSR7dGV4dENvbG9yfSlgO1xuICAgIGlmIChiYWNrQ29sb3IpXG4gICAgICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9IGB2YXIoLS10aGVtZS1jb2xvci0ke2JhY2tDb2xvcn0pYDtcbiAgICBpZiAoc2hhZG93KVxuICAgICAgICBzdHlsZS5ib3hTaGFkb3cgPSBgdmFyKC0tdGhlbWUtc2hhZG93LSR7c2hhZG93fSwgbm9uZSlgO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZUNvbG9yVmFycyh7IGNvbG9yLCB0ZXh0Q29sb3IsIGJhY2tDb2xvciwgfSkge1xuICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICBcIi0tY3VzdG9tLWNvbG9yLXRleHRcIjogXCJpbmhlcml0XCIsXG4gICAgICAgIFwiLS1jdXN0b20tY29sb3ItYmFja1wiOiBcImluaGVyaXRcIixcbiAgICB9O1xuICAgIGlmIChjb2xvcikge1xuICAgICAgICBzdHlsZVtcIi0tY3VzdG9tLWNvbG9yLXRleHRcIl0gPSBgdmFyKC0tdGhlbWUtY29sb3Itb24tJHtjb2xvcn0pYDtcbiAgICAgICAgc3R5bGVbXCItLWN1c3RvbS1jb2xvci1iYWNrXCJdID0gYHZhcigtLXRoZW1lLWNvbG9yLSR7Y29sb3J9KWA7XG4gICAgfVxuICAgIGlmICh0ZXh0Q29sb3IpXG4gICAgICAgIHN0eWxlW1wiLS1jdXN0b20tY29sb3ItdGV4dFwiXSA9IGB2YXIoLS10aGVtZS1jb2xvci0ke3RleHRDb2xvcn0pYDtcbiAgICBpZiAoYmFja0NvbG9yKVxuICAgICAgICBzdHlsZVtcIi0tY3VzdG9tLWNvbG9yLWJhY2tcIl0gPSBgdmFyKC0tdGhlbWUtY29sb3ItJHtiYWNrQ29sb3J9KWA7XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5c2IzSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZkR2hsYldVdmMzUjViR1Z6TDJOdmJHOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVhsQ1FTeE5RVUZOTEZWQlFWVXNWVUZCVlN4RFFVTjBRaXhGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTFCUVUwc1JVRkJiVUlzUlVGRGVFUXNWMEZCY1VNc1JVRkJSVHRKUVVWMlF5eE5RVUZOTEV0QlFVc3NSMEZCZDBJc1JVRkJSU3hEUVVGQk8wbEJRM0pETEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhUUVVGVExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0UlFVTnlReXhMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUVR0UlFVTjBRaXhUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUVR0UlFVTTVRaXhUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUVR0SlFVTnNReXhEUVVGRE8wbEJRMFFzU1VGQlNTeExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTlNMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzZDBKQlFYZENMRXRCUVVzc1IwRkJSeXhEUVVGQk8xRkJRemxETEV0QlFVc3NRMEZCUXl4bFFVRmxMRWRCUVVjc2NVSkJRWEZDTEV0QlFVc3NSMEZCUnl4RFFVRkJPMGxCUTNwRUxFTkJRVU03U1VGRFJDeEpRVUZKTEZOQlFWTTdVVUZCUlN4TFFVRkxMRU5CUVVNc1MwRkJTeXhIUVVGSExIRkNRVUZ4UWl4VFFVRlRMRWRCUVVjc1EwRkJRVHRKUVVNNVJDeEpRVUZKTEZOQlFWTTdVVUZCUlN4TFFVRkxMRU5CUVVNc1pVRkJaU3hIUVVGSExIRkNRVUZ4UWl4VFFVRlRMRWRCUVVjc1EwRkJRVHRKUVVONFJTeEpRVUZKTEUxQlFVMDdVVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExITkNRVUZ6UWl4TlFVRk5MRk5CUVZNc1EwRkJRVHRKUVVOdVJTeFBRVUZQTEV0QlFVc3NRMEZCUVR0QlFVTm9RaXhEUVVGRE8wRkJSVVFzVFVGQlRTeFZRVUZWTEdOQlFXTXNRMEZCUXl4RlFVTXpRaXhMUVVGTExFVkJRMHdzVTBGQlV5eEZRVU5VTEZOQlFWTXNSMEZEU3p0SlFVTmtMRTFCUVUwc1MwRkJTeXhIUVVGM1FqdFJRVU12UWl4eFFrRkJjVUlzUlVGQlJTeFRRVUZUTzFGQlEyaERMSEZDUVVGeFFpeEZRVUZGTEZOQlFWTTdTMEZEYmtNc1EwRkJRVHRKUVVORUxFbEJRVWtzUzBGQlN5eEZRVUZGTEVOQlFVTTdVVUZEVWl4TFFVRkxMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4M1FrRkJkMElzUzBGQlN5eEhRVUZITEVOQlFVRTdVVUZETDBRc1MwRkJTeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWRCUVVjc2NVSkJRWEZDTEV0QlFVc3NSMEZCUnl4RFFVRkJPMGxCUTJoRkxFTkJRVU03U1VGRFJDeEpRVUZKTEZOQlFWTTdVVUZEVkN4TFFVRkxMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4eFFrRkJjVUlzVTBGQlV5eEhRVUZITEVOQlFVRTdTVUZEY0VVc1NVRkJTU3hUUVVGVE8xRkJRMVFzUzBGQlN5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFZEJRVWNzY1VKQlFYRkNMRk5CUVZNc1IwRkJSeXhEUVVGQk8wbEJRM0JGTEU5QlFVOHNTMEZCU3l4RFFVRkJPMEZCUTJoQ0xFTkJRVU1pZlE9PSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL2RpbWVuc2lvbi5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL2RpbWVuc2lvbi5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFN0eWxlIGZyb20gXCIuLi9jc3MvZGltZW5zaW9uLm1vZHVsZS5jc3NcIjtcbmV4cG9ydCBmdW5jdGlvbiBzdHlsZURpbWVuc2lvbih7IHdpZHRoLCBoZWlnaHQsIG1heFdpZHRoID0gXCIxMDB2d1wiLCBtYXhIZWlnaHQsIG1pbldpZHRoLCBtaW5IZWlnaHQsIH0pIHtcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIG1heEhlaWdodCxcbiAgICAgICAgbWluV2lkdGgsXG4gICAgICAgIG1pbkhlaWdodCxcbiAgICB9O1xuICAgIHJldHVybiBzdHlsZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc25hbWVEaW1lbnNpb24oeyBmdWxsc2l6ZSA9IGZhbHNlLCBmdWxsd2lkdGggPSBmYWxzZSwgZnVsbGhlaWdodCA9IGZhbHNlLCBmdWxsd2lkZSA9IGZhbHNlLCBmdWxsbmFycm93ID0gZmFsc2UsIH0pIHtcbiAgICBpZiAoZnVsbHNpemUpXG4gICAgICAgIHJldHVybiBTdHlsZS5mdWxsc2l6ZTtcbiAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgaWYgKGZ1bGx3aWR0aClcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFN0eWxlLmZ1bGx3aWR0aCk7XG4gICAgaWYgKGZ1bGxoZWlnaHQpXG4gICAgICAgIGNsYXNzZXMucHVzaChTdHlsZS5mdWxsaGVpZ2h0KTtcbiAgICBpZiAoZnVsbHdpZGUpXG4gICAgICAgIGNsYXNzZXMucHVzaChTdHlsZS5mdWxsd2lkZSk7XG4gICAgaWYgKGZ1bGxuYXJyb3cpXG4gICAgICAgIGNsYXNzZXMucHVzaChTdHlsZS5mdWxsbmFycm93KTtcbiAgICByZXR1cm4gY2xhc3Nlcy5qb2luKFwiIFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpHbHRaVzV6YVc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwzUm9aVzFsTDNOMGVXeGxjeTlrYVcxbGJuTnBiMjR1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlEwRXNUMEZCVHl4TFFVRkxMRTFCUVUwc05rSkJRVFpDTEVOQlFVRTdRVUV5UWk5RExFMUJRVTBzVlVGQlZTeGpRVUZqTEVOQlFVTXNSVUZETTBJc1MwRkJTeXhGUVVOTUxFMUJRVTBzUlVGRFRpeFJRVUZSTEVkQlFVY3NUMEZCVHl4RlFVTnNRaXhUUVVGVExFVkJRMVFzVVVGQlVTeEZRVU5TTEZOQlFWTXNSMEZEVXp0SlFVTnNRaXhOUVVGTkxFdEJRVXNzUjBGQmQwSTdVVUZETDBJc1MwRkJTenRSUVVOTUxFMUJRVTA3VVVGRFRpeFJRVUZSTzFGQlExSXNVMEZCVXp0UlFVTlVMRkZCUVZFN1VVRkRVaXhUUVVGVE8wdEJRMW9zUTBGQlFUdEpRVU5FTEU5QlFVOHNTMEZCU3l4RFFVRkJPMEZCUTJoQ0xFTkJRVU03UVVGRlJDeE5RVUZOTEZWQlFWVXNhMEpCUVd0Q0xFTkJRVU1zUlVGREwwSXNVVUZCVVN4SFFVRkhMRXRCUVVzc1JVRkRhRUlzVTBGQlV5eEhRVUZITEV0QlFVc3NSVUZEYWtJc1ZVRkJWU3hIUVVGSExFdEJRVXNzUlVGRGJFSXNVVUZCVVN4SFFVRkhMRXRCUVVzc1JVRkRhRUlzVlVGQlZTeEhRVUZITEV0QlFVc3NSMEZEUVR0SlFVTnNRaXhKUVVGSkxGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVFN1NVRkZia01zVFVGQlRTeFBRVUZQTEVkQlFXRXNSVUZCUlN4RFFVRkJPMGxCUXpWQ0xFbEJRVWtzVTBGQlV6dFJRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzBsQlF6VkRMRWxCUVVrc1ZVRkJWVHRSUVVGRkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGQk8wbEJRemxETEVsQlFVa3NVVUZCVVR0UlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMGxCUXpGRExFbEJRVWtzVlVGQlZUdFJRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzBsQlF6bERMRTlCUVU4c1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0QlFVTTFRaXhEUVVGREluMD0iLCJpbXBvcnQgeyBjc3NGb3JHYXBzIH0gZnJvbSBcIi4vc3R5bGVzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gc3R5bGVEaXNwbGF5KHByb3BzKSB7XG4gICAgY29uc3QgeyBkaXNwbGF5IH0gPSBwcm9wcztcbiAgICBpZiAoIWRpc3BsYXkpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICBpZiAoZGlzcGxheSA9PT0gXCJmbGV4XCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtZmxleFwiKVxuICAgICAgICByZXR1cm4gc3R5bGVEaXNwbGF5RmxleChwcm9wcyk7XG4gICAgaWYgKGRpc3BsYXkgPT09IFwiZ3JpZFwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWdyaWRcIilcbiAgICAgICAgcmV0dXJuIHN0eWxlRGlzcGxheUdyaWQocHJvcHMpO1xuICAgIHJldHVybiB7IGRpc3BsYXkgfTtcbn1cbmZ1bmN0aW9uIHN0eWxlRGlzcGxheUZsZXgoeyBkaXNwbGF5LCBnYXAsIHJvd0dhcCwgY29sdW1uR2FwLCBqdXN0aWZ5Q29udGVudCwgYWxpZ25JdGVtcywgZmxleERpcmVjdGlvbiwgZmxleFdyYXAsIH0pIHtcbiAgICBjb25zdCBzdHlsZSA9IE9iamVjdC5hc3NpZ24oeyBkaXNwbGF5IH0sIHN0eWxlR2FwKHsgZ2FwLCByb3dHYXAsIGNvbHVtbkdhcCB9KSk7XG4gICAgc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBqdXN0aWZ5Q29udGVudDtcbiAgICBzdHlsZS5hbGlnbkl0ZW1zID0gYWxpZ25JdGVtcztcbiAgICBzdHlsZS5mbGV4V3JhcCA9IGZsZXhXcmFwO1xuICAgIHN0eWxlLmZsZXhEaXJlY3Rpb24gPSBmbGV4RGlyZWN0aW9uO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIHN0eWxlRGlzcGxheUdyaWQoeyBkaXNwbGF5LCBnYXAsIHJvd0dhcCwgY29sdW1uR2FwLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvUm93cywgZ3JpZEF1dG9Db2x1bW5zLCBqdXN0aWZ5Q29udGVudCwgYWxpZ25JdGVtcywgcGxhY2VJdGVtcywgfSkge1xuICAgIGNvbnN0IHN0eWxlID0gT2JqZWN0LmFzc2lnbih7IGRpc3BsYXkgfSwgc3R5bGVHYXAoeyBnYXAsIHJvd0dhcCwgY29sdW1uR2FwIH0pKTtcbiAgICBzdHlsZS5ncmlkVGVtcGxhdGVSb3dzID0gZ3JpZFRlbXBsYXRlUm93cztcbiAgICBzdHlsZS5ncmlkVGVtcGxhdGVDb2x1bW5zID0gZ3JpZFRlbXBsYXRlQ29sdW1ucztcbiAgICBzdHlsZS5ncmlkQXV0b1Jvd3MgPSBncmlkQXV0b1Jvd3M7XG4gICAgc3R5bGUuZ3JpZEF1dG9Db2x1bW5zID0gZ3JpZEF1dG9Db2x1bW5zO1xuICAgIHN0eWxlLmdyaWRBdXRvRmxvdyA9IGdyaWRBdXRvRmxvdztcbiAgICBzdHlsZS5qdXN0aWZ5Q29udGVudCA9IGp1c3RpZnlDb250ZW50O1xuICAgIHN0eWxlLmFsaWduSXRlbXMgPSBhbGlnbkl0ZW1zO1xuICAgIHN0eWxlLnBsYWNlSXRlbXMgPSBwbGFjZUl0ZW1zO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIHN0eWxlR2FwKHsgZ2FwLCBjb2x1bW5HYXAsIHJvd0dhcCwgfSkge1xuICAgIGNvbnN0IHN0eWxlID0ge307XG4gICAgaWYgKGdhcClcbiAgICAgICAgc3R5bGUuZ2FwID0gY3NzRm9yR2FwcyhnYXApO1xuICAgIGlmIChyb3dHYXApXG4gICAgICAgIHN0eWxlLnJvd0dhcCA9IGNzc0ZvckdhcHMocm93R2FwKTtcbiAgICBpZiAoY29sdW1uR2FwKVxuICAgICAgICBzdHlsZS5jb2x1bW5HYXAgPSBjc3NGb3JHYXBzKGNvbHVtbkdhcCk7XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWkdsemNHeGhlUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTkwYUdWdFpTOXpkSGxzWlhNdlpHbHpjR3hoZVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEUxQlFVMHNZVUZCWVN4RFFVRkJPMEZCY1VkNFF5eE5RVUZOTEZWQlFWVXNXVUZCV1N4RFFVRkRMRXRCUVhkQ08wbEJRMnBFTEUxQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVVc1IwRkJSeXhMUVVGTExFTkJRVUU3U1VGRGVrSXNTVUZCU1N4RFFVRkRMRTlCUVU4N1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlFUdEpRVVYyUWl4SlFVRkpMRTlCUVU4c1MwRkJTeXhOUVVGTkxFbEJRVWtzVDBGQlR5eExRVUZMTEdGQlFXRTdVVUZETDBNc1QwRkJUeXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVOc1F5eEpRVUZKTEU5QlFVOHNTMEZCU3l4TlFVRk5MRWxCUVVrc1QwRkJUeXhMUVVGTExHRkJRV0U3VVVGREwwTXNUMEZCVHl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0SlFVTnNReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVRTdRVUZEZEVJc1EwRkJRenRCUVVWRUxGTkJRVk1zWjBKQlFXZENMRU5CUVVNc1JVRkRkRUlzVDBGQlR5eEZRVU5RTEVkQlFVY3NSVUZEU0N4TlFVRk5MRVZCUTA0c1UwRkJVeXhGUVVOVUxHTkJRV01zUlVGRFpDeFZRVUZWTEVWQlExWXNZVUZCWVN4RlFVTmlMRkZCUVZFc1IwRkRXVHRKUVVOd1FpeE5RVUZOTEV0QlFVc3NiVUpCUTFBc1QwRkJUeXhKUVVOS0xGRkJRVkVzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4TlFVRk5MRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGRE1VTXNRMEZCUVR0SlFVTkVMRXRCUVVzc1EwRkJReXhqUVVGakxFZEJRVWNzWTBGQll5eERRVUZCTzBsQlEzSkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZCTzBsQlF6ZENMRXRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZCTzBsQlEzcENMRXRCUVVzc1EwRkJReXhoUVVGaExFZEJRVWNzWVVGQllTeERRVUZCTzBsQlEyNURMRTlCUVU4c1MwRkJTeXhEUVVGQk8wRkJRMmhDTEVOQlFVTTdRVUZGUkN4VFFVRlRMR2RDUVVGblFpeERRVUZETEVWQlEzUkNMRTlCUVU4c1JVRkRVQ3hIUVVGSExFVkJRMGdzVFVGQlRTeEZRVU5PTEZOQlFWTXNSVUZEVkN4blFrRkJaMElzUlVGRGFFSXNiVUpCUVcxQ0xFVkJRMjVDTEZsQlFWa3NSVUZEV2l4WlFVRlpMRVZCUTFvc1pVRkJaU3hGUVVObUxHTkJRV01zUlVGRFpDeFZRVUZWTEVWQlExWXNWVUZCVlN4SFFVTlZPMGxCUTNCQ0xFMUJRVTBzUzBGQlN5eHRRa0ZEVUN4UFFVRlBMRWxCUTBvc1VVRkJVU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVNeFF5eERRVUZCTzBsQlEwUXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeEhRVUZITEdkQ1FVRm5RaXhEUVVGQk8wbEJRM3BETEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eHRRa0ZCYlVJc1EwRkJRVHRKUVVNdlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJRVHRKUVVOcVF5eExRVUZMTEVOQlFVTXNaVUZCWlN4SFFVRkhMR1ZCUVdVc1EwRkJRVHRKUVVOMlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJRVHRKUVVOcVF5eExRVUZMTEVOQlFVTXNZMEZCWXl4SFFVRkhMR05CUVdNc1EwRkJRVHRKUVVOeVF5eExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJRVHRKUVVNM1FpeExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJRVHRKUVVNM1FpeFBRVUZQTEV0QlFVc3NRMEZCUVR0QlFVTm9RaXhEUVVGRE8wRkJSVVFzVTBGQlV5eFJRVUZSTEVOQlFVTXNSVUZEWkN4SFFVRkhMRVZCUTBnc1UwRkJVeXhGUVVOVUxFMUJRVTBzUjBGTFZEdEpRVU5ITEUxQlFVMHNTMEZCU3l4SFFVRjNRaXhGUVVGRkxFTkJRVUU3U1VGRGNrTXNTVUZCU1N4SFFVRkhPMUZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkRjRU1zU1VGQlNTeE5RVUZOTzFGQlFVVXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdTVUZETjBNc1NVRkJTU3hUUVVGVE8xRkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVUU3U1VGRGRFUXNUMEZCVHl4TFFVRkxMRU5CUVVFN1FVRkRhRUlzUTBGQlF5SjkiLCJleHBvcnQgZnVuY3Rpb24gc3R5bGVQb3NpdGlvbih7IHBvc2l0aW9uLCBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20sIHpJbmRleCwgfSkge1xuICAgIHJldHVybiB7IHBvc2l0aW9uLCBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20sIHpJbmRleCB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0c5emFYUnBiMjR1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12ZEdobGJXVXZjM1I1YkdWekwzQnZjMmwwYVc5dUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRWGxDUVN4TlFVRk5MRlZCUVZVc1lVRkJZU3hEUVVGRExFVkJRekZDTEZGQlFWRXNSVUZEVWl4SlFVRkpMRVZCUTBvc1IwRkJSeXhGUVVOSUxFdEJRVXNzUlVGRFRDeE5RVUZOTEVWQlEwNHNUVUZCVFN4SFFVTlhPMGxCUTJwQ0xFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkJPMEZCUTNwRUxFTkJRVU1pZlE9PSIsImltcG9ydCB7IGNzc0ZvckdhcHMgfSBmcm9tIFwiLi9zdHlsZXMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVNwYWNlKHsgYm9yZGVyUmFkaXVzLCBtYXJnaW4sIHBhZGRpbmcgfSkge1xuICAgIGNvbnN0IHN0eWxlID0ge307XG4gICAgaWYgKGJvcmRlclJhZGl1cylcbiAgICAgICAgc3R5bGUuYm9yZGVyUmFkaXVzID0gY3NzRm9yR2Fwcyhib3JkZXJSYWRpdXMpO1xuICAgIGlmIChtYXJnaW4pXG4gICAgICAgIHN0eWxlLm1hcmdpbiA9IGNzc0ZvckdhcHMobWFyZ2luKTtcbiAgICBpZiAocGFkZGluZylcbiAgICAgICAgc3R5bGUucGFkZGluZyA9IGNzc0ZvckdhcHMocGFkZGluZyk7XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzNCaFkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZkR2hsYldVdmMzUjViR1Z6TDNOd1lXTmxMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNUVUZCVFN4aFFVRmhMRU5CUVVFN1FVRlhlRU1zVFVGQlRTeFZRVUZWTEZWQlFWVXNRMEZCUXl4RlFVRkZMRmxCUVZrc1JVRkJSU3hOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZ0UWp0SlFVTjZSU3hOUVVGTkxFdEJRVXNzUjBGQmQwSXNSVUZCUlN4RFFVRkJPMGxCUTNKRExFbEJRVWtzV1VGQldUdFJRVUZGTEV0QlFVc3NRMEZCUXl4WlFVRlpMRWRCUVVjc1ZVRkJWU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlF5OUVMRWxCUVVrc1RVRkJUVHRSUVVGRkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRemRETEVsQlFVa3NUMEZCVHp0UlFVRkZMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMGxCUTJoRUxFOUJRVThzUzBGQlN5eERRVUZCTzBGQlEyaENMRU5CUVVNaWZRPT0iLCJleHBvcnQgZnVuY3Rpb24gY3NzRm9yQ29sb3IobmFtZSwgYWxwaGEgPSAxKSB7XG4gICAgaWYgKGFscGhhIDw9IDApXG4gICAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XG4gICAgaWYgKGFscGhhID49IDEpXG4gICAgICAgIHJldHVybiBgdmFyKC0tdGhlbWUtY29sb3ItJHtuYW1lfSlgO1xuICAgIHJldHVybiBgdmFyKC0tdGhlbWUtY29sb3ItJHtuYW1lfS0ke3RvT3BhY2l0eShhbHBoYSl9KWA7XG59XG5leHBvcnQgZnVuY3Rpb24gY3NzRm9yQ29sb3JPbihuYW1lKSB7XG4gICAgcmV0dXJuIGB2YXIoLS10aGVtZS1jb2xvci1vbi0ke25hbWV9KWA7XG59XG5leHBvcnQgZnVuY3Rpb24gY3NzRm9yR2FwcyhwYXJhbXMsIHVuaXQgPSBcImVtXCIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1zKSlcbiAgICAgICAgcmV0dXJuIGNzc0ZvckdhcChwYXJhbXMsIHVuaXQpO1xuICAgIHJldHVybiBwYXJhbXMubWFwKChpdGVtKSA9PiBjc3NGb3JHYXAoaXRlbSwgdW5pdCkpLmpvaW4oXCIgXCIpO1xufVxuZnVuY3Rpb24gY3NzRm9yR2FwKGl0ZW0sIHVuaXQgPSBcImVtXCIpIHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBgJHtpdGVtfSR7dW5pdH1gO1xuICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgICBjYXNlIFwiWFhTXCI6XG4gICAgICAgIGNhc2UgXCJYU1wiOlxuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICBjYXNlIFwiTFwiOlxuICAgICAgICBjYXNlIFwiWExcIjpcbiAgICAgICAgY2FzZSBcIlhYTFwiOlxuICAgICAgICAgICAgcmV0dXJuIGB2YXIoLS10aGVtZS1nYXAtJHtpdGVtfSlgO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxufVxuZnVuY3Rpb24gdG9PcGFjaXR5KGFscGhhKSB7XG4gICAgY29uc3Qgb3BhY2l0eSA9IE1hdGgucm91bmQoYWxwaGEgKiAxMCk7XG4gICAgaWYgKG9wYWNpdHkgPCAxKVxuICAgICAgICByZXR1cm4gXCIxXCI7XG4gICAgaWYgKG9wYWNpdHkgPiA5KVxuICAgICAgICByZXR1cm4gXCI5XCI7XG4gICAgcmV0dXJuIGAke29wYWNpdHl9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzUjViR1Z6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDNSb1pXMWxMM04wZVd4bGN5OXpkSGxzWlhNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJSVUVzVFVGQlRTeFZRVUZWTEZkQlFWY3NRMEZCUXl4SlFVRnhRaXhGUVVGRkxFdEJRVXNzUjBGQlJ5eERRVUZETzBsQlEzaEVMRWxCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU03VVVGQlJTeFBRVUZQTEdGQlFXRXNRMEZCUVR0SlFVTndReXhKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETzFGQlFVVXNUMEZCVHl4eFFrRkJjVUlzU1VGQlNTeEhRVUZITEVOQlFVRTdTVUZEYmtRc1QwRkJUeXh4UWtGQmNVSXNTVUZCU1N4SlFVRkpMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZCTzBGQlF6TkVMRU5CUVVNN1FVRkZSQ3hOUVVGTkxGVkJRVlVzWVVGQllTeERRVUZETEVsQlFYRkNPMGxCUXk5RExFOUJRVThzZDBKQlFYZENMRWxCUVVrc1IwRkJSeXhEUVVGQk8wRkJRekZETEVOQlFVTTdRVUZGUkN4TlFVRk5MRlZCUVZVc1ZVRkJWU3hEUVVGRExFMUJRWEZDTEVWQlFVVXNTVUZCU1N4SFFVRkhMRWxCUVVrN1NVRkRla1FzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRVVVzVDBGQlR5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGQk8wbEJRekZFTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVOb1JTeERRVUZETzBGQlJVUXNVMEZCVXl4VFFVRlRMRU5CUVVNc1NVRkJjVUlzUlVGQlJTeEpRVUZKTEVkQlFVY3NTVUZCU1R0SlFVTnFSQ3hKUVVGSkxFOUJRVThzU1VGQlNTeExRVUZMTEZGQlFWRTdVVUZCUlN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFbEJRVWtzUlVGQlJTeERRVUZCTzBsQlJYSkVMRkZCUVZFc1NVRkJTU3hGUVVGRkxFTkJRVU03VVVGRFdDeExRVUZMTEV0QlFVc3NRMEZCUXp0UlFVTllMRXRCUVVzc1NVRkJTU3hEUVVGRE8xRkJRMVlzUzBGQlN5eEhRVUZITEVOQlFVTTdVVUZEVkN4TFFVRkxMRWRCUVVjc1EwRkJRenRSUVVOVUxFdEJRVXNzUjBGQlJ5eERRVUZETzFGQlExUXNTMEZCU3l4SlFVRkpMRU5CUVVNN1VVRkRWaXhMUVVGTExFdEJRVXM3V1VGRFRpeFBRVUZQTEcxQ1FVRnRRaXhKUVVGSkxFZEJRVWNzUTBGQlFUdFJRVU55UXp0WlFVTkpMRTlCUVU4c1NVRkJTU3hEUVVGQk8wbEJRMjVDTEVOQlFVTTdRVUZEVEN4RFFVRkRPMEZCUlVRc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQllUdEpRVU0xUWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRVHRKUVVOMFF5eEpRVUZKTEU5QlFVOHNSMEZCUnl4RFFVRkRPMUZCUVVVc1QwRkJUeXhIUVVGSExFTkJRVUU3U1VGRE0wSXNTVUZCU1N4UFFVRlBMRWRCUVVjc1EwRkJRenRSUVVGRkxFOUJRVThzUjBGQlJ5eERRVUZCTzBsQlF6TkNMRTlCUVU4c1IwRkJSeXhQUVVGUExFVkJRVVVzUTBGQlFUdEJRVU4yUWl4RFFVRkRJbjA9IiwiY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbmNhbnZhcy53aWR0aCA9IDE7XG5jYW52YXMuaGVpZ2h0ID0gMTtcbmNsYXNzIENvbG9yIHtcbiAgICBzdGF0aWMgZ2V0IGN0eCgpIHtcbiAgICAgICAgaWYgKCFDb2xvci5fY3R4KSB7XG4gICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gMTtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSAxO1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiW0NvbG9yXSBVbmFibGUgdG8gY3JlYXRlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCFcIik7XG4gICAgICAgICAgICBDb2xvci5fY3R4ID0gY3R4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDb2xvci5fY3R4O1xuICAgIH1cbiAgICBzdGF0aWMgbWFrZUdyYWRpZW50KHNpemUsIC4uLmZyb20pIHtcbiAgICAgICAgY29uc3QgY29sb3JzID0gW107XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IDEgLyAoc2l6ZSAtIDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgY29sb3JzLnB1c2goQ29sb3IubWl4KGkgKiBmYWN0b3IsIC4uLmZyb20pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSB2YWx1ZSBmcm9tIGEgY29sb3JyYW1wIG1hZGUgb2YgYGZyb21gIGNvbG9ycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmcm9tIENvbG9yc1xuICAgICAqIEBwYXJhbSB2YWx1ZSBGcm9tIDAuMCB0byAxLjBcbiAgICAgKi9cbiAgICBzdGF0aWMgbWl4KHZhbHVlLCAuLi5mcm9tKSB7XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IGZyb20ubWFwKChzb3VyY2UpID0+IG5ldyBDb2xvcihzb3VyY2UpKTtcbiAgICAgICAgY29uc3Qgc3RlcHMgPSBpbnB1dHMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKHN0ZXBzIDwgMClcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IoXCIjMDAwXCIpO1xuICAgICAgICBpZiAoc3RlcHMgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gaW5wdXRzWzBdO1xuICAgICAgICBjb25zdCBzdGFydCA9IE1hdGgubWluKE1hdGguZmxvb3IodmFsdWUgKiBzdGVwcyksIHN0ZXBzIC0gMSk7XG4gICAgICAgIGNvbnN0IGNvbG9yQSA9IGlucHV0c1tzdGFydCArIDFdO1xuICAgICAgICBjb25zdCBjb2xvckIgPSBpbnB1dHNbc3RhcnRdO1xuICAgICAgICBjb25zdCBhID0gc3RlcHMgKiAodmFsdWUgLSBzdGFydCAvIHN0ZXBzKTtcbiAgICAgICAgY29uc3QgYiA9IDEgLSBhO1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yKGBjb2xvci1taXgoaW4gbGNoLCAke2NvbG9yQS50b1N0cmluZygpfSwgJHtjb2xvckIudG9TdHJpbmcoKX0gJHsxMDAgKiBifSUpYCk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0xpZ2h0KGNvbG9yU291cmNlKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKGNvbG9yU291cmNlKTtcbiAgICAgICAgcmV0dXJuIGNvbG9yLmlzTGlnaHQoKTtcbiAgICB9XG4gICAgc3RhdGljIGlzRGFyayhjb2xvclNvdXJjZSkge1xuICAgICAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcihjb2xvclNvdXJjZSk7XG4gICAgICAgIHJldHVybiBjb2xvci5pc0RhcmsoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29sb3JTb3VyY2UpIHtcbiAgICAgICAgdGhpcy5SID0gMDtcbiAgICAgICAgdGhpcy5HID0gMDtcbiAgICAgICAgdGhpcy5CID0gMDtcbiAgICAgICAgdGhpcy5BID0gMDtcbiAgICAgICAgdGhpcy5mcm9tKGNvbG9yU291cmNlKTtcbiAgICB9XG4gICAgZnJvbShjb2xvclNvdXJjZSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbG9yU291cmNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSBDb2xvci5jdHg7XG4gICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yU291cmNlO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgY29uc3QgaW1nID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IFtyLCBnLCBiLCBhXSA9IGltZy5kYXRhO1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gMSAvIDI1NTtcbiAgICAgICAgICAgIHRoaXMuUiA9IHIgKiBmYWN0b3I7XG4gICAgICAgICAgICB0aGlzLkcgPSBnICogZmFjdG9yO1xuICAgICAgICAgICAgdGhpcy5CID0gYiAqIGZhY3RvcjtcbiAgICAgICAgICAgIHRoaXMuQSA9IGEgKiBmYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLlIgPSBjb2xvclNvdXJjZS5SO1xuICAgICAgICAgICAgdGhpcy5HID0gY29sb3JTb3VyY2UuRztcbiAgICAgICAgICAgIHRoaXMuQiA9IGNvbG9yU291cmNlLkI7XG4gICAgICAgICAgICB0aGlzLkEgPSBjb2xvclNvdXJjZS5BO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgYyA9ICh2YWx1ZSkgPT4gTWF0aC5mbG9vcigyNTUgKiB2YWx1ZSlcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgICAgIHJldHVybiBgIyR7Yyh0aGlzLlIpfSR7Yyh0aGlzLkcpfSR7Yyh0aGlzLkIpfSR7Yyh0aGlzLkEpfWA7XG4gICAgfVxuICAgIGdldCBsdW1pbmFuY2UoKSB7XG4gICAgICAgIHJldHVybiAoMC4yMTI2ICogdGhpcy5zUmdiVG9MaW5lYXIodGhpcy5SKSArXG4gICAgICAgICAgICAwLjcxNTIgKiB0aGlzLnNSZ2JUb0xpbmVhcih0aGlzLkcpICtcbiAgICAgICAgICAgIDAuMDcyMiAqIHRoaXMuc1JnYlRvTGluZWFyKHRoaXMuQikpO1xuICAgIH1cbiAgICBnZXQgcGVyY2VpdmVkTGlnaHRuZXNzKCkge1xuICAgICAgICBjb25zdCBZID0gdGhpcy5sdW1pbmFuY2U7XG4gICAgICAgIHJldHVybiAoKFkgPD0gMjE2IC8gMjQzODlcbiAgICAgICAgICAgID8gWSAqICgyNDM4OSAvIDI3KVxuICAgICAgICAgICAgOiBNYXRoLnBvdyhZLCAxIC8gMykgKiAxMTYgLSAxNikgKiAxZS0yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGdhbW1hIGZyb20gc1JHQiBjb21wb25lbnQuXG4gICAgICovXG4gICAgc1JnYlRvTGluZWFyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAuMDQwNDVcbiAgICAgICAgICAgID8gdmFsdWUgLyAxMi45MlxuICAgICAgICAgICAgOiBNYXRoLnBvdygodmFsdWUgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICB9XG4gICAgaXNMaWdodCgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRGFyaygpO1xuICAgIH1cbiAgICBpc0RhcmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcmNlaXZlZExpZ2h0bmVzcyA8IDAuNTtcbiAgICB9XG59XG5Db2xvci5fY3R4ID0gbnVsbDtcbmV4cG9ydCBkZWZhdWx0IENvbG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5c2IzSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12WTI5c2IzSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1RVRkJUU3hOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRCUVVNdlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVOb1FpeE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVWcVFpeE5RVUZ4UWl4TFFVRkxPMGxCUjJRc1RVRkJUU3hMUVVGTExFZEJRVWM3VVVGRGJFSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5rTEUxQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdXVUZETDBNc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVRTdXVUZEYUVJc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVRTdXVUZEYWtJc1RVRkJUU3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRaUVVOdVF5eEpRVUZKTEVOQlFVTXNSMEZCUnp0blFrRkRTaXhOUVVGTkxFdEJRVXNzUTBGRFVDeHZSRUZCYjBRc1EwRkRka1FzUTBGQlFUdFpRVVZNTEV0QlFVc3NRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGQk8xRkJRM0JDTEVOQlFVTTdVVUZEUkN4UFFVRlBMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVUU3U1VGRGNrSXNRMEZCUXp0SlFVVkVMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQldTeEZRVUZGTEVkQlFVY3NTVUZCTWtJN1VVRkROVVFzVFVGQlRTeE5RVUZOTEVkQlFWa3NSVUZCUlN4RFFVRkJPMUZCUXpGQ0xFMUJRVTBzVFVGQlRTeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU0zUWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRE5VSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlF5OURMRU5CUVVNN1VVRkRSQ3hQUVVGUExFMUJRVTBzUTBGQlFUdEpRVU5xUWl4RFFVRkRPMGxCUlVRN096czdPMDlCUzBjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFXRXNSVUZCUlN4SFFVRkhMRWxCUVRKQ08xRkJRM0JFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZEZEVRc1RVRkJUU3hMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVFN1VVRkRMMElzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXp0WlFVRkZMRTlCUVU4c1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdVVUZEZGtNc1NVRkJTU3hMUVVGTExFdEJRVXNzUTBGQlF6dFpRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJSV3BETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFVkJRVVVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUXpWRUxFMUJRVTBzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRGFFTXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzFGQlF6VkNMRTFCUVUwc1EwRkJReXhIUVVGSExFdEJRVXNzUjBGQlJ5eERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVUU3VVVGRGVrTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdFJRVU5tTEU5QlFVOHNTVUZCU1N4TFFVRkxMRU5CUTFvc2NVSkJRWEZDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlEzaEVMRWRCUVVjc1IwRkJSeXhEUVVOV0xFbEJRVWtzUTBGRFVDeERRVUZCTzBsQlEwd3NRMEZCUXp0SlFVVkVMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQk1rSTdVVUZEZEVNc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1VVRkRjRU1zVDBGQlR5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVFN1NVRkRNVUlzUTBGQlF6dEpRVVZFTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJNa0k3VVVGRGNrTXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdVVUZEY0VNc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVRTdTVUZEZWtJc1EwRkJRenRKUVU5RUxGbEJRVmtzVjBGQk1rSTdVVUZNYUVNc1RVRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdFJRVU5NTEUxQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1VVRkRUQ3hOUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzFGQlEwd3NUVUZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVkU0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1NVRkRNVUlzUTBGQlF6dEpRVVZFTEVsQlFVa3NRMEZCUXl4WFFVRXlRanRSUVVNMVFpeEpRVUZKTEU5QlFVOHNWMEZCVnl4TFFVRkxMRkZCUVZFc1JVRkJSU3hEUVVGRE8xbEJRMnhETEUxQlFVMHNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVUU3V1VGRGNrSXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRaUVVONlFpeEhRVUZITEVOQlFVTXNVMEZCVXl4SFFVRkhMRmRCUVZjc1EwRkJRVHRaUVVNelFpeEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUTNoQ0xFMUJRVTBzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1dVRkRlRU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVFN1dVRkROMElzVFVGQlRTeE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJRVHRaUVVOMFFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVUU3V1VGRGJrSXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZCTzFsQlEyNUNMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUVR0WlFVTnVRaXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVFN1VVRkRka0lzUTBGQlF6dGhRVUZOTEVOQlFVTTdXVUZEU2l4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVRTdXVUZEZEVJc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUTNSQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRVHRaUVVOMFFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRE1VSXNRMEZCUXp0UlFVTkVMRTlCUVU4c1NVRkJTU3hEUVVGQk8wbEJRMllzUTBGQlF6dEpRVVZFTEZGQlFWRTdVVUZEU2l4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRV0VzUlVGQlJTeEZRVUZGTEVOQlEzaENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXp0aFFVTnNRaXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETzJGQlExb3NVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlFUdFJRVU42UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGQk8wbEJRemxFTEVOQlFVTTdTVUZGUkN4SlFVRkpMRk5CUVZNN1VVRkRWQ3hQUVVGUExFTkJRMGdzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5zUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJ4RExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRGNrTXNRMEZCUVR0SlFVTk1MRU5CUVVNN1NVRkZSQ3hKUVVGSkxHdENRVUZyUWp0UlFVTnNRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkJPMUZCUTNoQ0xFOUJRVThzUTBGRFNDeERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1MwRkJTenRaUVVOaUxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRMnhDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZET1VNc1EwRkJRVHRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmxCUVZrc1EwRkJReXhMUVVGaE8xRkJRM1JDTEU5QlFVOHNTMEZCU3l4SFFVRkhMRTlCUVU4N1dVRkRiRUlzUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxPMWxCUTJZc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUTJoRUxFTkJRVU03U1VGRlJDeFBRVUZQTzFGQlEwZ3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlFUdEpRVU42UWl4RFFVRkRPMGxCUlVRc1RVRkJUVHRSUVVOR0xFOUJRVThzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFZEJRVWNzUTBGQlFUdEpRVU40UXl4RFFVRkRPenRCUVhCSll5eFZRVUZKTEVkQlFXOURMRWxCUVVrc1FVRkJlRU1zUTBGQmQwTTdaVUZFTVVNc1MwRkJTeUo5IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vdGhlbWUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL3RoZW1lLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBDb2xvciBmcm9tIFwiLi4vY29sb3IuanNcIjtcbmltcG9ydCBDbGFzc05hbWVzIGZyb20gXCIuL2NsYXNzLW5hbWVzLmpzXCI7XG5pbXBvcnQgXCIuL3RoZW1lLmNzc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3R5bGVzL2NvbW1vbi5qc1wiO1xuY29uc3QgREVGQVVMVF9DT0xPUl9URVhUX0xJR0hUID0gXCIjZmZmZVwiO1xuY29uc3QgREVGQVVMVF9DT0xPUl9URVhUX0RBUksgPSBcIiMwMDBlXCI7XG5jb25zdCBERUZBVUxUX0NPTE9SX1BSSU1BUlkgPSBcImhzbCgyMTUgODAlIDUwJSlcIjtcbmNvbnN0IERFRkFVTFRfQ09MT1JfU0VDT05EQVJZID0gXCJoc2woNjAgODAlIDUwJSlcIjtcbmNvbnN0IERFRkFVTFRfQ09MT1JfVEVSVElBUlkgPSBcImhzbCgxMDAgODAlIDUwJSlcIjtcbmNvbnN0IERFRkFVTFRfQ09MT1JfTkVVVFJBTCA9IFtcImhzbCgwIDAlIDUwJSlcIiwgXCJoc2woMCAwJSAxMDAlKVwiXTtcbmNvbnN0IERFRkFVTFRfQ09MT1JfSU5QVVQgPSBcIiNmZmZcIjtcbmNvbnN0IERFRkFVTFRfQ09MT1JfRVJST1IgPSBcIiNkMDBcIjtcbmNvbnN0IERFRkFVTFRfQ09MT1JfVkFMSUQgPSBcIiMwZjBcIjtcbmNsYXNzIFRoZW1lIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rLCBfbDtcbiAgICAgICAgdGhpcy52YXJzID0gW107XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IChfYSA9IG9wdGlvbnMuY29sb3JzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICAgICAgY29uc3QgZ2FwID0gKF9iID0gb3B0aW9ucy5nYXApICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHtcbiAgICAgICAgICAgIFhTOiBcIi4yNXJlbVwiLFxuICAgICAgICAgICAgUzogXCIuNXJlbVwiLFxuICAgICAgICAgICAgTTogXCIxcmVtXCIsXG4gICAgICAgICAgICBMOiBcIjJyZW1cIixcbiAgICAgICAgICAgIFhMOiBcIjRyZW1cIixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGQoXCJnYXAtbm9uZVwiLCBcIjBcIik7XG4gICAgICAgIHRoaXMuYWRkKFwiZ2FwLVhTXCIsIGdhcC5YUyk7XG4gICAgICAgIHRoaXMuYWRkKFwiZ2FwLVNcIiwgZ2FwLlMpO1xuICAgICAgICB0aGlzLmFkZChcImdhcC1NXCIsIGdhcC5NKTtcbiAgICAgICAgdGhpcy5hZGQoXCJnYXAtTFwiLCBnYXAuTCk7XG4gICAgICAgIHRoaXMuYWRkKFwiZ2FwLVhMXCIsIGdhcC5YTCk7XG4gICAgICAgIHRoaXMuYWRkKFwiY29sb3ItdGV4dC1saWdodFwiLCAoX2MgPSBjb2xvcnMudGV4dExpZ2h0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBERUZBVUxUX0NPTE9SX1RFWFRfTElHSFQpO1xuICAgICAgICB0aGlzLmFkZChcImNvbG9yLXRleHQtZGFya1wiLCAoX2QgPSBjb2xvcnMudGV4dERhcmspICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IERFRkFVTFRfQ09MT1JfVEVYVF9EQVJLKTtcbiAgICAgICAgdGhpcy5hZGRDb2xvcihcImlucHV0XCIsIChfZSA9IGNvbG9ycy5pbnB1dCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogREVGQVVMVF9DT0xPUl9JTlBVVCk7XG4gICAgICAgIHRoaXMuYWRkQ29sb3IoXCJlcnJvclwiLCAoX2YgPSBjb2xvcnMuZXJyb3IpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IERFRkFVTFRfQ09MT1JfRVJST1IpO1xuICAgICAgICB0aGlzLmFkZENvbG9yKFwidmFsaWRcIiwgKF9nID0gY29sb3JzLnZhbGlkKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBERUZBVUxUX0NPTE9SX1ZBTElEKTtcbiAgICAgICAgdGhpcy5hZGRDb2xvclZhcnMoXCJwcmltYXJ5XCIsIG1ha2VDb2xvcnMoKF9oID0gY29sb3JzLnByaW1hcnkpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IERFRkFVTFRfQ09MT1JfUFJJTUFSWSkpO1xuICAgICAgICB0aGlzLmFkZENvbG9yVmFycyhcInNlY29uZGFyeVwiLCBtYWtlQ29sb3JzKChfaiA9IGNvbG9ycy5zZWNvbmRhcnkpICE9PSBudWxsICYmIF9qICE9PSB2b2lkIDAgPyBfaiA6IERFRkFVTFRfQ09MT1JfU0VDT05EQVJZKSk7XG4gICAgICAgIHRoaXMuYWRkQ29sb3JWYXJzKFwidGVydGlhcnlcIiwgbWFrZUNvbG9ycygoX2sgPSBjb2xvcnMudGVydGlhcnkpICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6IERFRkFVTFRfQ09MT1JfVEVSVElBUlkpKTtcbiAgICAgICAgdGhpcy5hZGRDb2xvclZhcnMoXCJuZXV0cmFsXCIsIG1ha2VDb2xvcnMoKF9sID0gY29sb3JzLm5ldXRyYWwpICE9PSBudWxsICYmIF9sICE9PSB2b2lkIDAgPyBfbCA6IERFRkFVTFRfQ09MT1JfTkVVVFJBTCkpO1xuICAgICAgICBmb3IgKGxldCBzaGFkb3cgPSAwOyBzaGFkb3cgPCAxMDsgc2hhZG93KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBzaGFkb3c7XG4gICAgICAgICAgICB0aGlzLmFkZChgc2hhZG93LSR7c2hhZG93fWAsIGAwICR7eX1weCAke3kgKiAyfXB4ICMwMDBlYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgbmV3IENTUyBjdXN0b20gdmFyaWFibGUuXG4gICAgICovXG4gICAgYWRkKG5hbWUsIHZhbHVlLCBhbHBoYSA9IDEpIHtcbiAgICAgICAgbGV0IGNvbG9yID0gdmFsdWU7XG4gICAgICAgIGlmIChhbHBoYSA8PSAwKVxuICAgICAgICAgICAgY29sb3IgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIGVsc2UgaWYgKGFscGhhIDwgMSkge1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gbmV3IENvbG9yKHZhbHVlKTtcbiAgICAgICAgICAgIG9iai5BID0gYWxwaGE7XG4gICAgICAgICAgICBjb2xvciA9IG9iai50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFycy5wdXNoKFtuYW1lLCBjb2xvcl0pO1xuICAgIH1cbiAgICBhZGRDb2xvcihuYW1lLCBjb2xvcikge1xuICAgICAgICB0aGlzLmFkZChgY29sb3ItJHtuYW1lfWAsIGNvbG9yKTtcbiAgICAgICAgdGhpcy5hZGQoYGNvbG9yLW9uLSR7bmFtZX1gLCBgdmFyKC0tdGhlbWUtY29sb3ItdGV4dC0ke0NvbG9yLmlzTGlnaHQoY29sb3IpID8gYGRhcmtgIDogXCJsaWdodFwifSlgKTtcbiAgICB9XG4gICAgYWRkQ29sb3JWYXJzKG5hbWUsIGNvbG9ycykge1xuICAgICAgICBsZXQgaW5kZXggPSAxO1xuICAgICAgICBmb3IgKGNvbnN0IGNvbG9yIG9mIGNvbG9ycykge1xuICAgICAgICAgICAgdGhpcy5hZGQoYGNvbG9yLSR7bmFtZX0tJHtpbmRleH1gLCBjb2xvcik7XG4gICAgICAgICAgICBmb3IgKGxldCBhbHBoYSA9IDE7IGFscGhhIDwgMTA7IGFscGhhKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChgY29sb3ItJHtuYW1lfS0ke2luZGV4fS0ke2FscGhhfWAsIGNvbG9yLCBhbHBoYSAvIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkKGBjb2xvci1vbi0ke25hbWV9LSR7aW5kZXh9YCwgYHZhcigtLXRoZW1lLWNvbG9yLXRleHQtJHtDb2xvci5pc0xpZ2h0KGNvbG9yKSA/IFwiZGFya1wiIDogXCJsaWdodFwifSlgKTtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGQoYGNvbG9yLSR7bmFtZX1gLCBgdmFyKC0tdGhlbWUtY29sb3ItJHtuYW1lfS01KWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGlzIHRoZW1lIHRvIGBlbGVtZW50YC5cbiAgICAgKiBAcGFyYW0gZWxlbWVudCBEZWZhdWx0IHRvIGBkb2N1bWVudC5ib2R5YC5cbiAgICAgKi9cbiAgICBhcHBseShlbGVtZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZWxlbWVudCAhPT0gbnVsbCAmJiBlbGVtZW50ICE9PSB2b2lkIDAgPyBlbGVtZW50IDogKF9hID0gZ2xvYmFsVGhpcy53aW5kb3cpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kb2N1bWVudC5ib2R5O1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgdGhpcy52YXJzKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KGAtLXRoZW1lLSR7a2V5fWAsIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5UaGVtZS5jbGFzc05hbWVzID0gbmV3IENsYXNzTmFtZXMoKTtcbmV4cG9ydCBkZWZhdWx0IFRoZW1lO1xuZnVuY3Rpb24gbWFrZUNvbG9ycyhjb2xvckRlZikge1xuICAgIGNvbnN0IGNvbG9ycyA9IEFycmF5LmlzQXJyYXkoY29sb3JEZWYpXG4gICAgICAgID8gY29sb3JEZWZcbiAgICAgICAgOiBbY29sb3JEZWZdO1xuICAgIGlmIChjb2xvcnMubGVuZ3RoID09PSAwKVxuICAgICAgICBjb2xvcnMucHVzaChcIiNmZmZcIik7XG4gICAgaWYgKGNvbG9ycy5sZW5ndGggPT09IDEpXG4gICAgICAgIGV4cGFuZENvbG9yUmFuZ2UoY29sb3JzKTtcbiAgICBjb25zdCBvdXRwdXQgPSBDb2xvci5tYWtlR3JhZGllbnQoOSwgLi4uY29sb3JzKS5tYXAoKGNvbG9yKSA9PiBjb2xvci50b1N0cmluZygpKTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZnVuY3Rpb24gZXhwYW5kQ29sb3JSYW5nZShjb2xvcnMpIHtcbiAgICBjb25zdCBbY29sb3JdID0gY29sb3JzO1xuICAgIGNvbnN0IGRhcmsgPSBuZXcgQ29sb3IoY29sb3IpO1xuICAgIGNvbnN0IGxpZ2h0ID0gbmV3IENvbG9yKGNvbG9yKTtcbiAgICBjb25zdCBsZXZlbEQgPSAwLjM7XG4gICAgY29uc3QgbGV2ZWxMID0gMC4yO1xuICAgIGRhcmsuUiAqPSBsZXZlbEQ7XG4gICAgZGFyay5HICo9IGxldmVsRDtcbiAgICBkYXJrLkIgKj0gbGV2ZWxEO1xuICAgIGxpZ2h0LlIgPSAxIC0gbGV2ZWxMICogKDEgLSBsaWdodC5SKTtcbiAgICBsaWdodC5HID0gMSAtIGxldmVsTCAqICgxIC0gbGlnaHQuRyk7XG4gICAgbGlnaHQuQiA9IDEgLSBsZXZlbEwgKiAoMSAtIGxpZ2h0LkIpO1xuICAgIGNvbG9ycy51bnNoaWZ0KGRhcmspO1xuICAgIGNvbG9ycy5wdXNoKGxpZ2h0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHaGxiV1V1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZkR2hsYldVdmRHaGxiV1V1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUMEZCVHl4TFFVRkxMRTFCUVUwc1lVRkJZU3hEUVVGQk8wRkJSUzlDTEU5QlFVOHNWVUZCVlN4TlFVRk5MR3RDUVVGclFpeERRVUZCTzBGQlEzcERMRTlCUVU4c1lVRkJZU3hEUVVGQk8wRkJSWEJDTEdOQlFXTXNiMEpCUVc5Q0xFTkJRVUU3UVVGRmJFTXNUVUZCVFN4M1FrRkJkMElzUjBGQlJ5eFBRVUZQTEVOQlFVRTdRVUZEZUVNc1RVRkJUU3gxUWtGQmRVSXNSMEZCUnl4UFFVRlBMRU5CUVVFN1FVRkRka01zVFVGQlRTeHhRa0ZCY1VJc1IwRkJaU3hyUWtGQmEwSXNRMEZCUVR0QlFVTTFSQ3hOUVVGTkxIVkNRVUYxUWl4SFFVRmxMR2xDUVVGcFFpeERRVUZCTzBGQlF6ZEVMRTFCUVUwc2MwSkJRWE5DTEVkQlFXVXNhMEpCUVd0Q0xFTkJRVUU3UVVGRE4wUXNUVUZCVFN4eFFrRkJjVUlzUjBGQlpTeERRVUZETEdWQlFXVXNSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZCTzBGQlF6ZEZMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NUVUZCVFN4RFFVRkJPMEZCUTJ4RExFMUJRVTBzYlVKQlFXMUNMRWRCUVVjc1RVRkJUU3hEUVVGQk8wRkJRMnhETEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzVFVGQlRTeERRVUZCTzBGQlJXeERMRTFCUVhGQ0xFdEJRVXM3U1VGTGRFSXNXVUZCV1N4VlFVRjVRaXhGUVVGRk96dFJRVVowUWl4VFFVRkpMRWRCUVhsRExFVkJRVVVzUTBGQlFUdFJRVWMxUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGQkxFOUJRVThzUTBGQlF5eE5RVUZOTEcxRFFVRkpMRVZCUVVVc1EwRkJRVHRSUVVOdVF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4TlFVRkJMRTlCUVU4c1EwRkJReXhIUVVGSExHMURRVUZKTzFsQlEzWkNMRVZCUVVVc1JVRkJSU3hSUVVGUk8xbEJRMW9zUTBGQlF5eEZRVUZGTEU5QlFVODdXVUZEVml4RFFVRkRMRVZCUVVVc1RVRkJUVHRaUVVOVUxFTkJRVU1zUlVGQlJTeE5RVUZOTzFsQlExUXNSVUZCUlN4RlFVRkZMRTFCUVUwN1UwRkRZaXhEUVVGQk8xRkJRMFFzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVUU3VVVGRGVrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkJPMUZCUXpGQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU40UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRlRUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEzaENMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRVHRSUVVNeFFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVTktMR3RDUVVGclFpeEZRVU5zUWl4TlFVRkJMRTFCUVUwc1EwRkJReXhUUVVGVExHMURRVUZKTEhkQ1FVRjNRaXhEUVVNdlF5eERRVUZCTzFGQlEwUXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4TlFVRkJMRTFCUVUwc1EwRkJReXhSUVVGUkxHMURRVUZKTEhWQ1FVRjFRaXhEUVVGRExFTkJRVUU3VVVGRGRrVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlFTeE5RVUZOTEVOQlFVTXNTMEZCU3l4dFEwRkJTU3h0UWtGQmJVSXNRMEZCUXl4RFFVRkJPMUZCUXpORUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVVFc1RVRkJUU3hEUVVGRExFdEJRVXNzYlVOQlFVa3NiVUpCUVcxQ0xFTkJRVU1zUTBGQlFUdFJRVU16UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZCTEUxQlFVMHNRMEZCUXl4TFFVRkxMRzFEUVVGSkxHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1VVRkRNMFFzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZEWWl4VFFVRlRMRVZCUTFRc1ZVRkJWU3hEUVVGRExFMUJRVUVzVFVGQlRTeERRVUZETEU5QlFVOHNiVU5CUVVrc2NVSkJRWEZDTEVOQlFVTXNRMEZEZEVRc1EwRkJRVHRSUVVORUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlEySXNWMEZCVnl4RlFVTllMRlZCUVZVc1EwRkJReXhOUVVGQkxFMUJRVTBzUTBGQlF5eFRRVUZUTEcxRFFVRkpMSFZDUVVGMVFpeERRVUZETEVOQlF6RkVMRU5CUVVFN1VVRkRSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVU5pTEZWQlFWVXNSVUZEVml4VlFVRlZMRU5CUVVNc1RVRkJRU3hOUVVGTkxFTkJRVU1zVVVGQlVTeHRRMEZCU1N4elFrRkJjMElzUTBGQlF5eERRVU40UkN4RFFVRkJPMUZCUTBRc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGRFlpeFRRVUZUTEVWQlExUXNWVUZCVlN4RFFVRkRMRTFCUVVFc1RVRkJUU3hEUVVGRExFOUJRVThzYlVOQlFVa3NjVUpCUVhGQ0xFTkJRVU1zUTBGRGRFUXNRMEZCUVR0UlFVTkVMRXRCUVVzc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTEUxQlFVMHNSMEZCUnl4RlFVRkZMRVZCUVVVc1RVRkJUU3hGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU42UXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVUU3V1VGRGFFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFMUJRVTBzUlVGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzFGQlF6ZEVMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU3l4SFFVRkhMRU5CUVVNc1NVRkJXU3hGUVVGRkxFdEJRV0VzUlVGQlJTeExRVUZMTEVkQlFVY3NRMEZCUXp0UlFVTTVReXhKUVVGSkxFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVRTdVVUZEYWtJc1NVRkJTU3hMUVVGTExFbEJRVWtzUTBGQlF6dFpRVUZGTEV0QlFVc3NSMEZCUnl4aFFVRmhMRU5CUVVFN1lVRkRhRU1zU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkRha0lzVFVGQlRTeEhRVUZITEVkQlFVY3NTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3V1VGRE5VSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVUU3V1VGRFlpeExRVUZMTEVkQlFVY3NSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGQk8xRkJRekZDTEVOQlFVTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRMnBETEVOQlFVTTdTVUZGVHl4UlFVRlJMRU5CUVVNc1NVRkJXU3hGUVVGRkxFdEJRV0U3VVVGRGVFTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFbEJRVWtzUlVGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkJPMUZCUTJoRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlEwb3NXVUZCV1N4SlFVRkpMRVZCUVVVc1JVRkRiRUlzTUVKQlFUQkNMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlEzWkZMRU5CUVVFN1NVRkRUQ3hEUVVGRE8wbEJSVThzV1VGQldTeERRVUZETEVsQlFWa3NSVUZCUlN4TlFVRm5RanRSUVVNdlF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVFN1VVRkRZaXhMUVVGTExFMUJRVTBzUzBGQlN5eEpRVUZKTEUxQlFVMHNSVUZCUlN4RFFVRkRPMWxCUTNwQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4SlFVRkpMRWxCUVVrc1MwRkJTeXhGUVVGRkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVRTdXVUZEZWtNc1MwRkJTeXhKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4SFFVRkhMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETzJkQ1FVTjBReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNTVUZCU1N4SlFVRkpMRXRCUVVzc1NVRkJTU3hMUVVGTExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGQk8xbEJRMnhGTEVOQlFVTTdXVUZEUkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVOS0xGbEJRVmtzU1VGQlNTeEpRVUZKTEV0QlFVc3NSVUZCUlN4RlFVTXpRaXd3UWtGRFNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUTNCRExFZEJRVWNzUTBGRFRpeERRVUZCTzFsQlEwUXNTMEZCU3l4RlFVRkZMRU5CUVVFN1VVRkRXQ3hEUVVGRE8xRkJRMFFzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRWxCUVVrc1JVRkJSU3hGUVVGRkxIRkNRVUZ4UWl4SlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGQk8wbEJRemRFTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeExRVUZMTEVOQlFVTXNUMEZCYTBNN08xRkJRM0JETEUxQlFVMHNUVUZCVFN4SFFVRkhMRTlCUVU4c1lVRkJVQ3hQUVVGUExHTkJRVkFzVDBGQlR5eEhRVUZKTEUxQlFVRXNWVUZCVlN4RFFVRkRMRTFCUVUwc01FTkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUVR0UlFVTXhSQ3hKUVVGSkxFMUJRVTBzUlVGQlJTeERRVUZETzFsQlExUXNTMEZCU3l4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRuUWtGRGFrTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRVHRaUVVOdVJDeERRVUZETzFGQlEwd3NRMEZCUXp0SlFVTk1MRU5CUVVNN08wRkJjRWR6UWl4blFrRkJWU3hIUVVGSExFbEJRVWtzVlVGQlZTeEZRVUZGTEVGQlFXNUNMRU5CUVcxQ08yVkJSRzVETEV0QlFVczdRVUYzUnpGQ0xGTkJRVk1zVlVGQlZTeERRVUZETEZGQlFXOUNPMGxCUTNCRExFMUJRVTBzVFVGQlRTeEhRVUYxUWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU4wUkN4RFFVRkRMRU5CUVVNc1VVRkJVVHRSUVVOV0xFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMGxCUTJoQ0xFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRPMUZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUVR0SlFVTTFReXhKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXp0UlFVRkZMR2RDUVVGblFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUTJwRUxFMUJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGRE1VUXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVOdVFpeERRVUZCTzBsQlEwUXNUMEZCVHl4TlFVRk5MRU5CUVVFN1FVRkRha0lzUTBGQlF6dEJRVVZFTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQk1FSTdTVUZEYUVRc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUVR0SlFVTjBRaXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVNM1FpeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU01UWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRVUU3U1VGRGJFSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGQk8wbEJRMnhDTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGQk8wbEJRMmhDTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGQk8wbEJRMmhDTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGQk8wbEJRMmhDTEV0QlFVc3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRGNFTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU53UXl4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzQkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRTdTVUZEY0VJc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0QlFVTjBRaXhEUVVGREluMD0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDbGFzc05hbWVzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zaWduYXR1cmUgPSBgJHtEYXRlLm5vdygpLnRvU3RyaW5nKDM2KX0tVGhlbWUtYDtcbiAgICAgICAgdGhpcy5jb2xvclByaW1hcnkgPSAobGV2ZWwgPSA1KSA9PiB0aGlzLmNscyhgY29sb3ItcHJpbWFyeS0ke2xldmVsfWApO1xuICAgICAgICB0aGlzLmNvbG9yU2Vjb25kYXJ5ID0gKGxldmVsID0gNSkgPT4gdGhpcy5jbHMoYGNvbG9yLXNlY29uZGFyeS0ke2xldmVsfWApO1xuICAgICAgICB0aGlzLmNvbG9yVGVydGlhcnkgPSAobGV2ZWwgPSA1KSA9PiB0aGlzLmNscyhgY29sb3ItdGVydGlhcnktJHtsZXZlbH1gKTtcbiAgICAgICAgdGhpcy5jb2xvck5ldXRyYWwgPSAobGV2ZWwgPSA1KSA9PiB0aGlzLmNscyhgY29sb3ItbmV1dHJhbC0ke2xldmVsfWApO1xuICAgICAgICB0aGlzLmluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmhlYWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmluaXQsIDIwMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBbXG4gICAgICAgICAgICAgICAgYC4ke3RoaXMuY2xzKFwiZGlzcGxheS1mbGV4XCIpfSB7IGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiB2YXIoLS10aGVtZS1nYXAtUyk7IH1gLFxuICAgICAgICAgICAgICAgIGAuJHt0aGlzLmNscyhcImRpc3BsYXktaW5saW5lLWZsZXhcIil9IHsgZGlzcGxheTogaW5saW5lLWZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiB2YXIoLS10aGVtZS1nYXAtUyk7IH1gLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdmVydGljYWwgb2YgW1wibm9uZVwiLCBcIlhTXCIsIFwiU1wiLCBcIk1cIiwgXCJMXCIsIFwiWExcIl0pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvcml6b250YWwgb2YgW1wibm9uZVwiLCBcIlhTXCIsIFwiU1wiLCBcIk1cIiwgXCJMXCIsIFwiWExcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaChgLiR7dGhpcy5jbHMoYHBhZGRpbmctJHt2ZXJ0aWNhbH0tJHtob3Jpem9udGFsfWApfSB7IHBhZGRpbmc6IHZhcigtLXRoZW1lLWdhcC0ke3ZlcnRpY2FsfSkgdmFyKC0tdGhlbWUtZ2FwLSR7aG9yaXpvbnRhbH0pOyB9YCk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYC4ke3RoaXMuY2xzKGBtYXJnaW4tJHt2ZXJ0aWNhbH0tJHtob3Jpem9udGFsfWApfSB7IG1hcmdpbjogdmFyKC0tdGhlbWUtZ2FwLSR7dmVydGljYWx9KSB2YXIoLS10aGVtZS1nYXAtJHtob3Jpem9udGFsfSk7IH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFtcInByaW1hcnlcIiwgXCJzZWNvbmRhcnlcIiwgXCJ0ZXJ0aWFyeVwiLCBcIm5ldXRyYWxcIl0pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBsZXZlbCA9IDE7IGxldmVsIDwgMTA7IGxldmVsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaChgLiR7dGhpcy5jbHMoYGNvbG9yLSR7Z3JvdXB9LSR7bGV2ZWx9YCl9IHtgLCBgICBjb2xvcjogdmFyKC0tdGhlbWUtY29sb3Itb24tJHtncm91cH0tJHtsZXZlbH0pO2AsIGAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRoZW1lLWNvbG9yLSR7Z3JvdXB9LSR7bGV2ZWx9KTtgLCBcIn1cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIGpvaW4oLi4uaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gdHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpLmpvaW4oXCIgXCIpO1xuICAgIH1cbiAgICBwYWRkaW5nKC4uLnZhbHVlcykge1xuICAgICAgICBsZXQgW3ZlcnRpY2FsLCBob3Jpem9udGFsXSA9IHZhbHVlcztcbiAgICAgICAgaWYgKCF2ZXJ0aWNhbClcbiAgICAgICAgICAgIHZlcnRpY2FsID0gXCJub25lXCI7XG4gICAgICAgIGlmICghaG9yaXpvbnRhbClcbiAgICAgICAgICAgIGhvcml6b250YWwgPSB2ZXJ0aWNhbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xzKGBwYWRkaW5nLSR7dmVydGljYWx9LSR7aG9yaXpvbnRhbH1gKTtcbiAgICB9XG4gICAgbWFyZ2luKC4uLnZhbHVlcykge1xuICAgICAgICBsZXQgW3ZlcnRpY2FsLCBob3Jpem9udGFsXSA9IHZhbHVlcztcbiAgICAgICAgaWYgKCF2ZXJ0aWNhbClcbiAgICAgICAgICAgIHZlcnRpY2FsID0gXCJub25lXCI7XG4gICAgICAgIGlmICghaG9yaXpvbnRhbClcbiAgICAgICAgICAgIGhvcml6b250YWwgPSB2ZXJ0aWNhbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xzKGBtYXJnaW4tJHt2ZXJ0aWNhbH0tJHtob3Jpem9udGFsfWApO1xuICAgIH1cbiAgICBkaXNwbGF5KHR5cGUpIHtcbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IFt0aGlzLmNscyhgZGlzcGxheS0ke3R5cGV9YCldO1xuICAgICAgICByZXR1cm4gY2xhc3Nlcy5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgY2xzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc2lnbmF0dXJlfSR7bmFtZX1gO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyeGhjM010Ym1GdFpYTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdmRHaGxiV1V2WTJ4aGMzTXRibUZ0WlhNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJSVUVzVFVGQlRTeERRVUZETEU5QlFVOHNUMEZCVHl4VlFVRlZPMGxCUnpOQ08xRkJSbWxDTEdOQlFWTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJRVHRSUVUxMlJDeHBRa0ZCV1N4SFFVRkhMRU5CUVVNc1VVRkJiMElzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZET1VNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFJRVU0zUWl4dFFrRkJZeXhIUVVGSExFTkJRVU1zVVVGQmIwSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkRhRVFzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4dFFrRkJiVUlzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUVR0UlFVTXZRaXhyUWtGQllTeEhRVUZITEVOQlFVTXNVVUZCYjBJc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGREwwTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhyUWtGQmEwSXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJRVHRSUVVNNVFpeHBRa0ZCV1N4SFFVRkhMRU5CUVVNc1VVRkJiMElzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZET1VNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFJRVFpDY2tJc1UwRkJTU3hIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU42UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzJkQ1FVTnFRaXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVUU3WjBKQlEycERMRTlCUVUwN1dVRkRWaXhEUVVGRE8xbEJRMFFzVFVGQlRTeExRVUZMTEVkQlFXRTdaMEpCUTNCQ0xFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZEVWl4alFVRmpMRU5CUTJwQ0xHMUhRVUZ0Unp0blFrRkRjRWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVTlNMSEZDUVVGeFFpeERRVU40UWl3d1IwRkJNRWM3WVVGRE9VY3NRMEZCUVR0WlFVTkVMRXRCUVVzc1RVRkJUU3hSUVVGUkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1owSkJRM3BFTEV0QlFVc3NUVUZCVFN4VlFVRlZMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdiMEpCUXpORUxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlEwNHNTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVOU0xGZEJRVmNzVVVGQlVTeEpRVUZKTEZWQlFWVXNSVUZCUlN4RFFVTjBReXdyUWtGQkswSXNVVUZCVVN4eFFrRkJjVUlzVlVGQlZTeE5RVUZOTEVOQlEyaEdMRU5CUVVFN2IwSkJRMFFzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZEVGl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRMUlzVlVGQlZTeFJRVUZSTEVsQlFVa3NWVUZCVlN4RlFVRkZMRU5CUTNKRExEaENRVUU0UWl4UlFVRlJMSEZDUVVGeFFpeFZRVUZWTEUxQlFVMHNRMEZETDBVc1EwRkJRVHRuUWtGRFRDeERRVUZETzFsQlEwd3NRMEZCUXp0WlFVTkVMRXRCUVVzc1RVRkJUU3hMUVVGTExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNWMEZCVnl4RlFVRkZMRlZCUVZVc1JVRkJSU3hUUVVGVExFTkJRVU1zUlVGQlJTeERRVUZETzJkQ1FVTnNSU3hMUVVGTExFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVjc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTTdiMEpCUTNSRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlEwNHNTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUzBGQlN5eEpRVUZKTEV0QlFVc3NSVUZCUlN4RFFVRkRMRWxCUVVrc1JVRkRNME1zYVVOQlFXbERMRXRCUVVzc1NVRkJTU3hMUVVGTExFbEJRVWtzUlVGRGJrUXNlVU5CUVhsRExFdEJRVXNzU1VGQlNTeExRVUZMTEVsQlFVa3NSVUZETTBRc1IwRkJSeXhEUVVOT0xFTkJRVUU3WjBKQlEwd3NRMEZCUXp0WlFVTk1MRU5CUVVNN1dVRkRSQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8xbEJRemRETEV0QlFVc3NRMEZCUXl4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0WlFVTndReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRSUVVOd1F5eERRVUZETEVOQlFVRTdVVUV2UlVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZCTzBsQlEyWXNRMEZCUXp0SlFWZEVMRWxCUVVrc1EwRkJReXhIUVVGSExFdEJRV2RDTzFGQlEzQkNMRTlCUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1QwRkJUeXhKUVVGSkxFdEJRVXNzVVVGQlVTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJRM0pGTEVOQlFVTTdTVUZGUkN4UFFVRlBMRU5CUVVNc1IwRkJSeXhOUVVGeFJEdFJRVU0xUkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVlVzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUVR0UlFVTnVReXhKUVVGSkxFTkJRVU1zVVVGQlVUdFpRVUZGTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVFN1VVRkRhRU1zU1VGQlNTeERRVUZETEZWQlFWVTdXVUZCUlN4VlFVRlZMRWRCUVVjc1VVRkJVU3hEUVVGQk8xRkJRM1JETEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExGRkJRVkVzU1VGQlNTeFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkJPMGxCUTNoRUxFTkJRVU03U1VGRlJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4TlFVRnhSRHRSUVVNelJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZVc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlFUdFJRVU51UXl4SlFVRkpMRU5CUVVNc1VVRkJVVHRaUVVGRkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVRTdVVUZEYUVNc1NVRkJTU3hEUVVGRExGVkJRVlU3V1VGQlJTeFZRVUZWTEVkQlFVY3NVVUZCVVN4RFFVRkJPMUZCUTNSRExFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRkZCUVZFc1NVRkJTU3hWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZCTzBsQlEzWkVMRU5CUVVNN1NVRkZSQ3hQUVVGUExFTkJRVU1zU1VGQmNVSTdVVUZEZWtJc1RVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlF6ZERMRTlCUVU4c1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0SlFVTTFRaXhEUVVGRE8wbEJSVThzUjBGQlJ5eERRVUZETEVsQlFWazdVVUZEY0VJc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RlFVRkZMRU5CUVVFN1NVRkRja01zUTBGQlF6dERRVEpEU2lKOSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL0J1dHRvbi5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL0J1dHRvbi5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBUaGVtZSBmcm9tIFwiLi4vLi4vdGhlbWUvdGhlbWUuanNcIjtcbmltcG9ydCB7IGNzc0ZvckNvbG9yLCBjc3NGb3JDb2xvck9uLCBjc3NGb3JHYXBzLCB9IGZyb20gXCIuLi8uLi90aGVtZS9zdHlsZXMvc3R5bGVzLmpzXCI7XG5pbXBvcnQgeyBzdHlsZUNvbW1vbiB9IGZyb20gXCIuLi8uLi90aGVtZS9zdHlsZXMvY29tbW9uLmpzXCI7XG5pbXBvcnQgeyBzZXREZWZhdWx0cyB9IGZyb20gXCIuLi8uLi91dGlsL3NldC1kZWZhdWx0cy5qc1wiO1xuaW1wb3J0IFN0eWxlcyBmcm9tIFwiLi9CdXR0b24ubW9kdWxlLmNzc1wiO1xuY29uc3QgJCA9IFRoZW1lLmNsYXNzTmFtZXM7XG5leHBvcnQgZnVuY3Rpb24gVmlld0J1dHRvbihwYXJ0aWFsUHJvcHMpIHtcbiAgICBjb25zdCBwcm9wcyA9IHNldERlZmF1bHRzKHBhcnRpYWxQcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogXCJCdXR0b25cIixcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIi4xMjVlbVwiLFxuICAgICAgICBtYXJnaW46IFtcIlhTXCIsIFwiMFwiXSxcbiAgICAgICAgcGFkZGluZzogWzAsIFwiTVwiXSxcbiAgICAgICAgb25DbGljazogREVGQVVMVF9DTElDS19IQU5ETEVSLFxuICAgICAgICB3aWR0aDogXCJhdXRvXCIsXG4gICAgICAgIGhlaWdodDogXCIyZW1cIixcbiAgICAgICAgdmFyaWFudDogXCJlbGV2YXRlZFwiLFxuICAgICAgICB0aGlja25lc3M6IDAuMTI1LFxuICAgIH0pO1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgZW5hYmxlZCwgdmFyaWFudCwgb25DbGljayB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBjb2xvciB9ID0gcGFydGlhbFByb3BzO1xuICAgIGNvbnN0IHRoaWNrbmVzcyA9IGNzc0ZvckdhcHMocHJvcHMudGhpY2tuZXNzKTtcbiAgICBjb25zdCBzdHlsZSA9IE9iamVjdC5hc3NpZ24oeyBcIi0tY3VzdG9tLWNvbG9yLW1haW4tYWxwaGFcIjogZ2V0TWFpbkFscGhhQ29sb3IoY29sb3IsIHZhcmlhbnQpLCBcIi0tY3VzdG9tLWNvbG9yLW1haW5cIjogZ2V0TWFpbkNvbG9yKGNvbG9yLCB2YXJpYW50KSwgXCItLWN1c3RvbS1jb2xvci10ZXh0XCI6IGdldFRleHRDb2xvcihjb2xvciwgdmFyaWFudCksIFwiLS1jdXN0b20tdGhpY2tuZXNzXCI6IHRoaWNrbmVzcyB9LCBzdHlsZUNvbW1vbihwcm9wcykpO1xuICAgIGNvbnN0IEljb24gPSBwcm9wcy5pY29uO1xuICAgIGlmICh0eXBlb2Ygb25DbGljayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gKF9qc3hzKFwiYVwiLCB7IHN0eWxlOiBzdHlsZSwgY2xhc3NOYW1lOiAkLmpvaW4oY2xhc3NOYW1lLCBTdHlsZXMuQnV0dG9uLCBTdHlsZXNbdmFyaWFudF0sIEJvb2xlYW4oSWNvbikgJiYgU3R5bGVzLmljb24sICFlbmFibGVkICYmIFN0eWxlcy5kaXNhYmxlZCksIGhyZWY6IG9uQ2xpY2ssIGNoaWxkcmVuOiBbSWNvbiAmJiBfanN4KEljb24sIHt9KSwgX2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogU3R5bGVzLmxhYmVsLCBjaGlsZHJlbjogY2hpbGRyZW4gfSldIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIChfanN4cyhcImJ1dHRvblwiLCB7IHN0eWxlOiBzdHlsZSwgY2xhc3NOYW1lOiAkLmpvaW4oY2xhc3NOYW1lLCBTdHlsZXMuQnV0dG9uLCBTdHlsZXNbdmFyaWFudF0sIEJvb2xlYW4oSWNvbikgJiYgU3R5bGVzLmljb24pLCBkaXNhYmxlZDogIWVuYWJsZWQsIHR5cGU6IFwiYnV0dG9uXCIsIG9uQ2xpY2s6IG9uQ2xpY2ssIGNoaWxkcmVuOiBbSWNvbiAmJiBfanN4KEljb24sIHt9KSwgX2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogU3R5bGVzLmxhYmVsLCBjaGlsZHJlbjogY2hpbGRyZW4gfSldIH0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQ3VzdG9tQnV0dG9uKGRlZmF1bHRQcm9wcykge1xuICAgIHJldHVybiAocHJvcHMpID0+IFZpZXdCdXR0b24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMpLCBwcm9wcykpO1xufVxuY29uc3QgREVGQVVMVF9DTElDS19IQU5ETEVSID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ2xpY2shXCIpO1xufTtcbmZ1bmN0aW9uIGdldE1haW5Db2xvcihjb2xvciwgdmFyaWFudCkge1xuICAgIHN3aXRjaCAodmFyaWFudCkge1xuICAgICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgLy8gXCJlbGV2YXRlZFwiIHwgXCJmaWxsZWRcIiB8IFwib3V0bGluZWRcIlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGNzc0ZvckNvbG9yKGNvbG9yICE9PSBudWxsICYmIGNvbG9yICE9PSB2b2lkIDAgPyBjb2xvciA6IFwicHJpbWFyeS01XCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE1haW5BbHBoYUNvbG9yKGNvbG9yLCB2YXJpYW50KSB7XG4gICAgc3dpdGNoICh2YXJpYW50KSB7XG4gICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xuICAgICAgICAvLyBcImVsZXZhdGVkXCIgfCBcImZpbGxlZFwiIHwgXCJvdXRsaW5lZFwiXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3NzRm9yQ29sb3IoY29sb3IgIT09IG51bGwgJiYgY29sb3IgIT09IHZvaWQgMCA/IGNvbG9yIDogXCJwcmltYXJ5LTVcIiwgMC41KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUZXh0Q29sb3IoY29sb3IsIHZhcmlhbnQpIHtcbiAgICBzd2l0Y2ggKHZhcmlhbnQpIHtcbiAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgY2FzZSBcIm91dGxpbmVkXCI6XG4gICAgICAgICAgICByZXR1cm4gY29sb3IgPyBjc3NGb3JDb2xvcihjb2xvcikgOiBcImN1cnJlbnRDb2xvclwiO1xuICAgICAgICAvLyBcImVsZXZhdGVkXCIgfCBcImZpbGxlZFwiXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3NzRm9yQ29sb3JPbihjb2xvciAhPT0gbnVsbCAmJiBjb2xvciAhPT0gdm9pZCAwID8gY29sb3IgOiBcInByaW1hcnktNVwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lRblYwZEc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwzWnBaWGN2UW5WMGRHOXVMMEoxZEhSdmJpNTBjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVOQkxFOUJRVThzUzBGQlN5eE5RVUZOTEhOQ1FVRnpRaXhEUVVGQk8wRkJSWGhETEU5QlFVOHNSVUZEU0N4WFFVRlhMRVZCUTFnc1lVRkJZU3hGUVVOaUxGVkJRVlVzUjBGRFlpeE5RVUZOTERoQ1FVRTRRaXhEUVVGQk8wRkJRM0pETEU5QlFVOHNSVUZCWlN4WFFVRlhMRVZCUVVVc1RVRkJUU3c0UWtGQk9FSXNRMEZCUVR0QlFVTjJSU3hQUVVGUExFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNORUpCUVRSQ0xFTkJRVUU3UVVGSGVFUXNUMEZCVHl4TlFVRk5MRTFCUVUwc2NVSkJRWEZDTEVOQlFVRTdRVUZGZUVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUVR0QlFUWkRNVUlzVFVGQlRTeFZRVUZWTEZWQlFWVXNRMEZCUXl4WlFVRTJRanRKUVVOd1JDeE5RVUZOTEV0QlFVc3NSMEZCUnl4WFFVRlhMRU5CUVVNc1dVRkJXU3hGUVVGRk8xRkJRM0JETEZGQlFWRXNSVUZCUlN4UlFVRlJPMUZCUTJ4Q0xFOUJRVThzUlVGQlJTeEpRVUZKTzFGQlEySXNXVUZCV1N4RlFVRkZMRkZCUVZFN1VVRkRkRUlzVFVGQlRTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1EwRkJRenRSUVVOdVFpeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRE8xRkJRMnBDTEU5QlFVOHNSVUZCUlN4eFFrRkJjVUk3VVVGRE9VSXNTMEZCU3l4RlFVRkZMRTFCUVUwN1VVRkRZaXhOUVVGTkxFVkJRVVVzUzBGQlN6dFJRVU5pTEU5QlFVOHNSVUZCUlN4VlFVRlZPMUZCUTI1Q0xGTkJRVk1zUlVGQlJTeExRVUZMTzB0QlEyNUNMRU5CUVVNc1EwRkJRVHRKUVVOR0xFMUJRVTBzUlVGQlJTeFRRVUZUTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkJPMGxCUTJoRkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4WlFVRlpMRU5CUVVFN1NVRkRPVUlzVFVGQlRTeFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlFUdEpRVU0zUXl4TlFVRk5MRXRCUVVzc2JVSkJRMUFzTWtKQlFUSkNMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1EwRkJReXhGUVVNNVJDeHhRa0ZCY1VJc1JVRkJSU3haUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RlFVTnVSQ3h4UWtGQmNVSXNSVUZCUlN4WlFVRlpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF5eEZRVU51UkN4dlFrRkJiMElzUlVGQlJTeFRRVUZUTEVsQlF6VkNMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGRGVFSXNRMEZCUVR0SlFVTkVMRTFCUVUwc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVRTdTVUZEZGtJc1NVRkJTU3hQUVVGUExFOUJRVThzUzBGQlN5eFJRVUZSTEVWQlFVVXNRMEZCUXp0UlFVTTVRaXhQUVVGUExFTkJRMGdzWVVGRFNTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVTmFMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVU5pTEZOQlFWTXNSVUZEVkN4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVOaUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZEWml4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NSVUZETlVJc1EwRkJReXhQUVVGUExFbEJRVWtzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZET1VJc1JVRkRSQ3hKUVVGSkxFVkJRVVVzVDBGQlR5eGhRVVZhTEVsQlFVa3NTVUZCU1N4TFFVRkRMRWxCUVVrc1MwRkJSeXhGUVVOcVFpeGpRVUZMTEZOQlFWTXNSVUZCUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhaUVVGSExGRkJRVkVzUjBGQlR5eEpRVU01UXl4RFFVTlFMRU5CUVVFN1NVRkRUQ3hEUVVGRE8wbEJRMFFzVDBGQlR5eERRVU5JTEd0Q1FVTkpMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRMW9zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUTJJc1UwRkJVeXhGUVVOVUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlEySXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVObUxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVNdlFpeEZRVU5FTEZGQlFWRXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkRiRUlzU1VGQlNTeEZRVUZETEZGQlFWRXNSVUZEWWl4UFFVRlBMRVZCUVVVc1QwRkJUeXhoUVVWbUxFbEJRVWtzU1VGQlNTeExRVUZETEVsQlFVa3NTMEZCUnl4RlFVTnFRaXhqUVVGTExGTkJRVk1zUlVGQlJTeE5RVUZOTEVOQlFVTXNTMEZCU3l4WlFVRkhMRkZCUVZFc1IwRkJUeXhKUVVONlF5eERRVU5hTEVOQlFVRTdRVUZEVEN4RFFVRkRPMEZCUlVRc1RVRkJUU3hWUVVGVkxHZENRVUZuUWl4RFFVTTFRaXhaUVVGelF6dEpRVVYwUXl4UFFVRlBMRU5CUVVNc1MwRkJjMElzUlVGQlJTeEZRVUZGTEVOQlF6bENMRlZCUVZVc2FVTkJRMGdzV1VGQldTeEhRVU5hTEV0QlFVc3NSVUZEVml4RFFVRkJPMEZCUTFZc1EwRkJRenRCUVVWRUxFMUJRVTBzY1VKQlFYRkNMRWRCUVVjc1IwRkJSeXhGUVVGRk8wbEJReTlDTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3UVVGRGVrSXNRMEZCUXl4RFFVRkJPMEZCUlVRc1UwRkJVeXhaUVVGWkxFTkJRMnBDTEV0QlFXdERMRVZCUTJ4RExFOUJRV1U3U1VGRlppeFJRVUZSTEU5QlFVOHNSVUZCUlN4RFFVRkRPMUZCUTJRc1MwRkJTeXhOUVVGTk8xbEJRMUFzVDBGQlR5eGhRVUZoTEVOQlFVRTdVVUZEZUVJc2NVTkJRWEZETzFGQlEzSkRPMWxCUTBrc1QwRkJUeXhYUVVGWExFTkJRVU1zUzBGQlN5eGhRVUZNTEV0QlFVc3NZMEZCVEN4TFFVRkxMRWRCUVVrc1YwRkJWeXhEUVVGRExFTkJRVUU3U1VGRGFFUXNRMEZCUXp0QlFVTk1MRU5CUVVNN1FVRkZSQ3hUUVVGVExHbENRVUZwUWl4RFFVTjBRaXhMUVVGclF5eEZRVU5zUXl4UFFVRmxPMGxCUldZc1VVRkJVU3hQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU5rTEV0QlFVc3NUVUZCVFR0WlFVTlFMRTlCUVU4c1lVRkJZU3hEUVVGQk8xRkJRM2hDTEhGRFFVRnhRenRSUVVOeVF6dFpRVU5KTEU5QlFVOHNWMEZCVnl4RFFVRkRMRXRCUVVzc1lVRkJUQ3hMUVVGTExHTkJRVXdzUzBGQlN5eEhRVUZKTEZkQlFWY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVOeVJDeERRVUZETzBGQlEwd3NRMEZCUXp0QlFVVkVMRk5CUVZNc1dVRkJXU3hEUVVOcVFpeExRVUZyUXl4RlFVTnNReXhQUVVGbE8wbEJSV1lzVVVGQlVTeFBRVUZQTEVWQlFVVXNRMEZCUXp0UlFVTmtMRXRCUVVzc1RVRkJUU3hEUVVGRE8xRkJRMW9zUzBGQlN5eFZRVUZWTzFsQlExZ3NUMEZCVHl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1kwRkJZeXhEUVVGQk8xRkJRM1JFTEhkQ1FVRjNRanRSUVVONFFqdFpRVU5KTEU5QlFVOHNZVUZCWVN4RFFVRkRMRXRCUVVzc1lVRkJUQ3hMUVVGTExHTkJRVXdzUzBGQlN5eEhRVUZKTEZkQlFWY3NRMEZCUXl4RFFVRkJPMGxCUTJ4RUxFTkJRVU03UVVGRFRDeERRVUZESW4wPSIsImV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0cyhwcm9wcywgZGVmYXVsdHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cyksIHByb3BzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyVjBMV1JsWm1GMWJIUnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwzVjBhV3d2YzJWMExXUmxabUYxYkhSekxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEUxQlFVMHNWVUZCVlN4WFFVRlhMRU5CUTNaQ0xFdEJRV2RDTEVWQlEyaENMRkZCUVhsRk8wbEJSWHBGTEU5QlFVOHNaME5CUVVzc1VVRkJVU3hIUVVGTExFdEJRVXNzUTBGQmQwTXNRMEZCUVR0QlFVTXhSU3hEUVVGREluMD0iLCJpbXBvcnQgeyBzdHlsZUNoaWxkIH0gZnJvbSBcIi4vY2hpbGQuanNcIjtcbmltcG9ydCB7IHN0eWxlRGltZW5zaW9uIH0gZnJvbSBcIi4vZGltZW5zaW9uLmpzXCI7XG5pbXBvcnQgeyBzdHlsZVBvc2l0aW9uIH0gZnJvbSBcIi4vcG9zaXRpb24uanNcIjtcbmltcG9ydCB7IHN0eWxlU3BhY2UgfSBmcm9tIFwiLi9zcGFjZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlQ29tbW9uKHByb3BzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0eWxlQ2hpbGQocHJvcHMpKSwgc3R5bGVEaW1lbnNpb24ocHJvcHMpKSwgc3R5bGVQb3NpdGlvbihwcm9wcykpLCBzdHlsZVNwYWNlKHByb3BzKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjl0Ylc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwzUm9aVzFsTDNOMGVXeGxjeTlqYjIxdGIyNHVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhGUVVGdFFpeFZRVUZWTEVWQlFVVXNUVUZCVFN4WlFVRlpMRU5CUVVFN1FVRkRlRVFzVDBGQlR5eEZRVUYxUWl4alFVRmpMRVZCUVVVc1RVRkJUU3huUWtGQlowSXNRMEZCUVR0QlFVTndSU3hQUVVGUExFVkJRWE5DTEdGQlFXRXNSVUZCUlN4TlFVRk5MR1ZCUVdVc1EwRkJRVHRCUVVOcVJTeFBRVUZQTEVWQlFXMUNMRlZCUVZVc1JVRkJSU3hOUVVGTkxGbEJRVmtzUTBGQlFUdEJRVmw0UkN4TlFVRk5MRlZCUVZVc1YwRkJWeXhEUVVGRExFdEJRV3RDTzBsQlF6RkRMRzFGUVVOUExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZEYWtJc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVU55UWl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRM0JDTEZWQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkRka0k3UVVGRFRDeERRVUZESW4wPSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL1BhbmVsLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vUGFuZWwubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBUaGVtZSB9IGZyb20gXCIuLi8uLi90aGVtZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgc3R5bGVDaGlsZCB9IGZyb20gXCIuLi8uLi90aGVtZS9zdHlsZXMvY2hpbGQuanNcIjtcbmltcG9ydCB7IHN0eWxlQ29sb3IgfSBmcm9tIFwiLi4vLi4vdGhlbWUvc3R5bGVzL2NvbG9yLmpzXCI7XG5pbXBvcnQgeyBjbGFzc25hbWVEaW1lbnNpb24sIHN0eWxlRGltZW5zaW9uLCB9IGZyb20gXCIuLi8uLi90aGVtZS9zdHlsZXMvZGltZW5zaW9uLmpzXCI7XG5pbXBvcnQgeyBzdHlsZURpc3BsYXkgfSBmcm9tIFwiLi4vLi4vdGhlbWUvc3R5bGVzL2Rpc3BsYXkuanNcIjtcbmltcG9ydCB7IHN0eWxlT3ZlcmZsb3csIH0gZnJvbSBcIi4uLy4uL3RoZW1lL3N0eWxlcy9vdmVyZmxvdy5qc1wiO1xuaW1wb3J0IHsgc3R5bGVQb3NpdGlvbiwgfSBmcm9tIFwiLi4vLi4vdGhlbWUvc3R5bGVzL3Bvc2l0aW9uLmpzXCI7XG5pbXBvcnQgeyBzdHlsZVNwYWNlIH0gZnJvbSBcIi4uLy4uL3RoZW1lL3N0eWxlcy9zcGFjZS5qc1wiO1xuaW1wb3J0IHsgY3NzRm9yR2FwcyB9IGZyb20gXCIuLi8uLi90aGVtZS9zdHlsZXMvc3R5bGVzLmpzXCI7XG5pbXBvcnQgU3R5bGVzIGZyb20gXCIuL1BhbmVsLm1vZHVsZS5jc3NcIjtcbmNvbnN0ICQgPSBUaGVtZS5jbGFzc05hbWVzO1xuZXhwb3J0IGZ1bmN0aW9uIFZpZXdQYW5lbChwcm9wcykge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgYm9yZGVyUmFkaXVzLCBmb250U2l6ZSwgYXNwZWN0UmF0aW8gPSAwLCB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc3R5bGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgZm9udFNpemUgfSwgc3R5bGVDb2xvcihwcm9wcykpLCBzdHlsZVNwYWNlKHByb3BzKSksIHN0eWxlRGltZW5zaW9uKHByb3BzKSksIHN0eWxlT3ZlcmZsb3cocHJvcHMpKSwgc3R5bGVEaXNwbGF5KHByb3BzKSksIHN0eWxlUG9zaXRpb24ocHJvcHMpKSwgc3R5bGVDaGlsZChwcm9wcykpO1xuICAgIGlmIChhc3BlY3RSYXRpbyA+IDApXG4gICAgICAgIHN0eWxlW1wiLS1jdXN0b20tYXNwZWN0LXJhdGlvXCJdID0gYXNwZWN0UmF0aW87XG4gICAgaWYgKGJvcmRlclJhZGl1cylcbiAgICAgICAgc3R5bGUuYm9yZGVyUmFkaXVzID0gY3NzRm9yR2Fwcyhib3JkZXJSYWRpdXMpO1xuICAgIHJldHVybiAoX2pzeChcImRpdlwiLCB7IGNsYXNzTmFtZTogJC5qb2luKGNsYXNzTmFtZSwgU3R5bGVzLlBhbmVsLCBjbGFzc25hbWVEaW1lbnNpb24ocHJvcHMpKSwgc3R5bGU6IHN0eWxlLCBjaGlsZHJlbjogY2hpbGRyZW4gfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDdXN0b21QYW5lbChkZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gKHByb3BzKSA9PiBWaWV3UGFuZWwoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcHMpLCBwcm9wcykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVUdGdVpXd3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZkbWxsZHk5UVlXNWxiQzlRWVc1bGJDNTBjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVWQkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4elFrRkJjMElzUTBGQlFUdEJRVU0xUXl4UFFVRlBMRVZCUVcxQ0xGVkJRVlVzUlVGQlJTeE5RVUZOTERaQ1FVRTJRaXhEUVVGQk8wRkJRM3BGTEU5QlFVOHNSVUZCYlVJc1ZVRkJWU3hGUVVGRkxFMUJRVTBzTmtKQlFUWkNMRU5CUVVFN1FVRkRla1VzVDBGQlR5eEZRVVZJTEd0Q1FVRnJRaXhGUVVOc1FpeGpRVUZqTEVkQlEycENMRTFCUVUwc2FVTkJRV2xETEVOQlFVRTdRVUZEZUVNc1QwRkJUeXhGUVVGeFFpeFpRVUZaTEVWQlFVVXNUVUZCVFN3clFrRkJLMElzUTBGQlFUdEJRVU12UlN4UFFVRlBMRVZCUlVnc1lVRkJZU3hIUVVOb1FpeE5RVUZOTEdkRFFVRm5ReXhEUVVGQk8wRkJRM1pETEU5QlFVOHNSVUZGU0N4aFFVRmhMRWRCUTJoQ0xFMUJRVTBzWjBOQlFXZERMRU5CUVVFN1FVRkRka01zVDBGQlR5eEZRVUZ0UWl4VlFVRlZMRVZCUVVVc1RVRkJUU3cyUWtGQk5rSXNRMEZCUVR0QlFVTjZSU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEUxQlFVMHNPRUpCUVRoQ0xFTkJRVUU3UVVGSGVrUXNUMEZCVHl4TlFVRk5MRTFCUVUwc2IwSkJRVzlDTEVOQlFVRTdRVUZGZGtNc1RVRkJUU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUVR0QlFXMUNNVUlzVFVGQlRTeFZRVUZWTEZOQlFWTXNRMEZCUXl4TFFVRnhRanRKUVVNelF5eE5RVUZOTEVWQlEwWXNVMEZCVXl4RlFVTlVMRkZCUVZFc1JVRkRVaXhaUVVGWkxFVkJRMW9zVVVGQlVTeEZRVU5TTEZkQlFWY3NSMEZCUnl4RFFVRkRMRWRCUTJ4Q0xFZEJRVWNzUzBGQlN5eERRVUZCTzBsQlExUXNUVUZCVFN4TFFVRkxMSFZIUVVOUUxGRkJRVkVzU1VGRFRDeFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUTJwQ0xGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZEYWtJc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVU55UWl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRM0JDTEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkRia0lzWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVTndRaXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlEzWkNMRU5CUVVFN1NVRkRSQ3hKUVVGSkxGZEJRVmNzUjBGQlJ5eERRVUZETzFGQlFVVXNTMEZCU3l4RFFVRkRMSFZDUVVGMVFpeERRVUZETEVkQlFVY3NWMEZCVnl4RFFVRkJPMGxCUTJwRkxFbEJRVWtzV1VGQldUdFJRVUZGTEV0QlFVc3NRMEZCUXl4WlFVRlpMRWRCUVVjc1ZVRkJWU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBsQlF5OUVMRTlCUVU4c1EwRkRTQ3hqUVVOSkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVTmlMRk5CUVZNc1JVRkRWQ3hOUVVGTkxFTkJRVU1zUzBGQlN5eEZRVU5hTEd0Q1FVRnJRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVU0xUWl4RlFVTkVMRXRCUVVzc1JVRkJSU3hMUVVGTExGbEJSVmdzVVVGQlVTeEhRVU5RTEVOQlExUXNRMEZCUVR0QlFVTk1MRU5CUVVNN1FVRkZSQ3hOUVVGTkxGVkJRVlVzWlVGQlpTeERRVU16UWl4WlFVRnhRenRKUVVWeVF5eFBRVUZQTEVOQlFVTXNTMEZCY1VJc1JVRkJSU3hGUVVGRkxFTkJRemRDTEZOQlFWTXNhVU5CUTBZc1dVRkJXU3hIUVVOYUxFdEJRVXNzUlVGRFZpeERRVUZCTzBGQlExWXNRMEZCUXlKOSIsImV4cG9ydCBmdW5jdGlvbiBzdHlsZU92ZXJmbG93KHsgb3ZlcmZsb3csIG92ZXJmbG93WCwgb3ZlcmZsb3dZLCB9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSB7fTtcbiAgICBpZiAob3ZlcmZsb3cpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvdmVyZmxvdyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgc3R5bGUub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbeCwgeV0gPSBvdmVyZmxvdztcbiAgICAgICAgc3R5bGUub3ZlcmZsb3dYID0geDtcbiAgICAgICAgc3R5bGUub3ZlcmZsb3dZID0geTtcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cbiAgICBpZiAob3ZlcmZsb3dYKVxuICAgICAgICBzdHlsZS5vdmVyZmxvd1ggPSBvdmVyZmxvd1g7XG4gICAgaWYgKG92ZXJmbG93WSlcbiAgICAgICAgc3R5bGUub3ZlcmZsb3dZID0gb3ZlcmZsb3dZO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWIzWmxjbVpzYjNjdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdmRHaGxiV1V2YzNSNWJHVnpMMjkyWlhKbWJHOTNMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVhWRVFTeE5RVUZOTEZWQlFWVXNZVUZCWVN4RFFVRkRMRVZCUXpGQ0xGRkJRVkVzUlVGRFVpeFRRVUZUTEVWQlExUXNVMEZCVXl4SFFVTlJPMGxCUTJwQ0xFMUJRVTBzUzBGQlN5eEhRVUYzUWl4RlFVRkZMRU5CUVVFN1NVRkRja01zU1VGQlNTeFJRVUZSTEVWQlFVVXNRMEZCUXp0UlFVTllMRWxCUVVrc1QwRkJUeXhSUVVGUkxFdEJRVXNzVVVGQlVTeEZRVUZGTEVOQlFVTTdXVUZETDBJc1MwRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVRTdXVUZEZWtJc1QwRkJUeXhMUVVGTExFTkJRVUU3VVVGRGFFSXNRMEZCUXp0UlFVTkVMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkJPMUZCUTNaQ0xFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkJPMUZCUTI1Q0xFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkJPMUZCUTI1Q0xFOUJRVThzUzBGQlN5eERRVUZCTzBsQlEyaENMRU5CUVVNN1NVRkRSQ3hKUVVGSkxGTkJRVk03VVVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRVHRKUVVNeFF5eEpRVUZKTEZOQlFWTTdVVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlFUdEpRVU14UXl4UFFVRlBMRXRCUVVzc1EwRkJRVHRCUVVOb1FpeERRVUZESW4wPSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL2RvYy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vZG9jL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL1N0cmlwLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9kb2Mvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vU3RyaXAubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBUaGVtZSB9IGZyb20gXCIuLi8uLi90aGVtZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgc3R5bGVEaW1lbnNpb24sIGNsYXNzbmFtZURpbWVuc2lvbiwgfSBmcm9tIFwiLi4vLi4vdGhlbWUvc3R5bGVzL2RpbWVuc2lvbi5qc1wiO1xuaW1wb3J0IHsgc3R5bGVQb3NpdGlvbiwgfSBmcm9tIFwiLi4vLi4vdGhlbWUvc3R5bGVzL3Bvc2l0aW9uLmpzXCI7XG5pbXBvcnQgeyBzdHlsZUNoaWxkIH0gZnJvbSBcIi4uLy4uL3RoZW1lL3N0eWxlcy9jaGlsZC5qc1wiO1xuaW1wb3J0IFN0eWxlcyBmcm9tIFwiLi9TdHJpcC5tb2R1bGUuY3NzXCI7XG5pbXBvcnQgeyBzdHlsZUNvbG9yIH0gZnJvbSBcIi4uLy4uL3RoZW1lL3N0eWxlcy9jb2xvci5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIFZpZXdTdHJpcChwcm9wcykge1xuICAgIGNvbnN0IHsgb3JpZW50YXRpb24gPSBcImNvbHVtblwiLCB0ZW1wbGF0ZSA9IFwiLTFcIiB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc3R5bGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzdHlsZURpbWVuc2lvbihwcm9wcykpLCBzdHlsZVBvc2l0aW9uKHByb3BzKSksIHN0eWxlQ2hpbGQocHJvcHMpKSwgc3R5bGVDb2xvcihwcm9wcykpO1xuICAgIGNvbnN0IHRlbXBsYXRlRGVmID0gdGVtcGxhdGVcbiAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgIC5tYXAoKGMpID0+IChcIjEyMzQ1Njc4OVwiLmluY2x1ZGVzKGMpID8gYG1pbm1heCgwLCAke2N9ZnIpYCA6IFwiYXV0b1wiKSlcbiAgICAgICAgLmpvaW4oXCIgXCIpO1xuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJyb3dcIikge1xuICAgICAgICBzdHlsZS5ncmlkVGVtcGxhdGVDb2x1bW5zID0gdGVtcGxhdGVEZWY7XG4gICAgICAgIHN0eWxlLmdyaWRBdXRvQ29sdW1ucyA9IFwiYXV0b1wiO1xuICAgICAgICBzdHlsZS5ncmlkVGVtcGxhdGVSb3dzID0gXCJtaW5tYXgoMCwgMWZyKVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3R5bGUuZ3JpZFRlbXBsYXRlUm93cyA9IHRlbXBsYXRlRGVmO1xuICAgICAgICBzdHlsZS5ncmlkQXV0b1Jvd3MgPSBcImF1dG9cIjtcbiAgICAgICAgc3R5bGUuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IFwibWlubWF4KDAsIDFmcilcIjtcbiAgICB9XG4gICAgcmV0dXJuIChfanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBUaGVtZS5jbGFzc05hbWVzLmpvaW4ocHJvcHMuY2xhc3NOYW1lLCBTdHlsZXMuU3RyaXAsIFN0eWxlc1tvcmllbnRhdGlvbl0sIGNsYXNzbmFtZURpbWVuc2lvbihwcm9wcykpLCBzdHlsZTogc3R5bGUsIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbiB9KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lVM1J5YVhBdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdmRtbGxkeTlUZEhKcGNDOVRkSEpwY0M1MGMzZ2lYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVVZCTEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3h6UWtGQmMwSXNRMEZCUVR0QlFVTTFReXhQUVVGUExFVkJSVWdzWTBGQll5eEZRVU5rTEd0Q1FVRnJRaXhIUVVOeVFpeE5RVUZOTEdsRFFVRnBReXhEUVVGQk8wRkJRM2hETEU5QlFVOHNSVUZGU0N4aFFVRmhMRWRCUTJoQ0xFMUJRVTBzWjBOQlFXZERMRU5CUVVFN1FVRkRka01zVDBGQlR5eEZRVUZ0UWl4VlFVRlZMRVZCUVVVc1RVRkJUU3cyUWtGQk5rSXNRMEZCUVR0QlFVVjZSU3hQUVVGUExFMUJRVTBzVFVGQlRTeHZRa0ZCYjBJc1EwRkJRVHRCUVVWMlF5eFBRVUZQTEVWQlFXMUNMRlZCUVZVc1JVRkJSU3hOUVVGTkxEQkNRVUV3UWl4RFFVRkJPMEZCZVVKMFJTeE5RVUZOTEZWQlFWVXNVMEZCVXl4RFFVRkRMRXRCUVdsQ08wbEJRM1pETEUxQlFVMHNSVUZCUlN4WFFVRlhMRWRCUVVjc1VVRkJVU3hGUVVGRkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVFN1NVRkRla1FzVFVGQlRTeExRVUZMTEN0RVFVTktMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGRGNrSXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVOd1FpeFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUTJwQ0xGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZEZGtJc1EwRkJRVHRKUVVORUxFMUJRVTBzVjBGQlZ5eEhRVUZITEZGQlFWRTdVMEZEZGtJc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF6dFRRVU5VTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFRRVU53UlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3U1VGRFpDeEpRVUZKTEZkQlFWY3NTMEZCU3l4TFFVRkxMRVZCUVVVc1EwRkJRenRSUVVONFFpeExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzVjBGQlZ5eERRVUZCTzFGQlEzWkRMRXRCUVVzc1EwRkJReXhsUVVGbExFZEJRVWNzVFVGQlRTeERRVUZCTzFGQlF6bENMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4blFrRkJaMElzUTBGQlFUdEpRVU0zUXl4RFFVRkRPMU5CUVUwc1EwRkJRenRSUVVOS0xFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhYUVVGWExFTkJRVUU3VVVGRGNFTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1IwRkJSeXhOUVVGTkxFTkJRVUU3VVVGRE0wSXNTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEdkQ1FVRm5RaXhEUVVGQk8wbEJRMmhFTEVOQlFVTTdTVUZEUkN4UFFVRlBMRU5CUTBnc1kwRkRTU3hUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUXpWQ0xFdEJRVXNzUTBGQlF5eFRRVUZUTEVWQlEyWXNUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkRXaXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlEyNUNMR3RDUVVGclFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVTTFRaXhGUVVORUxFdEJRVXNzUlVGQlJTeExRVUZMTEZsQlJWZ3NTMEZCU3l4RFFVRkRMRkZCUVZFc1IwRkRZaXhEUVVOVUxFTkJRVUU3UVVGRFRDeERRVUZESW4wPSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwic2NyL1wiICsgY2h1bmtJZCArIFwiLlwiICsge1wiMjVcIjpcImZhNzgyMGI3MzBhOWU5ZjJkMzhhXCIsXCIyOFwiOlwiZTMyZjBlMTQxZDc5M2U0YjQ4NjhcIixcIjcwXCI6XCJiN2VmNDIzNzU5NzllMjM5MjQ5N1wiLFwiMTIzXCI6XCI3ZTE4MmE3ZjBjYjM3ZjljMjA0YVwiLFwiMTYxXCI6XCI5MjM0YzYyZWZiMzBlMDgwMDIzN1wiLFwiMTc4XCI6XCJjZmFhMWQyYTQ1YjIzM2NiMDEyNFwiLFwiMTc5XCI6XCJkMmVhZmMxZGZmMzljOWJkMGE4YlwiLFwiMjAxXCI6XCIwYzExMjIxMTBiZDNhNDM3OWEzNVwiLFwiMjEzXCI6XCJlYzIzMTRmY2Y0MGY3NDdhNTEyM1wiLFwiMjI2XCI6XCI4NDI3Yjk1ZjE5Y2MzZDFkMzdkM1wiLFwiMjQ4XCI6XCIyMzVmNjA0ZjkyM2M3NjkwNGQzNVwiLFwiMjczXCI6XCI4M2RjNmI4ODMyZTc0OTg3MjRmYlwiLFwiMzIxXCI6XCJhYTRhZDg4NzA0OGQ3YmFlMmRhNlwiLFwiMzUyXCI6XCIwZjY5ZDM5MDMwYzAwZTQxYWNlMFwiLFwiNDE2XCI6XCIxM2QzZmY1N2IxMjQ1MGU3NjU0MVwiLFwiNTcxXCI6XCI5M2M5Mjg3MTQwZmI5M2M5NmFlMFwiLFwiNTcyXCI6XCIzN2UxYTcyNGIwMTVhNWNhOGI2MFwiLFwiNTgyXCI6XCI3ZWYxMTQ4NzA4MmY0ZjQ1MjcxZVwiLFwiNjYwXCI6XCI0MWZlYzI5NzgyYTNhOTU2MzY2ZVwiLFwiNjk0XCI6XCI1YTFmOTY2NDU4MmM2ODhhMjU1NlwiLFwiNjk1XCI6XCI4ODFmNzFlMTg2ZDZhYjUxOTFlMlwiLFwiNzY1XCI6XCJmZTU3NDg2ZTU3ZGQ4OGRkMmRkMVwiLFwiNzg3XCI6XCIwNGVkMmE3YWFiOTRhNDRlMjQxNlwiLFwiODMzXCI6XCI2NTI0NTgzNDVlNmUzZWZiMTUxY1wiLFwiODU5XCI6XCIyMTg4NTBkOGU0NjYyMTIxOGE1YVwifVtjaHVua0lkXSArIFwiLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ1MjQ6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtfdG9sb2tvYmFuX3VpXCJdID0gc2VsZltcIndlYnBhY2tDaHVua190b2xva29iYW5fdWlcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzQ0Nl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDYwMjApKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImxvY2FscyIsInZlcnNpb24iLCJST1VURVMiLCJtYWtlR290byIsInJvdXRlIiwicGFyYW1zIiwicGF0aCIsImh5ZHJhdGVSb3V0ZSIsImN1cnJlbnRSb3V0ZUNvbnRleHQiLCJ2YWx1ZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsImZpbmRSb3V0ZUZvclBhdGgiLCJiZXN0TWF0Y2giLCJwYXJ0cyIsIk9iamVjdCIsInZhbHVlcyIsIm1hdGNoIiwibWF0Y2hSb3V0ZSIsImRpc3RhbmNlIiwiY3VycmVudCIsImkiLCJsZW5ndGgiLCJwYXJ0Iiwic3RhcnRzV2l0aCIsIm5hbWUiLCJzdWJzdHJpbmciLCJoZWFkIiwidGFpbCIsImRlY2FwaXRhdGUiLCJqb2luIiwidGV4dCIsInBvcyIsImluZGV4T2YiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJjaGFyQXQiLCJjb25zdHJ1Y3RvciIsInNlY3VyaXR5IiwibGlzdGVuZXJzIiwiU2V0IiwiX3ZhbHVlIiwiaGFuZGxlSGFzaENoYW5nZSIsImV2ZW50Iiwib2xkSGFzaCIsInRoaXMiLCJleHRyYWN0SGFzaCIsIm9sZFVSTCIsIm5ld0hhc2giLCJuZXdVUkwiLCJhYnNIYXNoIiwiZW5zdXJlQWJzb2x1dGVIYXNoIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInNldEhhc2giLCJub25FbXB0eSIsInMiLCJ0cmltIiwiaHJlZiIsInRoZW4iLCJhZGRFdmVudExpc3RlbmVyIiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsImFkZCIsInJlbW92ZUxpc3RlbmVyIiwiZGVsZXRlIiwidGFyZ2V0SGFzaCIsImFjY2VzcyIsImF1dGhvcml6ZWRSb3V0ZSIsImZvckVhY2giLCJ1cmwiLCJVUkwiLCJzcGxpdCIsImZpbHRlciIsInBvcCIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJMYXlvdXQiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsImxheW91dCIsImZ1bGxzaXplIiwiY29sb3IiLCJvcmllbnRhdGlvbiIsInRlbXBsYXRlIiwiY2xhc3NGb3IiLCJ0eXBlIiwib25DbGljayIsImNsYXNzTmFtZXMiLCJpc1JvdXRlRXF1YWxUbyIsImFjdGl2ZSIsIlZpZXdzTGF5b3V0IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJoZWlnaHQiLCJmbGV4RGlyZWN0aW9uIiwicGFkZGluZyIsIm92ZXJmbG93IiwiTGluayIsImZsZXgiLCJQYWdlMCIsIlBhZ2UxIiwiUGFnZTIiLCJQYWdlMyIsIlBhZ2U0IiwiUGFnZTciLCJQYWdlMTAiLCJQYWdlMTMiLCJQYWdlMTYiLCJQYWdlMTkiLCJQYWdlMjIiLCJQYWdlMjUiLCJQYWdlMjgiLCJQYWdlMzEiLCJQYWdlMzQiLCJQYWdlMzciLCJQYWdlNDAiLCJQYWdlNDMiLCJQYWdlNDYiLCJQYWdlNDkiLCJQYWdlNTIiLCJQYWdlNTUiLCJQYWdlNTgiLCJQYWdlNjEiLCJBcHAiLCJsYW5nIiwiY29udGV4dCIsInNldFBhcmFtcyIsInVwZGF0ZSIsInVzZVJvdXRlQ29udGV4dCIsImZiIiwibHkwIiwicGcwIiwicGcxIiwicGcyIiwibHkzIiwicGczIiwicGc0IiwicGc3IiwicGcxMCIsInBnMTMiLCJwZzE2IiwicGcxOSIsInBnMjIiLCJwZzI1IiwicGcyOCIsInBnMzEiLCJwZzM0IiwicGczNyIsInBnNDAiLCJwZzQzIiwicGc0NiIsInBnNDkiLCJwZzUyIiwicGc1NSIsInBnNTgiLCJwZzYxIiwiUm91dGUiLCJQYWdlIiwiZmFsbGJhY2siLCJUZW1wbGF0ZSIsImVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiYXBwbHkiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVuZGVyIiwic3BsYXNoIiwiY2xhc3NMaXN0Iiwic2V0VGltZW91dCIsInBhcmVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVNwbGFzaFNjcmVlbiIsInN0YXJ0IiwicHJvcHMiLCJzdHlsZUNoaWxkIiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZmxleEJhc2lzIiwiZ3JpZFJvdyIsImdyaWRDb2x1bW4iLCJhbGlnblNlbGYiLCJqdXN0aWZ5U2VsZiIsInN0eWxlIiwic3R5bGVDb2xvciIsInRleHRDb2xvciIsImJhY2tDb2xvciIsInNoYWRvdyIsImRlZmF1bHRzIiwiYmFja2dyb3VuZENvbG9yIiwiYm94U2hhZG93Iiwic3R5bGVEaW1lbnNpb24iLCJ3aWR0aCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJjbGFzc25hbWVEaW1lbnNpb24iLCJmdWxsd2lkdGgiLCJmdWxsaGVpZ2h0IiwiZnVsbHdpZGUiLCJmdWxsbmFycm93IiwiY2xhc3NlcyIsInN0eWxlRGlzcGxheSIsImdhcCIsInJvd0dhcCIsImNvbHVtbkdhcCIsImp1c3RpZnlDb250ZW50IiwiZmxleFdyYXAiLCJhc3NpZ24iLCJzdHlsZUdhcCIsInN0eWxlRGlzcGxheUZsZXgiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRBdXRvRmxvdyIsImdyaWRBdXRvUm93cyIsImdyaWRBdXRvQ29sdW1ucyIsInBsYWNlSXRlbXMiLCJzdHlsZURpc3BsYXlHcmlkIiwic3R5bGVQb3NpdGlvbiIsInBvc2l0aW9uIiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiekluZGV4Iiwic3R5bGVTcGFjZSIsImJvcmRlclJhZGl1cyIsIm1hcmdpbiIsImNzc0ZvckNvbG9yIiwiYWxwaGEiLCJvcGFjaXR5IiwiTWF0aCIsInJvdW5kIiwidG9PcGFjaXR5IiwiY3NzRm9yQ29sb3JPbiIsImNzc0ZvckdhcHMiLCJ1bml0IiwiQXJyYXkiLCJpc0FycmF5IiwiY3NzRm9yR2FwIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsIkNvbG9yIiwiY3R4IiwiX2N0eCIsImdldENvbnRleHQiLCJFcnJvciIsIm1ha2VHcmFkaWVudCIsInNpemUiLCJmcm9tIiwiY29sb3JzIiwiZmFjdG9yIiwibWl4IiwiaW5wdXRzIiwic291cmNlIiwic3RlcHMiLCJtaW4iLCJmbG9vciIsImNvbG9yQSIsImNvbG9yQiIsImIiLCJ0b1N0cmluZyIsImlzTGlnaHQiLCJjb2xvclNvdXJjZSIsImlzRGFyayIsIlIiLCJHIiwiQiIsIkEiLCJjbGVhclJlY3QiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImltZyIsImdldEltYWdlRGF0YSIsInIiLCJnIiwiYSIsImRhdGEiLCJjIiwicGFkU3RhcnQiLCJsdW1pbmFuY2UiLCJzUmdiVG9MaW5lYXIiLCJwZXJjZWl2ZWRMaWdodG5lc3MiLCJZIiwicG93IiwiREVGQVVMVF9DT0xPUl9ORVVUUkFMIiwiVGhlbWUiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJfZyIsIl9oIiwiX2oiLCJfayIsIl9sIiwidmFycyIsIlhTIiwiUyIsIk0iLCJMIiwiWEwiLCJ0ZXh0TGlnaHQiLCJ0ZXh0RGFyayIsImFkZENvbG9yIiwiaW5wdXQiLCJlcnJvciIsInZhbGlkIiwiYWRkQ29sb3JWYXJzIiwibWFrZUNvbG9ycyIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJ0ZXJ0aWFyeSIsIm5ldXRyYWwiLCJ5Iiwib2JqIiwiaW5kZXgiLCJ0YXJnZXQiLCJnbG9iYWxUaGlzIiwiYm9keSIsImtleSIsInZhbCIsInNldFByb3BlcnR5Iiwic2lnbmF0dXJlIiwiRGF0ZSIsIm5vdyIsImNvbG9yUHJpbWFyeSIsImxldmVsIiwiY2xzIiwiY29sb3JTZWNvbmRhcnkiLCJjb2xvclRlcnRpYXJ5IiwiY29sb3JOZXV0cmFsIiwiaW5pdCIsImxpbmVzIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwiZ3JvdXAiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwiY29sb3JEZWYiLCJkYXJrIiwibGlnaHQiLCJ1bnNoaWZ0IiwiZXhwYW5kQ29sb3JSYW5nZSIsIiQiLCJWaWV3QnV0dG9uIiwicGFydGlhbFByb3BzIiwic2V0RGVmYXVsdHMiLCJlbmFibGVkIiwiREVGQVVMVF9DTElDS19IQU5ETEVSIiwidmFyaWFudCIsInRoaWNrbmVzcyIsImdldE1haW5BbHBoYUNvbG9yIiwiZ2V0TWFpbkNvbG9yIiwiZ2V0VGV4dENvbG9yIiwic3R5bGVDb21tb24iLCJJY29uIiwiaWNvbiIsIkJ1dHRvbiIsIkJvb2xlYW4iLCJkaXNhYmxlZCIsImxhYmVsIiwiVmlld1BhbmVsIiwiZm9udFNpemUiLCJhc3BlY3RSYXRpbyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsIngiLCJzdHlsZU92ZXJmbG93IiwiUGFuZWwiLCJWaWV3U3RyaXAiLCJ0ZW1wbGF0ZURlZiIsImluY2x1ZGVzIiwiU3RyaXAiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJmdWxmaWxsZWQiLCJqIiwia2V5cyIsImV2ZXJ5Iiwic3BsaWNlIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiZSIsImNodW5rSWQiLCJQcm9taXNlIiwiYWxsIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibCIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwiY2hhcnNldCIsInRpbWVvdXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsInNyYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJiaW5kIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInRlc3QiLCJyZXBsYWNlIiwicCIsImluc3RhbGxlZENodW5rcyIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=