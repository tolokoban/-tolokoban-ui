"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[213],{3514:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),r.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const a=r},6630:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([n.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),r.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const a=r},7599:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),r.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const a=r},3714:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),r.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const a=r},2874:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([n.id,".\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx {\n    display: grid;\n    gap: 1px;\n    place-items: stretch;\n    grid-template-columns: 1fr auto;\n    box-shadow: var(--theme-shadow-1);\n    margin: 2px;\n}\n\n.\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx > input {\n    border: none;\n    height: 2em;\n    line-height: 2em;\n    padding: 0 0.5em;\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n}\n\n.\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx > div {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    overflow: hidden;\n    gap: 1px;\n}\n\n.\\---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx > div > button {\n    all: inherit;\n    text-transform: uppercase;\n    flex: 1 1 auto;\n    width: 2em;\n    cursor: pointer;\n    display: grid;\n    place-items: center;\n    position: relative;\n    padding: 0;\n    margin: 0;\n    border-radius: 0.25em;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/InputMultiText/InputMultiText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,QAAQ;IACR,oBAAoB;IACpB,+BAA+B;IAC/B,iCAAiC;IACjC,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,gBAAgB;IAChB,gBAAgB;IAChB,0CAA0C;IAC1C,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,eAAe;IACf,6BAA6B;IAC7B,oBAAoB;IACpB,gBAAgB;IAChB,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,cAAc;IACd,UAAU;IACV,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,qBAAqB;AACzB",sourcesContent:[".InputMultiText {\n    display: grid;\n    gap: 1px;\n    place-items: stretch;\n    grid-template-columns: 1fr auto;\n    box-shadow: var(--theme-shadow-1);\n    margin: 2px;\n}\n\n.InputMultiText > input {\n    border: none;\n    height: 2em;\n    line-height: 2em;\n    padding: 0 0.5em;\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n}\n\n.InputMultiText > div {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    align-items: stretch;\n    overflow: hidden;\n    gap: 1px;\n}\n\n.InputMultiText > div > button {\n    all: inherit;\n    text-transform: uppercase;\n    flex: 1 1 auto;\n    width: 2em;\n    cursor: pointer;\n    display: grid;\n    place-items: center;\n    position: relative;\n    padding: 0;\n    margin: 0;\n    border-radius: 0.25em;\n}\n"],sourceRoot:""}]),r.locals={InputMultiText:"---lib-dist-view-InputMultiText-InputMultiText-module_InputMultiText_YQQ3zx"};const a=r},5036:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),i=t.n(o),l=t(6314),r=t.n(l)()(i());r.push([n.id,".\\---lib-dist-view-Label-Label-module_LabelContent_YYb190 {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.\\---lib-dist-view-Label-Label-module_Label_mUUrOO {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,cAAc;IACd,mBAAmB;AACvB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.667;\n    margin-right: 0.5em;\n}\n"],sourceRoot:""}]),r.locals={LabelContent:"---lib-dist-view-Label-Label-module_LabelContent_YYb190",Label:"---lib-dist-view-Label-Label-module_Label_mUUrOO"};const a=r},9213:(n,e,t)=>{t.r(e),t.d(e,{default:()=>k});var o=t(4848),i=t(2296),l=t(8464),r=t(6540),a=t(6781),s=t(5013),A=t(3357),c=t(6166),u=t(5072),d=t.n(u),m=t(7825),h=t.n(m),g=t(7659),p=t.n(g),C=t(5056),v=t.n(C),x=t(540),w=t.n(x),I=t(1113),b=t.n(I),f=t(2874),B={};B.styleTagTransform=b(),B.setAttributes=v(),B.insert=p().bind(null,"head"),B.domAPI=h(),B.insertStyleElement=w(),d()(f.A,B);const y=f.A&&f.A.locals?f.A.locals:void 0;var j=t(5895);function _(n){const{value:e,label:t,onChange:i,onLangChange:l,renderLang:u=((n,e)=>e?(0,o.jsx)("b",{children:n}):(0,o.jsx)("span",{children:n}))}=n,[d,m,h]=function({value:n,onChange:e=(()=>{}),lang:t,onLangChange:o}){var i;const l=Object.keys(n);r.useEffect((()=>{0===l.length&&e({[navigator.language]:""})}),[n,e,l.length]);const a=function(n,e){if(0!==n.length){if(n.includes(e))return e;for(const t of n)if(t.startsWith(e))return t;for(const t of n)if(t.toLowerCase().startsWith(e.toLowerCase()))return t;return n[0]}}(l,t);return r.useEffect((()=>{a&&a!==t&&o(a)}),[a,o,t]),[l,null!=a?a:"",null!==(i=n[null!=a?a:""])&&void 0!==i?i:""]}(n),g=Object.assign(Object.assign(Object.assign({},(0,s._)(n)),(0,A.r)(n)),(0,c.G)(n));return(0,o.jsx)(j.a,{value:t,fullwidth:n.fullwidth,children:(0,o.jsxs)("div",{className:a.Sx.classNames.join(n.className,y.InputMultiText),style:g,children:[(0,o.jsx)("input",{value:h,onChange:n=>{const t=n.target.value;null==i||i(Object.assign(Object.assign({},e),{[m]:t}))}}),(0,o.jsx)("div",{children:d.map((n=>(0,o.jsx)("button",{onClick:()=>l(n),style:{background:`var(--theme-color-${n===m?"primary-6":"primary-3"})`,color:`var(--theme-color-on-${n===m?"primary-6":"primary-3"})`},children:u(n,n===m)},n)))})]})})}function H(){const[n,e]=r.useState("en"),[t,i]=r.useState({en:"Hello world!",fr:"Salut le monde !",it:"Ciao mondo!"});return(0,o.jsx)("div",{children:(0,o.jsx)(_,{label:"Welcome text",lang:n,onLangChange:e,value:t,onChange:i})})}function T(){return(0,o.jsx)(i.A,{title:'import { ViewInputMultiText } from "@tolokoban/ui"',children:(0,o.jsx)(l.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputMultiText } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [lang, setLang] = React.useState("en")\n    const [value, setValue] = React.useState<Record<string, string>>({\n        en: "Hello world!",\n        fr: "Salut le monde !",\n        it: "Ciao mondo!",\n    })\n    return (\n        <div>\n            <ViewInputMultiText\n                label="Welcome text"\n                lang={lang}\n                onLangChange={setLang}\n                value={value}\n                onChange={setValue}\n            />\n        </div>\n    )\n}\n',children:(0,o.jsx)(H,{})})})}function k(){return(0,o.jsx)(T,{})}},9327:(n,e,t)=>{t.d(e,{f:()=>I});var o=t(4848),i=t(9309);function l(n,e="    ",t=-1){const o="".padEnd(Math.max(0,t)*e.length,e);return"string"==typeof n?`${o}${n}`:n.map((n=>l(n,e,t+1))).join("\n")}var r=t(5072),a=t.n(r),s=t(7825),A=t.n(s),c=t(7659),u=t.n(c),d=t(5056),m=t.n(d),h=t(540),g=t.n(h),p=t(1113),C=t.n(p),v=t(6630),x={};x.styleTagTransform=C(),x.setAttributes=m(),x.insert=u().bind(null,"head"),x.domAPI=A(),x.insertStyleElement=g(),a()(v.A,x);const w=v.A&&v.A.locals?v.A.locals:void 0;function I(n){var e;return(0,o.jsx)(i.A,{className:b(n),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:l(null!==(e=n.children)&&void 0!==e?e:"")})}function b({className:n}){const e=[w.Highlight];return n&&e.push(n),e.join(" ")}},8464:(n,e,t)=>{t.d(e,{A:()=>V});var o=t(4848),i=t(6781),l=t(7049),r=t(6540),a=t(9550),s=t(2182),A=t(5726),c=t(9327),u=t(5072),d=t.n(u),m=t(7825),h=t.n(m),g=t(7659),p=t.n(g),C=t(5056),v=t.n(C),x=t(540),w=t.n(x),I=t(1113),b=t.n(I),f=t(3514),B={};B.styleTagTransform=b(),B.setAttributes=v(),B.insert=p().bind(null,"head"),B.domAPI=h(),B.insertStyleElement=w(),d()(f.A,B);const y=f.A&&f.A.locals?f.A.locals:void 0,j=i.Sx.classNames;function _({className:n,children:e}){const[t,i]=r.useState(!1);return(0,o.jsxs)("div",{className:j.join(n,y.Code),children:[(0,o.jsxs)(a.y,{variant:"text",onClick:()=>i(!t),children:[t?(0,o.jsx)(s.A,{}):(0,o.jsx)(A.A,{}),(0,o.jsx)("div",{children:"Example's code:"})]}),t&&(0,o.jsx)(c.f,{children:e})]})}var H=t(7599),T={};T.styleTagTransform=b(),T.setAttributes=v(),T.insert=p().bind(null,"head"),T.domAPI=h(),T.insertStyleElement=w(),d()(H.A,T);const k=H.A&&H.A.locals?H.A.locals:void 0,L=i.Sx.classNames;function V({className:n,example:e,children:t}){return(0,o.jsxs)(l.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,o.jsx)("div",{className:L.join(n,k.ViewDemo),children:t}),(0,o.jsx)("hr",{}),(0,o.jsx)(_,{children:e})]})}},2296:(n,e,t)=>{t.d(e,{A:()=>b});var o=t(4848),i=t(6781),l=t(7049),r=t(5072),a=t.n(r),s=t(7825),A=t.n(s),c=t(7659),u=t.n(c),d=t(5056),m=t.n(d),h=t(540),g=t.n(h),p=t(1113),C=t.n(p),v=t(3714),x={};x.styleTagTransform=C(),x.setAttributes=m(),x.insert=u().bind(null,"head"),x.domAPI=A(),x.insertStyleElement=g(),a()(v.A,x);const w=v.A&&v.A.locals?v.A.locals:void 0,I=i.Sx.classNames;function b({className:n,title:e,children:t}){return(0,o.jsxs)("div",{className:I.join(n,w.ViewDocumentation),children:[(0,o.jsx)(l.s,{margin:0,padding:"M",color:"primary-2",children:e}),(0,o.jsx)(l.s,{margin:0,padding:"M",overflow:"auto",children:t})]})}},5895:(n,e,t)=>{t.d(e,{a:()=>f});var o=t(4848),i=t(6540),l=t(6781),r=t(5072),a=t.n(r),s=t(7825),A=t.n(s),c=t(7659),u=t.n(c),d=t(5056),m=t.n(d),h=t(540),g=t.n(h),p=t(1113),C=t.n(p),v=t(5036),x={};x.styleTagTransform=C(),x.setAttributes=m(),x.insert=u().bind(null,"head"),x.domAPI=A(),x.insertStyleElement=g(),a()(v.A,x);const w=v.A&&v.A.locals?v.A.locals:void 0;var I=t(7049);const b=l.Sx.classNames;function f({color:n,className:e,value:t,title:l,box:r="column",fullwidth:a,children:s}){const A=`labelled/${i.useId()}`;if(!t)return(0,o.jsx)(o.Fragment,{children:s});const c={};n&&(c.color=`var(--theme-color-${n})`);const u=(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("label",{htmlFor:A,title:l,className:b.join(e,w.Label),style:c,children:t}),s&&(0,o.jsx)("div",{ref:n=>{if(!n)return;const e=n.querySelector("input,textarea,button,meter,output,progress,select");e&&e.setAttribute("id",A)},className:w.LabelContent,children:s})]});switch(r){case"row":return(0,o.jsx)(I.s,{display:a?"flex":"inline-flex",flexDirection:"row",alignItems:"center",gap:"1em",children:u});case"column":return(0,o.jsx)(I.s,{display:a?"flex":"inline-flex",flexDirection:"column",alignItems:"stretch",gap:"0",children:u});default:return u}}},2182:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(n,e,t)=>{t.d(e,{A:()=>o});const o=(0,t(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,