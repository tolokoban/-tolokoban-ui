"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[810],{3514:(n,o,e)=>{e.d(o,{A:()=>a});var i=e(1354),r=e.n(i),t=e(6314),l=e.n(t)()(r());l.push([n.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),l.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const a=l},6630:(n,o,e)=>{e.d(o,{A:()=>a});var i=e(1354),r=e.n(i),t=e(6314),l=e.n(t)()(r());l.push([n.id,".src-view-Highlight-Highlight-module_Highlight_PXzxR3 {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .comment {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-keyword {\n    font-weight: bolder;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-tag {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-string {\n    color: var(--theme-color-primary-7);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-function {\n    color: var(--theme-color-tertiary-5);\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-comment {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.src-view-Highlight-Highlight-module_Highlight_PXzxR3 .hljs-attr {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n","",{version:3,sources:["webpack://./src/view/Highlight/Highlight.module.css"],names:[],mappings:"AAAA;IACI,wCAAwC;IACxC,sCAAsC;IACtC,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,wCAAwC;IACxC,sCAAsC;AAC1C;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,qCAAqC;AACzC;;AAEA;IACI,mCAAmC;AACvC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,sCAAsC;AAC1C",sourcesContent:[".Highlight {\n    background: var(--theme-color-primary-1);\n    color: var(--theme-color-on-primary-1);\n    padding: 0.5em;\n    max-width: 800px;\n}\n\n.Highlight :global(.comment) {\n    background: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n}\n\n.Highlight :global(.hljs-keyword) {\n    font-weight: bolder;\n}\n\n.Highlight :global(.hljs-tag) {\n    font-weight: bold;\n    color: var(--theme-color-secondary-5);\n}\n\n.Highlight :global(.hljs-string) {\n    color: var(--theme-color-primary-7);\n}\n\n.Highlight :global(.hljs-function) {\n    color: var(--theme-color-tertiary-5);\n}\n\n.Highlight :global(.hljs-comment) {\n    color: var(--theme-color-neutral-9);\n    font-style: italic;\n    font-family: sans-serif;\n    opacity: 0.8;\n}\n\n.Highlight :global(.hljs-attr) {\n    font-weight: normal;\n    color: var(--theme-color-on-neutral-1);\n}\n"],sourceRoot:""}]),l.locals={Highlight:"src-view-Highlight-Highlight-module_Highlight_PXzxR3"};const a=l},7599:(n,o,e)=>{e.d(o,{A:()=>a});var i=e(1354),r=e.n(i),t=e(6314),l=e.n(t)()(r());l.push([n.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),l.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const a=l},3714:(n,o,e)=>{e.d(o,{A:()=>a});var i=e(1354),r=e.n(i),t=e(6314),l=e.n(t)()(r());l.push([n.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),l.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const a=l},7810:(n,o,e)=>{e.r(o),e.d(o,{default:()=>A});var i=e(4848),r=e(2296),t=e(8464),l=e(8188),a=e(5679),s=e(2665);function c(){return(0,i.jsxs)("div",{children:[(0,i.jsxs)("p",{children:["A ",(0,i.jsx)("b",{children:"Dialog"})," looks like a window with a potential header and button in the footer:"]}),(0,i.jsx)(l.a,{title:"This is your last warning!!!",bodyColor:"primary-1",headColor:"secondary-7",footColor:"primary-3",shadow:3,padding:"M",buttonCancel:{children:"Maybe not...",icon:a.A,onClick:()=>alert("Abort...")},buttonValidate:{children:"Let do this! Yeah!!",icon:s.A,onClick:()=>alert("BOOM!!!")},children:(0,i.jsxs)("p",{children:["Are you sure you want to destroy your computer with an",(0,i.jsx)("b",{children:"atomic explosion"}),"?"]})})]})}function h(){return(0,i.jsx)(r.A,{title:'import { ViewDialog } from "@tolokoban/ui"',children:(0,i.jsx)(t.A,{description:"# Default usage\n",example:'import React from "react"\nimport { IconClose, IconOk, ViewDialog } from "@tolokoban/ui"\n\nexport default function Demo() {\n    return (\n        <div>\n            <p>\n                A <b>Dialog</b> looks like a window with a potential header and\n                button in the footer:\n            </p>\n            <ViewDialog\n                title="This is your last warning!!!"\n                bodyColor="primary-1"\n                headColor="secondary-7"\n                footColor="primary-3"\n                shadow={3}\n                padding="M"\n                buttonCancel={{\n                    children: "Maybe not...",\n                    icon: IconClose,\n                    onClick: () => alert("Abort..."),\n                }}\n                buttonValidate={{\n                    children: "Let do this! Yeah!!",\n                    icon: IconOk,\n                    onClick: () => alert("BOOM!!!"),\n                }}\n            >\n                <p>\n                    Are you sure you want to destroy your computer with an\n                    <b>atomic explosion</b>?\n                </p>\n            </ViewDialog>\n        </div>\n    )\n}\n',children:(0,i.jsx)(c,{})})})}function A(){return(0,i.jsx)(h,{})}},9327:(n,o,e)=>{e.d(o,{f:()=>b});var i=e(4848),r=e(9309);function t(n,o="    ",e=-1){const i="".padEnd(Math.max(0,e)*o.length,o);return"string"==typeof n?`${i}${n}`:n.map((n=>t(n,o,e+1))).join("\n")}var l=e(5072),a=e.n(l),s=e(7825),c=e.n(s),h=e(7659),A=e.n(h),d=e(5056),m=e.n(d),g=e(540),u=e.n(g),C=e(1113),w=e.n(C),p=e(6630),v={};v.styleTagTransform=w(),v.setAttributes=m(),v.insert=A().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=u(),a()(p.A,v);const y=p.A&&p.A.locals?p.A.locals:void 0;function b(n){var o;return(0,i.jsx)(r.A,{className:x(n),showLineNumbers:!0,useInlineStyles:!1,wrapLines:!0,children:t(null!==(o=n.children)&&void 0!==o?o:"")})}function x({className:n}){const o=[y.Highlight];return n&&o.push(n),o.join(" ")}},8464:(n,o,e)=>{e.d(o,{A:()=>L});var i=e(4848),r=e(6781),t=e(7049),l=e(6540),a=e(9550),s=e(2182),c=e(5726),h=e(9327),A=e(5072),d=e.n(A),m=e(7825),g=e.n(m),u=e(7659),C=e.n(u),w=e(5056),p=e.n(w),v=e(540),y=e.n(v),b=e(1113),x=e.n(b),f=e(3514),H={};H.styleTagTransform=x(),H.setAttributes=p(),H.insert=C().bind(null,"head"),H.domAPI=g(),H.insertStyleElement=y(),d()(f.A,H);const I=f.A&&f.A.locals?f.A.locals:void 0,j=r.Sx.classNames;function k({className:n,children:o}){const[e,r]=l.useState(!1);return(0,i.jsxs)("div",{className:j.join(n,I.Code),children:[(0,i.jsxs)(a.y,{variant:"text",onClick:()=>r(!e),children:[e?(0,i.jsx)(s.A,{}):(0,i.jsx)(c.A,{}),(0,i.jsx)("div",{children:"Example's code:"})]}),e&&(0,i.jsx)(h.f,{children:o})]})}var V=e(7599),_={};_.styleTagTransform=x(),_.setAttributes=p(),_.insert=C().bind(null,"head"),_.domAPI=g(),_.insertStyleElement=y(),d()(V.A,_);const D=V.A&&V.A.locals?V.A.locals:void 0,B=r.Sx.classNames;function L({className:n,example:o,children:e}){return(0,i.jsxs)(t.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,i.jsx)("div",{className:B.join(n,D.ViewDemo),children:e}),(0,i.jsx)("hr",{}),(0,i.jsx)(k,{children:o})]})}},2296:(n,o,e)=>{e.d(o,{A:()=>x});var i=e(4848),r=e(6781),t=e(7049),l=e(5072),a=e.n(l),s=e(7825),c=e.n(s),h=e(7659),A=e.n(h),d=e(5056),m=e.n(d),g=e(540),u=e.n(g),C=e(1113),w=e.n(C),p=e(3714),v={};v.styleTagTransform=w(),v.setAttributes=m(),v.insert=A().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=u(),a()(p.A,v);const y=p.A&&p.A.locals?p.A.locals:void 0,b=r.Sx.classNames;function x({className:n,title:o,children:e}){return(0,i.jsxs)("div",{className:b.join(n,y.ViewDocumentation),children:[(0,i.jsx)(t.s,{margin:0,padding:"M",color:"primary-2",children:o}),(0,i.jsx)(t.s,{margin:0,padding:"M",overflow:"auto",children:e})]})}},2182:(n,o,e)=>{e.d(o,{A:()=>i});const i=(0,e(8471).B)("M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z","IconArrowDown")},5726:(n,o,e)=>{e.d(o,{A:()=>i});const i=(0,e(8471).B)("M4,15V9H12V4.16L19.84,12L12,19.84V15H4Z","IconArrowRight")},5679:(n,o,e)=>{e.d(o,{A:()=>i});const i=(0,e(8471).B)("M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z","IconClose")},2665:(n,o,e)=>{e.d(o,{A:()=>i});const i=(0,e(8471).B)("M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z","IconOk")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,