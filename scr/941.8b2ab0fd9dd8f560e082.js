"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[941],{3514:(e,n,o)=>{o.d(n,{A:()=>r});var t=o(1354),i=o.n(t),s=o(6314),a=o.n(s)()(i());a.push([e.id,".src-view-Code-Code-module_Code_PeSzTL {\n    \n}","",{version:3,sources:["webpack://./src/view/Code/Code.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".Code {\n    \n}"],sourceRoot:""}]),a.locals={Code:"src-view-Code-Code-module_Code_PeSzTL"};const r=a},7599:(e,n,o)=>{o.d(n,{A:()=>r});var t=o(1354),i=o.n(t),s=o(6314),a=o.n(s)()(i());a.push([e.id,".src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV {\n    \n}","",{version:3,sources:["webpack://./src/view/ViewDemo/ViewDemo.module.css"],names:[],mappings:"AAAA;;AAEA",sourcesContent:[".ViewDemo {\n    \n}"],sourceRoot:""}]),a.locals={ViewDemo:"src-view-ViewDemo-ViewDemo-module_ViewDemo_vx9asV"};const r=a},3714:(e,n,o)=>{o.d(n,{A:()=>r});var t=o(1354),i=o.n(t),s=o(6314),a=o.n(s)()(i());a.push([e.id,".src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n","",{version:3,sources:["webpack://./src/view/ViewDocumentation/ViewDocumentation.module.css"],names:[],mappings:"AAAA;IACI,8CAA8C;IAC9C,sCAAsC;IACtC,2BAA2B;IAC3B,SAAS;AACb",sourcesContent:[".ViewDocumentation > header {\n    background-color: var(--theme-color-primary-2);\n    color: var(--theme-color-on-primary-2);\n    padding: var(--theme-gap-M);\n    margin: 0;\n}\n"],sourceRoot:""}]),a.locals={ViewDocumentation:"src-view-ViewDocumentation-ViewDocumentation-module_ViewDocumentation_kYkS5d"};const r=a},6941:(e,n,o)=>{o.r(n),o.d(n,{default:()=>d});var t=o(4848),i=o(2296),s=o(8464),a=o(6540),r=o(7049),l=o(3770);function c(){const[e,n]=a.useState(30),[o,i]=a.useState(1.975);return(0,t.jsxs)(r.s,{display:"grid",gridTemplateColumns:"auto 100px",gap:"S",padding:"L",color:"neutral-6",width:"320px",placeItems:"center start",children:[(0,t.jsx)(l.D,{value:e,onChange:n,label:"Liters of oil:",width:"3em"}),(0,t.jsx)(l.D,{value:o,onChange:i,label:"Price per liter:",width:"4em"}),(0,t.jsx)("hr",{style:{gridColumn:"1/-1",width:"100%"}}),(0,t.jsx)("div",{children:"Total to pay:"}),(0,t.jsx)("output",{children:(0,t.jsx)("b",{children:e*o})})]})}function u(){return(0,t.jsx)(i.A,{title:'import { ViewInputNumber } from "@tolokoban/ui"',children:(0,t.jsx)(s.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputNumber, ViewPanel } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [a, setA] = React.useState(30)\n    const [b, setB] = React.useState(1.975)\n    return (\n        <ViewPanel\n            display="grid"\n            gridTemplateColumns="auto 100px"\n            gap="S"\n            padding="L"\n            color="neutral-6"\n            width="320px"\n            placeItems="center start"\n        >\n            <ViewInputNumber\n                value={a}\n                onChange={setA}\n                label="Liters of oil:"\n                width="3em"\n            />\n            <ViewInputNumber\n                value={b}\n                onChange={setB}\n                label="Price per liter:"\n                width="4em"\n            />\n            <hr\n                style={{\n                    gridColumn: "1/-1",\n                    width: "100%",\n                }}\n            />\n            <div>Total to pay:</div>\n            <output>\n                <b>{a * b}</b>\n            </output>\n        </ViewPanel>\n    )\n}\n',children:(0,t.jsx)(c,{})})})}function d(){return(0,t.jsx)(u,{})}},8464:(e,n,o)=>{o.d(n,{A:()=>T});var t=o(4848),i=o(6781),s=o(7049),a=o(6540),r=o(9550),l=o(2182),c=o(5726),u=o(9327),d=o(5072),m=o.n(d),A=o(7825),p=o.n(A),h=o(7659),w=o.n(h),v=o(5056),b=o.n(v),g=o(540),x=o.n(g),C=o(1113),V=o.n(C),j=o(3514),D={};D.styleTagTransform=V(),D.setAttributes=b(),D.insert=w().bind(null,"head"),D.domAPI=p(),D.insertStyleElement=x(),m()(j.A,D);const N=j.A&&j.A.locals?j.A.locals:void 0,f=i.Sx.classNames;function I({className:e,children:n}){const[o,i]=a.useState(!1);return(0,t.jsxs)("div",{className:f.join(e,N.Code),children:[(0,t.jsxs)(r.y,{variant:"text",onClick:()=>i(!o),children:[o?(0,t.jsx)(l.A,{}):(0,t.jsx)(c.A,{}),(0,t.jsx)("div",{children:"Example's code:"})]}),o&&(0,t.jsx)(u.f,{children:n})]})}var S=o(7599),y={};y.styleTagTransform=V(),y.setAttributes=b(),y.insert=w().bind(null,"head"),y.domAPI=p(),y.insertStyleElement=x(),m()(S.A,y);const k=S.A&&S.A.locals?S.A.locals:void 0,_=i.Sx.classNames;function T({className:e,example:n,children:o}){return(0,t.jsxs)(s.s,{color:"neutral-4",padding:"M",margin:"M",children:[(0,t.jsx)("div",{className:_.join(e,k.ViewDemo),children:o}),(0,t.jsx)("hr",{}),(0,t.jsx)(I,{children:n})]})}},2296:(e,n,o)=>{o.d(n,{A:()=>V});var t=o(4848),i=o(6781),s=o(7049),a=o(5072),r=o.n(a),l=o(7825),c=o.n(l),u=o(7659),d=o.n(u),m=o(5056),A=o.n(m),p=o(540),h=o.n(p),w=o(1113),v=o.n(w),b=o(3714),g={};g.styleTagTransform=v(),g.setAttributes=A(),g.insert=d().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=h(),r()(b.A,g);const x=b.A&&b.A.locals?b.A.locals:void 0,C=i.Sx.classNames;function V({className:e,title:n,children:o}){return(0,t.jsxs)("div",{className:C.join(e,x.ViewDocumentation),children:[(0,t.jsx)(s.s,{margin:0,padding:"M",color:"primary-2",children:n}),(0,t.jsx)(s.s,{margin:0,padding:"M",overflow:"auto",children:o})]})}},3770:(e,n,o)=>{o.d(n,{D:()=>s});var t=o(4848),i=o(1323);function s(e){var n,o;const s=null!==(n=e.min)&&void 0!==n?n:Number.NEGATIVE_INFINITY,a=null!==(o=e.max)&&void 0!==o?o:Number.POSITIVE_INFINITY,r=Object.assign(Object.assign({},e),{value:`${e.value}`,onChange:n=>{const o=Number(n);Number.isFinite(o)&&e.onChange(o)},type:"number",validator:e=>{const n=Number(e);return Number.isFinite(n)&&n>=s&&n<=a}});return(0,t.jsx)(i.H,Object.assign({},r))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,