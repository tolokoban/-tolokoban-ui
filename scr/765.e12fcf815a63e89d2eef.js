"use strict";(self.webpackChunk_tolokoban_ui=self.webpackChunk_tolokoban_ui||[]).push([[765],{1624:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),l=t.n(o),r=t(6314),i=t.n(r)()(l());i.push([n.id,".\\---lib-dist-view-InputText-InputText-module_InputText_gH580l {\n    font: inherit;\n    background: transparent;\n    width: 100%;\n    border: 1px solid color-mix(\n        in srgb,\n        currentColor,\n        transparent 90%\n    );\n    background-color: color-mix(\n        in srgb,\n        var(--theme-color-input),\n        transparent 90%\n    );\n    padding: 0 0.5em;\n    line-height: 2em;\n    height: 2em;\n    color: inherit;\n    border-bottom: 2px solid currentColor;\n    transition: all 0.2s;\n}\n\n.\\---lib-dist-view-InputText-InputText-module_InputText_gH580l:focus {\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n    border: none;\n    outline: none;\n}\n\n.\\---lib-dist-view-InputText-InputText-module_InputText_gH580l.\\---lib-dist-view-InputText-InputText-module_invalid_FGNLMM {\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/InputText/InputText.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uBAAuB;IACvB,WAAW;IACX;;;;KAIC;IACD;;;;KAIC;IACD,gBAAgB;IAChB,gBAAgB;IAChB,WAAW;IACX,cAAc;IACd,qCAAqC;IACrC,oBAAoB;AACxB;;AAEA;IACI,0CAA0C;IAC1C,kCAAkC;IAClC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,0CAA0C;IAC1C,kCAAkC;AACtC",sourcesContent:[".InputText {\n    font: inherit;\n    background: transparent;\n    width: 100%;\n    border: 1px solid color-mix(\n        in srgb,\n        currentColor,\n        transparent 90%\n    );\n    background-color: color-mix(\n        in srgb,\n        var(--theme-color-input),\n        transparent 90%\n    );\n    padding: 0 0.5em;\n    line-height: 2em;\n    height: 2em;\n    color: inherit;\n    border-bottom: 2px solid currentColor;\n    transition: all 0.2s;\n}\n\n.InputText:focus {\n    background-color: var(--theme-color-input);\n    color: var(--theme-color-on-input);\n    border: none;\n    outline: none;\n}\n\n.InputText.invalid {\n    background-color: var(--theme-color-error);\n    color: var(--theme-color-on-error);\n}\n"],sourceRoot:""}]),i.locals={InputText:"---lib-dist-view-InputText-InputText-module_InputText_gH580l",invalid:"---lib-dist-view-InputText-InputText-module_invalid_FGNLMM"};const a=i},5036:(n,e,t)=>{t.d(e,{A:()=>a});var o=t(1354),l=t.n(o),r=t(6314),i=t.n(r)()(l());i.push([n.id,".\\---lib-dist-view-Label-Label-module_LabelContent_YYb190 {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.\\---lib-dist-view-Label-Label-module_Label_mUUrOO {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.5;\n}\n","",{version:3,sources:["webpack://./../lib/dist/view/Label/Label.module.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,SAAS;IACT,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,cAAc;IACd,YAAY;AAChB",sourcesContent:[".LabelContent {\n    all: inherit;\n    margin: 0;\n    padding: 0;\n    display: contents;\n}\n\n.Label {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    font-size: 90%;\n    opacity: 0.5;\n}\n"],sourceRoot:""}]),i.locals={LabelContent:"---lib-dist-view-Label-Label-module_LabelContent_YYb190",Label:"---lib-dist-view-Label-Label-module_Label_mUUrOO"};const a=i},4765:(n,e,t)=>{t.r(e),t.d(e,{default:()=>c});var o=t(4848),l=t(2296),r=t(5865),i=t(6540),a=t(1323);function s(){const[n,e]=i.useState("Tolokoban");return(0,o.jsxs)("p",{children:["The name ",(0,o.jsx)(a.H,{value:n,onChange:e})," is spelled ",(0,o.jsx)("code",{children:n.split("").reverse().join("")})," in reverse."]})}function u(){return(0,o.jsx)(l.A,{title:'import { ViewInputText } from "@tolokoban/ui"',children:(0,o.jsx)(r.A,{description:"# Default usage\n",example:'import React from "react"\nimport { ViewInputText } from "@tolokoban/ui"\n\nexport default function Demo() {\n    const [name, setName] = React.useState("Tolokoban")\n    return (\n        <p>\n            The name <ViewInputText value={name} onChange={setName} /> is\n            spelled <code>{name.split("").reverse().join("")}</code> in reverse.\n        </p>\n    )\n}\n',children:(0,o.jsx)(s,{})})})}function c(){return(0,o.jsx)(u,{})}},1323:(n,e,t)=>{t.d(e,{H:()=>w});var o=t(4848),l=t(6540),r=t(9142),i=t(9494),a=t(5895),s=t(5072),u=t.n(s),c=t(7825),A=t.n(c),d=t(7659),p=t.n(d),m=t(5056),b=t.n(m),C=t(540),h=t.n(C),I=t(1113),v=t.n(I),x=t(1624),g={};g.styleTagTransform=v(),g.setAttributes=b(),g.insert=p().bind(null,"head"),g.domAPI=A(),g.insertStyleElement=h(),u()(x.A,g);const f=x.A&&x.A.locals?x.A.locals:void 0,T=r.A.classNames;function w(n){const{className:e,placeholder:t,value:r="",label:s,name:u,autofocus:c=!1,onChange:A,onEnterKeyPressed:d,type:p="text",maxWidth:m,validator:b}=n,[C,h]=l.useState(!1),[I,v]=l.useState(r);l.useEffect((()=>{null==A||A(I)}),[A,I]);const x=Object.assign({},(0,i.S)(n));m&&(x.maxWidth=m);const g=(0,o.jsx)("input",{className:T.join(e,f.InputText,C&&f.invalid),style:x,autoFocus:c,placeholder:t,type:p,value:I,name:u,onChange:n=>{const e=n.target.value;if(h(!1),b)if(b instanceof RegExp){if(b.lastIndex=-1,!b.test(e))return void h(!0)}else"function"==typeof b&&h(!b(e));v(e)},onKeyDown:n=>{C||"Enter"===n.key&&(n.preventDefault(),n.stopPropagation(),null==d||d(I))}});return s?(0,o.jsx)(a.a,{value:s,children:g}):g}},5895:(n,e,t)=>{t.d(e,{a:()=>f});var o=t(4848),l=t(6540),r=t(9142),i=t(5072),a=t.n(i),s=t(7825),u=t.n(s),c=t(7659),A=t.n(c),d=t(5056),p=t.n(d),m=t(540),b=t.n(m),C=t(1113),h=t.n(C),I=t(5036),v={};v.styleTagTransform=h(),v.setAttributes=p(),v.insert=A().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=b(),a()(I.A,v);const x=I.A&&I.A.locals?I.A.locals:void 0,g=r.A.classNames;function f({color:n,className:e,value:t,title:r,children:i}){const a=`labelled/${l.useId()}`;if(!t)return(0,o.jsx)(o.Fragment,{children:i});const s={};return n&&(s.color=`var(--theme-color-${n})`),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("label",{htmlFor:a,title:r,className:g.join(e,x.Label),style:s,children:t}),i&&(0,o.jsx)("div",{id:a,className:x.LabelContent,children:i})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,